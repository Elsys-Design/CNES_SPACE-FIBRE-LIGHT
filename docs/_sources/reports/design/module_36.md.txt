[Back to Design Hierarchy Report](../design_hierarchy.md#vhdl-entities)

<br>

# Entity - spacefibre_light_top

## Summary

| Name | Location | Description |
| --- | --- | --- |
|spacefibre_light_top|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#39">spacefibre_light_top.vhd#39</linty-anchor>||
## Instantiations

Count: 1

| Name | Location | Description | Details |
| --- | --- | --- | :---: |
| TOP | <linty-anchor href="/src/ip_spacefibre_light_top/spacefibre_light_top.vhd#39">spacefibre_light_top.vhd#39</linty-anchor> |  | [<img title="View Instantiation Details" src="/spacefibrelight/_static/images/icon_details.png" style="max-height: 25px; width: auto;" alt="View Instantiation Details">](module_36/instantiation_1.md) |


## Generics

Count: 1

| Name | Type | Default value | Description |
| --- | --- | --- | --- |
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#41">G_VC_NUM</linty-anchor>|integer|8|Number of virtual channel|
## Ports

Count: 89

| Name | Mode | Type | Description |
| --- | --- | --- | --- |
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#44">RST_N</linty-anchor>|in|std_logic|global reset|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#45">CLK</linty-anchor>|in|std_logic|Main clock|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#46">CLK_TX</linty-anchor>|out|std_logic|Clock generated by manufacturer IP|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#47">RST_TXCLK_N</linty-anchor>|out|std_logic|Reset clock generated by manufacturer IP|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#49">CLK_GTY</linty-anchor>|in|std_logic|GTY dedicated clock|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#51">TX_POS</linty-anchor>|out|std_logic|Positive LVDS serial data send|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#52">TX_NEG</linty-anchor>|out|std_logic|Negative LVDS serial data send|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#53">RX_POS</linty-anchor>|in|std_logic|Positive LVDS serial data received|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#54">RX_NEG</linty-anchor>|in|std_logic|Negative LVDS serial data received|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#57">AXIS_ARSTN_TX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Active-low asynchronous reset signals for each virtual channel (VC) in the TX path|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#58">AXIS_ACLK_TX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Clock signals for each VC in the TX path|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#59">AXIS_TREADY_TX_DL</linty-anchor>|out|std_logic_vector ( G_VC_NUM downto 0 )|Indicates that the data link layer is ready to accept data on each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#60">AXIS_TDATA_TX_DL</linty-anchor>|in|vc_data_array ( G_VC_NUM downto 0 )|Data signals from the network layer to the data link layer for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#61">AXIS_TUSER_TX_DL</linty-anchor>|in|vc_k_array ( G_VC_NUM downto 0 )|Sideband information (e.g., control or metadata) from the network layer to the data link layer for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#62">AXIS_TLAST_TX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Indicates the last transfer in a packet/transaction on each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#63">AXIS_TVALID_TX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Indicates that valid data is available on the TX data bus for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#64">AXIS_ARSTN_RX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Active-low asynchronous reset signals for each VC in the RX path|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#65">AXIS_ACLK_RX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Clock signals for each VC in the RX path|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#66">AXIS_TREADY_RX_DL</linty-anchor>|in|std_logic_vector ( G_VC_NUM downto 0 )|Indicates that the network layer is ready to receive data on each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#67">AXIS_TDATA_RX_DL</linty-anchor>|out|vc_data_array ( G_VC_NUM downto 0 )|Data signals from the data link layer to the network layer for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#68">AXIS_TUSER_RX_DL</linty-anchor>|out|vc_k_array ( G_VC_NUM downto 0 )|Sideband information from the data link layer to the network layer for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#69">AXIS_TLAST_RX_DL</linty-anchor>|out|std_logic_vector ( G_VC_NUM downto 0 )|Indicates the last transfer in a packet/transaction on each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#70">AXIS_TVALID_RX_DL</linty-anchor>|out|std_logic_vector ( G_VC_NUM downto 0 )|Indicates that valid data is available on the RX data bus for each VC|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#71">CURRENT_TIME_SLOT_NW</linty-anchor>|in|std_logic_vector ( 7 downto 0 )|Current time slot|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#73">INTERFACE_RESET</linty-anchor>|in|std_logic|Reset the link and all configuration register of the Data Link layer|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#74">LINK_RESET</linty-anchor>|in|std_logic|Reset the link|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#75">NACK_RST_EN</linty-anchor>|in|std_logic|Enable automatic link reset on NACK reception|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#76">NACK_RST_MODE</linty-anchor>|in|std_logic|Up for instant link reset on NACK reception, down for link reset at the end of the current received frame on NACK reception|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#77">PAUSE_VC</linty-anchor>|in|std_logic_vector ( 8 downto 0 )|Pause the corresponding virtual channel after the end of current transmission|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#78">CONTINUOUS_VC</linty-anchor>|in|std_logic_vector ( 7 downto 0 )|Enable the corresponding virtual channel continuous mode|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#80">SEQ_NUMBER_TX</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|SEQ_NUMBER in transmission|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#81">SEQ_NUMBER_RX</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|SEQ_NUMBER in reception|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#82">CREDIT_VC</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|Indicates if each corresponding far-end input buffer has credit|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#83">INPUT_BUF_OVF_VC</linty-anchor>|out|std_logic_vector ( G_VC_NUM - 1 downto 0 )|Indicates input buffer overflow|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#84">FCT_CREDIT_OVERFLOW</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|Indicates overflow of each corresponding input buffer|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#85">CRC_LONG_ERROR</linty-anchor>|out|std_logic|CRC long error|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#86">CRC_SHORT_ERROR</linty-anchor>|out|std_logic|CRC short error|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#87">FRAME_ERROR</linty-anchor>|out|std_logic|Frame error|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#88">SEQUENCE_ERROR</linty-anchor>|out|std_logic|Sequence error|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#89">FAR_END_LINK_RESET</linty-anchor>|out|std_logic|Far-end link reset status|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#90">FRAME_FINISHED</linty-anchor>|out|std_logic_vector ( 8 downto 0 )|Indicates that corresponding channel finished emitting a frame|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#91">FRAME_TX</linty-anchor>|out|std_logic_vector ( 8 downto 0 )|Indicates that corresponding channel is emitting a frame|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#92">DATA_COUNTER_TX</linty-anchor>|out|std_logic_vector ( 6 downto 0 )|Indicate the number of data transmitted in last frame emitted|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#93">DATA_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 6 downto 0 )|Indicate the number of data received in last frame received|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#94">ACK_COUNTER_TX</linty-anchor>|out|std_logic_vector ( 2 downto 0 )|ACK counter TX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#95">NACK_COUNTER_TX</linty-anchor>|out|std_logic_vector ( 2 downto 0 )|NACK counter TX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#96">FCT_COUNTER_TX</linty-anchor>|out|std_logic_vector ( 3 downto 0 )|FCT counter TX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#97">ACK_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 2 downto 0 )|ACK counter RX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#98">NACK_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 2 downto 0 )|NACK counter RX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#99">FCT_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 3 downto 0 )|FCT counter RX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#100">FULL_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 1 downto 0 )|FULL counter RX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#101">RETRY_COUNTER_RX</linty-anchor>|out|std_logic_vector ( 1 downto 0 )|RETRY counter RX|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#102">CURRENT_TIME_SLOT</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|Current time slot|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#103">RESET_PARAM</linty-anchor>|out|std_logic|Reset parameters register command|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#104">LINK_RST_ASSERTED</linty-anchor>|out|std_logic|Link reset status|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#105">NACK_SEQ_NUM</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|NACK Seq_num received|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#106">ACK_SEQ_NUM</linty-anchor>|out|std_logic_vector ( 7 downto 0 )|ACK Seq_num received|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#107">DATA_PULSE_RX</linty-anchor>|out|std_logic|Data received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#108">ACK_PULSE_RX</linty-anchor>|out|std_logic|ACK received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#109">NACK_PULSE_RX</linty-anchor>|out|std_logic|NACK received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#110">FCT_PULSE_RX</linty-anchor>|out|std_logic|FCT received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#111">FULL_PULSE_RX</linty-anchor>|out|std_logic|FULL received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#112">RETRY_PULSE_RX</linty-anchor>|out|std_logic|RETRY received pulse signal|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#115">ENABLE_INJ</linty-anchor>|in|std_logic|Enable injector command|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#116">DATA_TX_INJ</linty-anchor>|in|std_logic_vector ( 31 downto 00 )|Data parallel to be send from injector|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#117">CAPABILITY_TX_INJ</linty-anchor>|in|std_logic_vector ( 07 downto 00 )|Capability send on TX link in INIT3 control word from injector|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#118">NEW_DATA_TX_INJ</linty-anchor>|in|std_logic|Flag to write data in FIFO TX from injetor|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#119">VALID_K_CHARAC_TX_INJ</linty-anchor>|in|std_logic_vector ( 03 downto 00 )|K charachter valid in the 32-bit DATA_TX_INJ vector|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#120">FIFO_TX_FULL_INJ</linty-anchor>|out|std_logic|Flag full of the FIFO TX to the injector|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#121">LANE_RESET_INJ</linty-anchor>|in|std_logic|Lane Reset command from Injector|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#123">ENABLE_SPY</linty-anchor>|in|std_logic|Enable Spy read command|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#124">FIFO_RX_RD_EN_SPY</linty-anchor>|in|std_logic|FiFo RX read enable flag from the spy|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#125">DATA_RX_SPY</linty-anchor>|out|std_logic_vector ( 31 downto 00 )|32-bit Data parallel to be received to the spy|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#126">FIFO_RX_EMPTY_SPY</linty-anchor>|out|std_logic|FiFo RX empty flag to the spy|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#127">FIFO_RX_DATA_VALID_SPY</linty-anchor>|out|std_logic|FiFo RX data valid flag to the spy|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#128">VALID_K_CHARAC_RX_SPY</linty-anchor>|out|std_logic_vector ( 03 downto 00 )|4-bit valid K character flags to the spy|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#130">LANE_START</linty-anchor>|in|std_logic|Asserts or de-asserts LaneStart for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#131">AUTOSTART</linty-anchor>|in|std_logic|Asserts or de-asserts AutoStart for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#132">LANE_RESET</linty-anchor>|in|std_logic|Asserts or de-asserts LaneReset for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#133">PARALLEL_LOOPBACK_EN</linty-anchor>|in|std_logic|Enables or disables the parallel loopback for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#134">STANDBY_REASON</linty-anchor>|in|std_logic_vector ( 07 downto 00 )|In case of error, pauses communication|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#135">NEAR_END_SERIAL_LB_EN</linty-anchor>|in|std_logic|Enables or disables the near-end serial loopback for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#136">FAR_END_SERIAL_LB_EN</linty-anchor>|in|std_logic|Enables or disables the far-end serial loopback for the lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#137">LANE_STATE</linty-anchor>|out|std_logic_vector ( 03 downto 00 )|Indicates the current state of the Lane Initialization state machine in a lane|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#138">RX_ERROR_CNT</linty-anchor>|out|std_logic_vector ( 07 downto 00 )|Counter of error detected on the RX link|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#139">RX_ERROR_OVF</linty-anchor>|out|std_logic|Overflow flag of the RX_ERROR_CNT|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#140">LOSS_SIGNAL</linty-anchor>|out|std_logic|Set when no signal is received on RX link|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#141">FAR_END_CAPA</linty-anchor>|out|std_logic_vector ( 07 downto 00 )|RX Capabilities field (INT3 flags)|
|<linty-anchor href="//src/ip_spacefibre_light_top/spacefibre_light_top.vhd#142">RX_POLARITY</linty-anchor>|out|std_logic|Set when the receiver polarity is inverted|


<br>

[Back to Design Hierarchy Report](../design_hierarchy.md#vhdl-entities)