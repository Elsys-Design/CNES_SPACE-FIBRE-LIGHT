// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2024.1 (lin64) Build 5076996 Wed May 22 18:36:09 MDT 2024
// Date        : Thu Jan 23 16:52:43 2025
// Host        : D-14JM0W2 running 64-bit Ubuntu 20.04.6 LTS
// Command     : write_verilog -force -mode funcsim -rename_top extended_phy_layer_gtwiz_versal_0_0 -prefix
//               extended_phy_layer_gtwiz_versal_0_0_ extended_phy_layer_gtwiz_versal_0_0_sim_netlist.v
// Design      : extended_phy_layer_gtwiz_versal_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xcve2802-vsvh1760-2MP-e-S
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "extended_phy_layer_gtwiz_versal_0_0,extended_phy_layer_gtwiz_versal_0_0_inst,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "extended_phy_layer_gtwiz_versal_0_0_inst,Vivado 2024.1" *) 
(* NotValidForBitStream *)
module extended_phy_layer_gtwiz_versal_0_0
   (gtpowergood,
    gtwiz_freerun_clk,
    QUAD0_GTREFCLK0,
    QUAD0_TX0_outclk,
    QUAD0_RX0_outclk,
    QUAD0_rxp,
    QUAD0_rxn,
    QUAD0_txp,
    QUAD0_txn,
    QUAD0_ch0_loopback,
    QUAD0_gpi,
    QUAD0_gpo,
    QUAD0_hsclk0_lcplllock,
    QUAD0_TX0_usrclk,
    QUAD0_RX0_usrclk,
    INTF0_TX0_ch_txdata,
    INTF0_TX0_ch_txbufstatus,
    INTF0_TX0_ch_txdccdone,
    INTF0_TX0_ch_gttxreset,
    INTF0_TX0_ch_txdebugpcsout,
    INTF0_TX0_ch_txprogdivresetdone,
    INTF0_TX0_ch_txresetdone,
    INTF0_TX0_ch_txinhibit,
    INTF0_TX0_ch_txlatclk,
    INTF0_TX0_ch_txmaincursor,
    INTF0_TX0_ch_txpcsresetmask,
    INTF0_TX0_ch_txpd,
    INTF0_TX0_ch_txpisopd,
    INTF0_TX0_ch_txpmaresetmask,
    INTF0_TX0_ch_txpolarity,
    INTF0_TX0_ch_txpostcursor,
    INTF0_TX0_ch_txprbsforceerr,
    INTF0_TX0_ch_txprbssel,
    INTF0_TX0_ch_txprecursor,
    INTF0_TX0_ch_txprogdivreset,
    INTF0_TX0_ch_txrate,
    INTF0_TX0_ch_txresetmode,
    INTF0_TX0_ch_txheader,
    INTF0_TX0_ch_txsequence,
    INTF0_TX0_ch_txphalignresetmask,
    INTF0_TX0_ch_txcominit,
    INTF0_TX0_ch_txcomsas,
    INTF0_TX0_ch_txcomwake,
    INTF0_TX0_ch_txdapicodeovrden,
    INTF0_TX0_ch_txdapicodereset,
    INTF0_TX0_ch_txdetectrx,
    INTF0_TX0_ch_txphdlytstclk,
    INTF0_TX0_ch_txdlyalignreq,
    INTF0_TX0_ch_txelecidle,
    INTF0_TX0_ch_txmldchaindone,
    INTF0_TX0_ch_txmldchainreq,
    INTF0_TX0_ch_txoneszeros,
    INTF0_TX0_ch_txpausedelayalign,
    INTF0_TX0_ch_txphalignreq,
    INTF0_TX0_ch_txphdlypd,
    INTF0_TX0_ch_txphdlyreset,
    INTF0_TX0_ch_txphsetinitreq,
    INTF0_TX0_ch_txphshift180,
    INTF0_TX0_ch_txpicodeovrden,
    INTF0_TX0_ch_txpicodereset,
    INTF0_TX0_ch_txpippmen,
    INTF0_TX0_ch_txswing,
    INTF0_TX0_ch_txsyncallin,
    INTF0_TX0_ch_tx10gstat,
    INTF0_TX0_ch_txcomfinish,
    INTF0_TX0_ch_txdlyalignerr,
    INTF0_TX0_ch_txdlyalignprog,
    INTF0_TX0_ch_txphaligndone,
    INTF0_TX0_ch_txphalignerr,
    INTF0_TX0_ch_txphalignoutrsvd,
    INTF0_TX0_ch_txphdlyresetdone,
    INTF0_TX0_ch_txphsetinitdone,
    INTF0_TX0_ch_txphshift180done,
    INTF0_TX0_ch_txsyncdone,
    INTF0_TX0_ch_txctrl0,
    INTF0_TX0_ch_txctrl1,
    INTF0_TX0_ch_txctrl2,
    INTF0_TX0_ch_txdeemph,
    INTF0_TX0_ch_txmargin,
    INTF0_TX0_ch_txdiffctrl,
    INTF0_TX0_ch_txpippmstepsize,
    INTF0_TX0_ch_txdapiresetdone,
    INTF0_TX0_ch_txqpisenn,
    INTF0_TX0_ch_txqpisenp,
    INTF0_TX0_ch_txswingouthigh,
    INTF0_TX0_ch_txswingoutlow,
    INTF0_TX0_ch_txdapireset,
    INTF0_TX0_ch_txdapiresetmask,
    INTF0_TX0_ch_txqpibiasen,
    INTF0_TX0_ch_txqpiweakpu,
    INTF0_RX0_ch_rxbufstatus,
    INTF0_RX0_ch_rxcdrlock,
    INTF0_RX0_ch_rxdebugpcsout,
    INTF0_RX0_ch_rxprbserr,
    INTF0_RX0_ch_rxprbslocked,
    INTF0_RX0_ch_rxcdrhold,
    INTF0_RX0_ch_rxcdrovrden,
    INTF0_RX0_ch_rxlatclk,
    INTF0_RX0_ch_rxpcsresetmask,
    INTF0_RX0_ch_rxpd,
    INTF0_RX0_ch_rxpmaresetmask,
    INTF0_RX0_ch_rxpolarity,
    INTF0_RX0_ch_rxprbscntreset,
    INTF0_RX0_ch_rxrate,
    INTF0_RX0_ch_rxresetmode,
    INTF0_RX0_ch_rxdata,
    INTF0_RX0_ch_rx10gstat,
    INTF0_RX0_ch_rxdatavalid,
    INTF0_RX0_ch_rxheader,
    INTF0_RX0_ch_rxchanisaligned,
    INTF0_RX0_ch_rxchanrealign,
    INTF0_RX0_ch_rxchbondi,
    INTF0_RX0_ch_rxchbondo,
    INTF0_RX0_ch_rxclkcorcnt,
    INTF0_RX0_ch_rxcominitdet,
    INTF0_RX0_ch_rxcommadet,
    INTF0_RX0_ch_rxbyteisaligned,
    INTF0_RX0_ch_rxbyterealign,
    INTF0_RX0_ch_rxcomsasdet,
    INTF0_RX0_ch_rxcomwakedet,
    INTF0_RX0_ch_rxctrl0,
    INTF0_RX0_ch_rxctrl1,
    INTF0_RX0_ch_rxctrl2,
    INTF0_RX0_ch_rxctrl3,
    INTF0_RX0_ch_rxdapicodeovrden,
    INTF0_RX0_ch_rxdapicodereset,
    INTF0_RX0_ch_rxdlyalignerr,
    INTF0_RX0_ch_rxdlyalignprog,
    INTF0_RX0_ch_rxdlyalignreq,
    INTF0_RX0_ch_rxelecidle,
    INTF0_RX0_ch_rxeqtraining,
    INTF0_RX0_ch_rxfinealigndone,
    INTF0_RX0_ch_rxgearboxslip,
    INTF0_RX0_ch_rxheadervalid,
    INTF0_RX0_ch_rxlpmen,
    INTF0_RX0_ch_rxmldchaindone,
    INTF0_RX0_ch_rxmldchainreq,
    INTF0_RX0_ch_rxmlfinealignreq,
    INTF0_RX0_ch_rxoobreset,
    INTF0_RX0_ch_rxosintdone,
    INTF0_RX0_ch_rxphaligndone,
    INTF0_RX0_ch_rxphalignerr,
    INTF0_RX0_ch_rxphalignreq,
    INTF0_RX0_ch_rxphalignresetmask,
    INTF0_RX0_ch_rxphdlypd,
    INTF0_RX0_ch_rxphdlyreset,
    INTF0_RX0_ch_rxphdlyresetdone,
    INTF0_RX0_ch_rxphsetinitreq,
    INTF0_RX0_ch_rxphshift180,
    INTF0_RX0_ch_rxphshift180done,
    INTF0_RX0_ch_rxphsetinitdone,
    INTF0_RX0_ch_rxslide,
    INTF0_RX0_ch_rxsliderdy,
    INTF0_RX0_ch_rxstartofseq,
    INTF0_RX0_ch_rxstatus,
    INTF0_RX0_ch_rxsyncallin,
    INTF0_RX0_ch_rxsyncdone,
    INTF0_RX0_ch_rxtermination,
    INTF0_RX0_ch_rxvalid,
    INTF0_RX0_ch_rxchanbondseq,
    INTF0_RX0_ch_rxchanbond_busy,
    INTF0_RX0_ch_rxchanbond_en,
    INTF0_RX0_ch_rxchanbond_master,
    INTF0_RX0_ch_rxchanbond_slave,
    INTF0_RX0_ch_rxchanbond_level,
    INTF0_RX0_ch_cdrbmcdrreq,
    INTF0_RX0_ch_cdrfreqos,
    INTF0_RX0_ch_cdrincpctrl,
    INTF0_RX0_ch_cdrstepdir,
    INTF0_RX0_ch_cdrstepsq,
    INTF0_RX0_ch_cdrstepsx,
    INTF0_RX0_ch_eyescanreset,
    INTF0_RX0_ch_eyescantrigger,
    INTF0_RX0_ch_eyescandataerror,
    INTF0_RX0_ch_refdebugout,
    INTF0_RX0_ch_rxdapiresetdone,
    INTF0_RX0_ch_rxpkdet,
    INTF0_RX0_ch_rxqpisenn,
    INTF0_RX0_ch_rxqpisenp,
    INTF0_RX0_ch_rxsimplexphystatus,
    INTF0_RX0_ch_rxslipdone,
    INTF0_RX0_ch_dfehold,
    INTF0_RX0_ch_dfeovrd,
    INTF0_RX0_ch_rxdapireset,
    INTF0_RX0_ch_rxdapiresetmask,
    INTF0_RX0_ch_rxqpien,
    INTF0_RX0_ch_rxcdrphdone,
    INTF0_RX0_ch_gtrxreset,
    INTF0_RX0_ch_rxprogdivresetdone,
    INTF0_RX0_ch_rxresetdone,
    INTF0_RX0_ch_rxcdrreset,
    INTF0_RX0_ch_rxprbssel,
    INTF0_RX0_ch_rxprogdivreset,
    INTF0_TX_clr_out,
    INTF0_TX_clrb_leaf_out,
    INTF0_RX_clr_out,
    INTF0_RX_clrb_leaf_out,
    INTF0_rst_all_in,
    INTF0_rst_tx_pll_and_datapath_in,
    INTF0_rst_tx_datapath_in,
    INTF0_rst_tx_done_out,
    INTF0_rst_rx_pll_and_datapath_in,
    INTF0_rst_rx_datapath_in,
    INTF0_rst_rx_done_out);
  output gtpowergood;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 GTWIZ_FREERUN_CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GTWIZ_FREERUN_CLK, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN extended_phy_layer_gtwiz_freerun_clk_0, INSERT_VIP 0" *) input gtwiz_freerun_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 Quad0_GTREFCLK0 CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_GTREFCLK0, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN extended_phy_layer_QUAD0_GTREFCLK0_0, INSERT_VIP 0" *) input QUAD0_GTREFCLK0;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 Quad0_TX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_TX0_OUTCLK, FREQ_HZ 322266000.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN extended_phy_layer_gtwiz_versal_0_0_QUAD0_TX0_outclk" *) output QUAD0_TX0_outclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 Quad0_RX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_RX0_OUTCLK, FREQ_HZ 322266000.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN extended_phy_layer_gtwiz_versal_0_0_QUAD0_RX0_outclk" *) output QUAD0_RX0_outclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 Quad0_GT_Serial GRX_P" *) input [3:0]QUAD0_rxp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 Quad0_GT_Serial GRX_N" *) input [3:0]QUAD0_rxn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 Quad0_GT_Serial GTX_P" *) output [3:0]QUAD0_txp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 Quad0_GT_Serial GTX_N" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_GT_Serial, CAN_DEBUG false" *) output [3:0]QUAD0_txn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 Quad0_CH0_DEBUG ch_loopback" *) input [2:0]QUAD0_ch0_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 QUAD0_GT_DEBUG gpi" *) input [31:0]QUAD0_gpi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 QUAD0_GT_DEBUG gpo" *) output [31:0]QUAD0_gpo;
  output QUAD0_hsclk0_lcplllock;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 Quad0_TX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_TX0_USRCLK, FREQ_HZ 156250000, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN extended_phy_layer_QUAD0_TX0_usrclk_0" *) input QUAD0_TX0_usrclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 Quad0_RX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME Quad0_RX0_USRCLK, FREQ_HZ 156250000, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN extended_phy_layer_QUAD0_RX0_usrclk_0" *) input QUAD0_RX0_usrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdata" *) input [127:0]INTF0_TX0_ch_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txbufstatus" *) output [1:0]INTF0_TX0_ch_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdccdone" *) output [0:0]INTF0_TX0_ch_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_gttxreset" *) input [0:0]INTF0_TX0_ch_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdebugpcsout" *) output [0:0]INTF0_TX0_ch_txdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txprogdivresetdone" *) output [0:0]INTF0_TX0_ch_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txresetdone" *) output [0:0]INTF0_TX0_ch_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txinhibit" *) input [0:0]INTF0_TX0_ch_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txlatclk" *) input [0:0]INTF0_TX0_ch_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txmaincursor" *) input [6:0]INTF0_TX0_ch_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpcsresetmask" *) input [0:0]INTF0_TX0_ch_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpd" *) input [1:0]INTF0_TX0_ch_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpisopd" *) input [0:0]INTF0_TX0_ch_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]INTF0_TX0_ch_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpolarity" *) input [0:0]INTF0_TX0_ch_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpostcursor" *) input [4:0]INTF0_TX0_ch_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txprbsforceerr" *) input [0:0]INTF0_TX0_ch_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txprbssel" *) input [3:0]INTF0_TX0_ch_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txprecursor" *) input [4:0]INTF0_TX0_ch_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txprogdivreset" *) input [0:0]INTF0_TX0_ch_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txrate" *) input [7:0]INTF0_TX0_ch_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txresetmode" *) input [1:0]INTF0_TX0_ch_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txheader" *) input [5:0]INTF0_TX0_ch_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txsequence" *) input [6:0]INTF0_TX0_ch_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]INTF0_TX0_ch_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txcominit" *) input [0:0]INTF0_TX0_ch_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txcomsas" *) input [0:0]INTF0_TX0_ch_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txcomwake" *) input [0:0]INTF0_TX0_ch_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdapicodeovrden" *) input [0:0]INTF0_TX0_ch_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdapicodereset" *) input [0:0]INTF0_TX0_ch_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdetectrx" *) input [0:0]INTF0_TX0_ch_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphdlytstclk" *) input [0:0]INTF0_TX0_ch_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdlyalignreq" *) input [0:0]INTF0_TX0_ch_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txelecidle" *) input [0:0]INTF0_TX0_ch_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txmldchaindone" *) input [0:0]INTF0_TX0_ch_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txmldchainreq" *) input [0:0]INTF0_TX0_ch_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txoneszeros" *) input [0:0]INTF0_TX0_ch_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpausedelayalign" *) input [0:0]INTF0_TX0_ch_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphalignreq" *) input [0:0]INTF0_TX0_ch_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphdlypd" *) input [0:0]INTF0_TX0_ch_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphdlyreset" *) input [0:0]INTF0_TX0_ch_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphsetinitreq" *) input [0:0]INTF0_TX0_ch_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphshift180" *) input [0:0]INTF0_TX0_ch_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpicodeovrden" *) input [0:0]INTF0_TX0_ch_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpicodereset" *) input [0:0]INTF0_TX0_ch_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpippmen" *) input [0:0]INTF0_TX0_ch_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txswing" *) input [0:0]INTF0_TX0_ch_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txsyncallin" *) input [0:0]INTF0_TX0_ch_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_tx10gstat" *) output [0:0]INTF0_TX0_ch_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txcomfinish" *) output [0:0]INTF0_TX0_ch_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdlyalignerr" *) output [0:0]INTF0_TX0_ch_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdlyalignprog" *) output [0:0]INTF0_TX0_ch_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphaligndone" *) output [0:0]INTF0_TX0_ch_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphalignerr" *) output [0:0]INTF0_TX0_ch_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphalignoutrsvd" *) output [0:0]INTF0_TX0_ch_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphdlyresetdone" *) output [0:0]INTF0_TX0_ch_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphsetinitdone" *) output [0:0]INTF0_TX0_ch_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txphshift180done" *) output [0:0]INTF0_TX0_ch_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txsyncdone" *) output [0:0]INTF0_TX0_ch_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txctrl0" *) input [15:0]INTF0_TX0_ch_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txctrl1" *) input [15:0]INTF0_TX0_ch_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txctrl2" *) input [7:0]INTF0_TX0_ch_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdeemph" *) input [1:0]INTF0_TX0_ch_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txmargin" *) input [2:0]INTF0_TX0_ch_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdiffctrl" *) input [4:0]INTF0_TX0_ch_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]INTF0_TX0_ch_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdapiresetdone" *) output [0:0]INTF0_TX0_ch_txdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txqpisenn" *) output [0:0]INTF0_TX0_ch_txqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txqpisenp" *) output [0:0]INTF0_TX0_ch_txqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txswingouthigh" *) output [0:0]INTF0_TX0_ch_txswingouthigh;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txswingoutlow" *) output [0:0]INTF0_TX0_ch_txswingoutlow;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdapireset" *) input [0:0]INTF0_TX0_ch_txdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txdapiresetmask" *) input [1:0]INTF0_TX0_ch_txdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txqpibiasen" *) input [0:0]INTF0_TX0_ch_txqpibiasen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 INTF0_TX0_GT_IP_Interface ch_txqpiweakpu" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTF0_TX0_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, TX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input [0:0]INTF0_TX0_ch_txqpiweakpu;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxbufstatus" *) output [2:0]INTF0_RX0_ch_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcdrlock" *) output [0:0]INTF0_RX0_ch_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdebugpcsout" *) output [0:0]INTF0_RX0_ch_rxdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprbserr" *) output [0:0]INTF0_RX0_ch_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprbslocked" *) output [0:0]INTF0_RX0_ch_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcdrhold" *) input [0:0]INTF0_RX0_ch_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcdrovrden" *) input [0:0]INTF0_RX0_ch_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxlatclk" *) input [0:0]INTF0_RX0_ch_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]INTF0_RX0_ch_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxpd" *) input [1:0]INTF0_RX0_ch_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]INTF0_RX0_ch_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxpolarity" *) input [0:0]INTF0_RX0_ch_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprbscntreset" *) input [0:0]INTF0_RX0_ch_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxrate" *) input [7:0]INTF0_RX0_ch_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxresetmode" *) input [1:0]INTF0_RX0_ch_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdata" *) output [127:0]INTF0_RX0_ch_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rx10gstat" *) output [7:0]INTF0_RX0_ch_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdatavalid" *) output [1:0]INTF0_RX0_ch_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxheader" *) output [5:0]INTF0_RX0_ch_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanisaligned" *) output [0:0]INTF0_RX0_ch_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanrealign" *) output [0:0]INTF0_RX0_ch_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchbondi" *) input [4:0]INTF0_RX0_ch_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchbondo" *) output [4:0]INTF0_RX0_ch_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]INTF0_RX0_ch_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcominitdet" *) output [0:0]INTF0_RX0_ch_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcommadet" *) output [0:0]INTF0_RX0_ch_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxbyteisaligned" *) output [0:0]INTF0_RX0_ch_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxbyterealign" *) output [0:0]INTF0_RX0_ch_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcomsasdet" *) output [0:0]INTF0_RX0_ch_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcomwakedet" *) output [0:0]INTF0_RX0_ch_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxctrl0" *) output [15:0]INTF0_RX0_ch_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxctrl1" *) output [15:0]INTF0_RX0_ch_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxctrl2" *) output [7:0]INTF0_RX0_ch_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxctrl3" *) output [7:0]INTF0_RX0_ch_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdapicodeovrden" *) input [0:0]INTF0_RX0_ch_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdapicodereset" *) input [0:0]INTF0_RX0_ch_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdlyalignerr" *) output [0:0]INTF0_RX0_ch_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdlyalignprog" *) output [0:0]INTF0_RX0_ch_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdlyalignreq" *) input [0:0]INTF0_RX0_ch_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxelecidle" *) output [0:0]INTF0_RX0_ch_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxeqtraining" *) input [0:0]INTF0_RX0_ch_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxfinealigndone" *) output [0:0]INTF0_RX0_ch_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxgearboxslip" *) input [0:0]INTF0_RX0_ch_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxheadervalid" *) output [1:0]INTF0_RX0_ch_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxlpmen" *) input [0:0]INTF0_RX0_ch_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxmldchaindone" *) input [0:0]INTF0_RX0_ch_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxmldchainreq" *) input [0:0]INTF0_RX0_ch_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxmlfinealignreq" *) input [0:0]INTF0_RX0_ch_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxoobreset" *) input [0:0]INTF0_RX0_ch_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxosintdone" *) output [0:0]INTF0_RX0_ch_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphaligndone" *) output [0:0]INTF0_RX0_ch_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphalignerr" *) output [0:0]INTF0_RX0_ch_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphalignreq" *) input [0:0]INTF0_RX0_ch_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]INTF0_RX0_ch_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphdlypd" *) input [0:0]INTF0_RX0_ch_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphdlyreset" *) input [0:0]INTF0_RX0_ch_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphdlyresetdone" *) output [0:0]INTF0_RX0_ch_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphsetinitreq" *) input [0:0]INTF0_RX0_ch_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphshift180" *) input [0:0]INTF0_RX0_ch_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphshift180done" *) output [0:0]INTF0_RX0_ch_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxphsetinitdone" *) output [0:0]INTF0_RX0_ch_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxslide" *) input [0:0]INTF0_RX0_ch_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxsliderdy" *) output [0:0]INTF0_RX0_ch_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxstartofseq" *) output [1:0]INTF0_RX0_ch_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxstatus" *) output [2:0]INTF0_RX0_ch_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxsyncallin" *) input [0:0]INTF0_RX0_ch_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxsyncdone" *) output [0:0]INTF0_RX0_ch_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxtermination" *) input [0:0]INTF0_RX0_ch_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxvalid" *) output [0:0]INTF0_RX0_ch_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbondseq" *) output [0:0]INTF0_RX0_ch_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbond_busy" *) output [0:0]INTF0_RX0_ch_rxchanbond_busy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbond_en" *) input [0:0]INTF0_RX0_ch_rxchanbond_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbond_master" *) input [0:0]INTF0_RX0_ch_rxchanbond_master;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbond_slave" *) input [0:0]INTF0_RX0_ch_rxchanbond_slave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxchanbond_level" *) input [2:0]INTF0_RX0_ch_rxchanbond_level;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrbmcdrreq" *) input [0:0]INTF0_RX0_ch_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrfreqos" *) input [0:0]INTF0_RX0_ch_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrincpctrl" *) input [0:0]INTF0_RX0_ch_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrstepdir" *) input [0:0]INTF0_RX0_ch_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrstepsq" *) input [0:0]INTF0_RX0_ch_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_cdrstepsx" *) input [0:0]INTF0_RX0_ch_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_eyescanreset" *) input [0:0]INTF0_RX0_ch_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_eyescantrigger" *) input [0:0]INTF0_RX0_ch_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_eyescandataerror" *) output [0:0]INTF0_RX0_ch_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_refdebugout" *) output [1:0]INTF0_RX0_ch_refdebugout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdapiresetdone" *) output [0:0]INTF0_RX0_ch_rxdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxpkdet" *) output [0:0]INTF0_RX0_ch_rxpkdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxqpisenn" *) output [0:0]INTF0_RX0_ch_rxqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxqpisenp" *) output [0:0]INTF0_RX0_ch_rxqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxsimplexphystatus" *) output [0:0]INTF0_RX0_ch_rxsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxslipdone" *) output [0:0]INTF0_RX0_ch_rxslipdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_dfehold" *) input [0:0]INTF0_RX0_ch_dfehold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_dfeovrd" *) input [0:0]INTF0_RX0_ch_dfeovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdapireset" *) input [0:0]INTF0_RX0_ch_rxdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxdapiresetmask" *) input [1:0]INTF0_RX0_ch_rxdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxqpien" *) input [0:0]INTF0_RX0_ch_rxqpien;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcdrphdone" *) output [0:0]INTF0_RX0_ch_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_gtrxreset" *) input [0:0]INTF0_RX0_ch_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprogdivresetdone" *) output [0:0]INTF0_RX0_ch_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxresetdone" *) output [0:0]INTF0_RX0_ch_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxcdrreset" *) input [0:0]INTF0_RX0_ch_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprbssel" *) input [3:0]INTF0_RX0_ch_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 INTF0_RX0_GT_IP_Interface ch_rxprogdivreset" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTF0_RX0_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, RX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input [0:0]INTF0_RX0_ch_rxprogdivreset;
  output INTF0_TX_clr_out;
  output INTF0_TX_clrb_leaf_out;
  output INTF0_RX_clr_out;
  output INTF0_RX_clrb_leaf_out;
  input INTF0_rst_all_in;
  input INTF0_rst_tx_pll_and_datapath_in;
  input INTF0_rst_tx_datapath_in;
  output INTF0_rst_tx_done_out;
  input INTF0_rst_rx_pll_and_datapath_in;
  input INTF0_rst_rx_datapath_in;
  output INTF0_rst_rx_done_out;

  wire \<const0> ;
  wire [0:0]INTF0_RX0_ch_cdrbmcdrreq;
  wire [0:0]INTF0_RX0_ch_cdrfreqos;
  wire [0:0]INTF0_RX0_ch_cdrincpctrl;
  wire [0:0]INTF0_RX0_ch_cdrstepdir;
  wire [0:0]INTF0_RX0_ch_cdrstepsq;
  wire [0:0]INTF0_RX0_ch_cdrstepsx;
  wire [0:0]INTF0_RX0_ch_dfehold;
  wire [0:0]INTF0_RX0_ch_dfeovrd;
  wire [0:0]INTF0_RX0_ch_eyescandataerror;
  wire [0:0]INTF0_RX0_ch_eyescanreset;
  wire [0:0]INTF0_RX0_ch_eyescantrigger;
  wire [0:0]INTF0_RX0_ch_gtrxreset;
  wire [1:0]INTF0_RX0_ch_refdebugout;
  wire [7:0]INTF0_RX0_ch_rx10gstat;
  wire [2:0]INTF0_RX0_ch_rxbufstatus;
  wire [0:0]INTF0_RX0_ch_rxbyteisaligned;
  wire [0:0]INTF0_RX0_ch_rxbyterealign;
  wire [0:0]INTF0_RX0_ch_rxcdrhold;
  wire [0:0]INTF0_RX0_ch_rxcdrlock;
  wire [0:0]INTF0_RX0_ch_rxcdrovrden;
  wire [0:0]INTF0_RX0_ch_rxcdrphdone;
  wire [0:0]INTF0_RX0_ch_rxcdrreset;
  wire [0:0]INTF0_RX0_ch_rxchanbondseq;
  wire [0:0]INTF0_RX0_ch_rxchanisaligned;
  wire [0:0]INTF0_RX0_ch_rxchanrealign;
  wire [4:0]INTF0_RX0_ch_rxchbondi;
  wire [4:0]INTF0_RX0_ch_rxchbondo;
  wire [1:0]INTF0_RX0_ch_rxclkcorcnt;
  wire [0:0]INTF0_RX0_ch_rxcominitdet;
  wire [0:0]INTF0_RX0_ch_rxcommadet;
  wire [0:0]INTF0_RX0_ch_rxcomsasdet;
  wire [0:0]INTF0_RX0_ch_rxcomwakedet;
  wire [15:0]INTF0_RX0_ch_rxctrl0;
  wire [15:0]INTF0_RX0_ch_rxctrl1;
  wire [7:0]INTF0_RX0_ch_rxctrl2;
  wire [7:0]INTF0_RX0_ch_rxctrl3;
  wire [0:0]INTF0_RX0_ch_rxdapicodeovrden;
  wire [0:0]INTF0_RX0_ch_rxdapicodereset;
  wire [0:0]INTF0_RX0_ch_rxdapireset;
  wire [0:0]INTF0_RX0_ch_rxdapiresetdone;
  wire [1:0]INTF0_RX0_ch_rxdapiresetmask;
  wire [127:0]INTF0_RX0_ch_rxdata;
  wire [1:0]INTF0_RX0_ch_rxdatavalid;
  wire [0:0]INTF0_RX0_ch_rxdebugpcsout;
  wire [0:0]INTF0_RX0_ch_rxdlyalignerr;
  wire [0:0]INTF0_RX0_ch_rxdlyalignprog;
  wire [0:0]INTF0_RX0_ch_rxdlyalignreq;
  wire [0:0]INTF0_RX0_ch_rxelecidle;
  wire [0:0]INTF0_RX0_ch_rxeqtraining;
  wire [0:0]INTF0_RX0_ch_rxfinealigndone;
  wire [0:0]INTF0_RX0_ch_rxgearboxslip;
  wire [5:0]INTF0_RX0_ch_rxheader;
  wire [1:0]INTF0_RX0_ch_rxheadervalid;
  wire [0:0]INTF0_RX0_ch_rxlatclk;
  wire [0:0]INTF0_RX0_ch_rxlpmen;
  wire [0:0]INTF0_RX0_ch_rxmldchaindone;
  wire [0:0]INTF0_RX0_ch_rxmldchainreq;
  wire [0:0]INTF0_RX0_ch_rxmlfinealignreq;
  wire [0:0]INTF0_RX0_ch_rxoobreset;
  wire [0:0]INTF0_RX0_ch_rxosintdone;
  wire [4:0]INTF0_RX0_ch_rxpcsresetmask;
  wire [1:0]INTF0_RX0_ch_rxpd;
  wire [0:0]INTF0_RX0_ch_rxphaligndone;
  wire [0:0]INTF0_RX0_ch_rxphalignerr;
  wire [0:0]INTF0_RX0_ch_rxphalignreq;
  wire [1:0]INTF0_RX0_ch_rxphalignresetmask;
  wire [0:0]INTF0_RX0_ch_rxphdlypd;
  wire [0:0]INTF0_RX0_ch_rxphdlyreset;
  wire [0:0]INTF0_RX0_ch_rxphdlyresetdone;
  wire [0:0]INTF0_RX0_ch_rxphsetinitdone;
  wire [0:0]INTF0_RX0_ch_rxphsetinitreq;
  wire [0:0]INTF0_RX0_ch_rxphshift180;
  wire [0:0]INTF0_RX0_ch_rxphshift180done;
  wire [0:0]INTF0_RX0_ch_rxpkdet;
  wire [6:0]INTF0_RX0_ch_rxpmaresetmask;
  wire [0:0]INTF0_RX0_ch_rxpolarity;
  wire [0:0]INTF0_RX0_ch_rxprbscntreset;
  wire [0:0]INTF0_RX0_ch_rxprbserr;
  wire [0:0]INTF0_RX0_ch_rxprbslocked;
  wire [3:0]INTF0_RX0_ch_rxprbssel;
  wire [0:0]INTF0_RX0_ch_rxprogdivreset;
  wire [0:0]INTF0_RX0_ch_rxprogdivresetdone;
  wire [0:0]INTF0_RX0_ch_rxqpien;
  wire [0:0]INTF0_RX0_ch_rxqpisenn;
  wire [0:0]INTF0_RX0_ch_rxqpisenp;
  wire [7:0]INTF0_RX0_ch_rxrate;
  wire [0:0]INTF0_RX0_ch_rxresetdone;
  wire [1:0]INTF0_RX0_ch_rxresetmode;
  wire [0:0]INTF0_RX0_ch_rxsimplexphystatus;
  wire [0:0]INTF0_RX0_ch_rxslide;
  wire [0:0]INTF0_RX0_ch_rxsliderdy;
  wire [0:0]INTF0_RX0_ch_rxslipdone;
  wire [1:0]INTF0_RX0_ch_rxstartofseq;
  wire [2:0]INTF0_RX0_ch_rxstatus;
  wire [0:0]INTF0_RX0_ch_rxsyncallin;
  wire [0:0]INTF0_RX0_ch_rxsyncdone;
  wire [0:0]INTF0_RX0_ch_rxtermination;
  wire [0:0]INTF0_RX0_ch_rxvalid;
  wire INTF0_RX_clr_out;
  wire INTF0_RX_clrb_leaf_out;
  wire [0:0]INTF0_TX0_ch_gttxreset;
  wire [0:0]INTF0_TX0_ch_tx10gstat;
  wire [1:0]INTF0_TX0_ch_txbufstatus;
  wire [0:0]INTF0_TX0_ch_txcomfinish;
  wire [0:0]INTF0_TX0_ch_txcominit;
  wire [0:0]INTF0_TX0_ch_txcomsas;
  wire [0:0]INTF0_TX0_ch_txcomwake;
  wire [15:0]INTF0_TX0_ch_txctrl0;
  wire [15:0]INTF0_TX0_ch_txctrl1;
  wire [7:0]INTF0_TX0_ch_txctrl2;
  wire [0:0]INTF0_TX0_ch_txdapicodeovrden;
  wire [0:0]INTF0_TX0_ch_txdapicodereset;
  wire [0:0]INTF0_TX0_ch_txdapireset;
  wire [0:0]INTF0_TX0_ch_txdapiresetdone;
  wire [1:0]INTF0_TX0_ch_txdapiresetmask;
  wire [127:0]INTF0_TX0_ch_txdata;
  wire [0:0]INTF0_TX0_ch_txdccdone;
  wire [0:0]INTF0_TX0_ch_txdebugpcsout;
  wire [1:0]INTF0_TX0_ch_txdeemph;
  wire [0:0]INTF0_TX0_ch_txdetectrx;
  wire [4:0]INTF0_TX0_ch_txdiffctrl;
  wire [0:0]INTF0_TX0_ch_txdlyalignerr;
  wire [0:0]INTF0_TX0_ch_txdlyalignprog;
  wire [0:0]INTF0_TX0_ch_txdlyalignreq;
  wire [0:0]INTF0_TX0_ch_txelecidle;
  wire [5:0]INTF0_TX0_ch_txheader;
  wire [0:0]INTF0_TX0_ch_txinhibit;
  wire [0:0]INTF0_TX0_ch_txlatclk;
  wire [6:0]INTF0_TX0_ch_txmaincursor;
  wire [2:0]INTF0_TX0_ch_txmargin;
  wire [0:0]INTF0_TX0_ch_txmldchaindone;
  wire [0:0]INTF0_TX0_ch_txmldchainreq;
  wire [0:0]INTF0_TX0_ch_txoneszeros;
  wire [0:0]INTF0_TX0_ch_txpausedelayalign;
  wire [0:0]INTF0_TX0_ch_txpcsresetmask;
  wire [1:0]INTF0_TX0_ch_txpd;
  wire [0:0]INTF0_TX0_ch_txphaligndone;
  wire [0:0]INTF0_TX0_ch_txphalignerr;
  wire [0:0]INTF0_TX0_ch_txphalignoutrsvd;
  wire [0:0]INTF0_TX0_ch_txphalignreq;
  wire [1:0]INTF0_TX0_ch_txphalignresetmask;
  wire [0:0]INTF0_TX0_ch_txphdlypd;
  wire [0:0]INTF0_TX0_ch_txphdlyreset;
  wire [0:0]INTF0_TX0_ch_txphdlyresetdone;
  wire [0:0]INTF0_TX0_ch_txphdlytstclk;
  wire [0:0]INTF0_TX0_ch_txphsetinitdone;
  wire [0:0]INTF0_TX0_ch_txphsetinitreq;
  wire [0:0]INTF0_TX0_ch_txphshift180;
  wire [0:0]INTF0_TX0_ch_txphshift180done;
  wire [0:0]INTF0_TX0_ch_txpicodeovrden;
  wire [0:0]INTF0_TX0_ch_txpicodereset;
  wire [0:0]INTF0_TX0_ch_txpippmen;
  wire [4:0]INTF0_TX0_ch_txpippmstepsize;
  wire [0:0]INTF0_TX0_ch_txpisopd;
  wire [2:0]INTF0_TX0_ch_txpmaresetmask;
  wire [0:0]INTF0_TX0_ch_txpolarity;
  wire [4:0]INTF0_TX0_ch_txpostcursor;
  wire [0:0]INTF0_TX0_ch_txprbsforceerr;
  wire [3:0]INTF0_TX0_ch_txprbssel;
  wire [4:0]INTF0_TX0_ch_txprecursor;
  wire [0:0]INTF0_TX0_ch_txprogdivreset;
  wire [0:0]INTF0_TX0_ch_txprogdivresetdone;
  wire [0:0]INTF0_TX0_ch_txqpibiasen;
  wire [0:0]INTF0_TX0_ch_txqpisenn;
  wire [0:0]INTF0_TX0_ch_txqpisenp;
  wire [0:0]INTF0_TX0_ch_txqpiweakpu;
  wire [7:0]INTF0_TX0_ch_txrate;
  wire [0:0]INTF0_TX0_ch_txresetdone;
  wire [1:0]INTF0_TX0_ch_txresetmode;
  wire [6:0]INTF0_TX0_ch_txsequence;
  wire [0:0]INTF0_TX0_ch_txswing;
  wire [0:0]INTF0_TX0_ch_txswingouthigh;
  wire [0:0]INTF0_TX0_ch_txswingoutlow;
  wire [0:0]INTF0_TX0_ch_txsyncallin;
  wire [0:0]INTF0_TX0_ch_txsyncdone;
  wire INTF0_TX_clr_out;
  wire INTF0_TX_clrb_leaf_out;
  wire INTF0_rst_all_in;
  wire INTF0_rst_rx_datapath_in;
  wire INTF0_rst_rx_done_out;
  wire INTF0_rst_rx_pll_and_datapath_in;
  wire INTF0_rst_tx_datapath_in;
  wire INTF0_rst_tx_done_out;
  wire INTF0_rst_tx_pll_and_datapath_in;
  wire QUAD0_GTREFCLK0;
  wire QUAD0_RX0_outclk;
  wire QUAD0_RX0_usrclk;
  wire QUAD0_TX0_outclk;
  wire QUAD0_TX0_usrclk;
  wire [2:0]QUAD0_ch0_loopback;
  wire [31:0]QUAD0_gpi;
  wire [31:0]QUAD0_gpo;
  wire QUAD0_hsclk0_lcplllock;
  wire [3:0]QUAD0_rxn;
  wire [3:0]QUAD0_rxp;
  wire [3:0]QUAD0_txn;
  wire [3:0]QUAD0_txp;
  wire gtpowergood;
  wire gtwiz_freerun_clk;
  wire NLW_inst_INTF0_RX0_ch_rxchanbond_busy_UNCONNECTED;

  assign INTF0_RX0_ch_rxchanbond_busy[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* C_Component_Name = "extended_phy_layer_gtwiz_versal_0_0" *) 
  (* INTF0_CHANNEL_MAPING = "INTF0_RX0 QUAD0_RX0 INTF0_TX0 QUAD0_TX0" *) 
  (* INTF0_LANE_MAPING = "INTF0 {QUAD0_RX0 QUAD0_TX0}" *) 
  (* INTF1_CHANNEL_MAPING = "INTF1_RX0 QUAD0_RX0 INTF1_RX1 QUAD0_RX1 INTF1_RX2 QUAD0_RX2 INTF1_RX3 QUAD0_RX3 INTF1_TX0 QUAD0_TX0 INTF1_TX1 QUAD0_TX1 INTF1_TX2 QUAD0_TX2 INTF1_TX3 QUAD0_TX3" *) 
  (* INTF1_LANE_MAPING = "INTF1 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF2_CHANNEL_MAPING = "INTF2_RX0 QUAD0_RX0 INTF2_RX1 QUAD0_RX1 INTF2_RX2 QUAD0_RX2 INTF2_RX3 QUAD0_RX3 INTF2_TX0 QUAD0_TX0 INTF2_TX1 QUAD0_TX1 INTF2_TX2 QUAD0_TX2 INTF2_TX3 QUAD0_TX3" *) 
  (* INTF2_LANE_MAPING = "INTF2 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF3_CHANNEL_MAPING = "INTF3_RX0 QUAD0_RX0 INTF3_RX1 QUAD0_RX1 INTF3_RX2 QUAD0_RX2 INTF3_RX3 QUAD0_RX3 INTF3_TX0 QUAD0_TX0 INTF3_TX1 QUAD0_TX1 INTF3_TX2 QUAD0_TX2 INTF3_TX3 QUAD0_TX3" *) 
  (* INTF3_LANE_MAPING = "INTF3 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF4_CHANNEL_MAPING = "INTF4_RX0 QUAD0_RX0 INTF4_RX1 QUAD0_RX1 INTF4_RX2 QUAD0_RX2 INTF4_RX3 QUAD0_RX3 INTF4_TX0 QUAD0_TX0 INTF4_TX1 QUAD0_TX1 INTF4_TX2 QUAD0_TX2 INTF4_TX3 QUAD0_TX3" *) 
  (* INTF4_LANE_MAPING = "INTF4 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF5_CHANNEL_MAPING = "INTF5_RX0 QUAD0_RX0 INTF5_RX1 QUAD0_RX1 INTF5_RX2 QUAD0_RX2 INTF5_RX3 QUAD0_RX3 INTF5_TX0 QUAD0_TX0 INTF5_TX1 QUAD0_TX1 INTF5_TX2 QUAD0_TX2 INTF5_TX3 QUAD0_TX3" *) 
  (* INTF5_LANE_MAPING = "INTF5 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF6_CHANNEL_MAPING = "INTF6_RX0 QUAD0_RX0 INTF6_RX1 QUAD0_RX1 INTF6_RX2 QUAD0_RX2 INTF6_RX3 QUAD0_RX3 INTF6_TX0 QUAD0_TX0 INTF6_TX1 QUAD0_TX1 INTF6_TX2 QUAD0_TX2 INTF6_TX3 QUAD0_TX3" *) 
  (* INTF6_LANE_MAPING = "INTF6 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF7_CHANNEL_MAPING = "INTF7_RX0 QUAD0_RX0 INTF7_RX1 QUAD0_RX1 INTF7_RX2 QUAD0_RX2 INTF7_RX3 QUAD0_RX3 INTF7_TX0 QUAD0_TX0 INTF7_TX1 QUAD0_TX1 INTF7_TX2 QUAD0_TX2 INTF7_TX3 QUAD0_TX3" *) 
  (* INTF7_LANE_MAPING = "INTF7 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
  (* INTF_CHANNEL_NUMBERING = "QUAD0_RX0 0 QUAD0_TX0 0" *) 
  (* INTF_LANE_MAP_LIST = "QUAD0_RX0 QUAD0_TX0" *) 
  (* INTF_PARENT_PIN_LIST = "QUAD0_RX0 {{}} QUAD0_TX0 {{}}" *) 
  (* INTF_QUAD_MAP_CKECK = "" *) 
  (* IS_KSB = "1'b0" *) 
  (* QUAD0_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}}" *) 
  (* QUAD0_INTF_LANESEL_DICT = "INTF0 {{RX0 TX0}} unconnected {{RX1 RX2 RX3 TX1 TX2 TX3}}" *) 
  (* QUAD0_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}" *) 
  (* QUAD0_LANE_SATISFIED = "1 {}" *) 
  (* QUAD0_LANE_SEL_DICT = "PROT0 {RX0 TX0} unconnected {RX1 RX2 RX3 TX1 TX2 TX3}" *) 
  (* QUAD0_MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) 
  (* QUAD0_PACK = "" *) 
  (* QUAD0_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD0_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1" *) 
  (* QUAD0_RX0_LANE_SEL = "PROT0" *) 
  (* QUAD0_RX1_LANE_SEL = "unconnected" *) 
  (* QUAD0_RX2_LANE_SEL = "unconnected" *) 
  (* QUAD0_RX3_LANE_SEL = "unconnected" *) 
  (* QUAD0_TX0_LANE_SEL = "PROT0" *) 
  (* QUAD0_TX1_LANE_SEL = "unconnected" *) 
  (* QUAD0_TX2_LANE_SEL = "unconnected" *) 
  (* QUAD0_TX3_LANE_SEL = "unconnected" *) 
  (* QUAD1_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) 
  (* QUAD1_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD1_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
  (* QUAD1_LANE_SATISFIED = "1 {}" *) 
  (* QUAD1_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD1_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) 
  (* QUAD1_PACK = "" *) 
  (* QUAD1_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD1_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) 
  (* QUAD1_RX0_LANE_SEL = "PROT0" *) 
  (* QUAD1_RX1_LANE_SEL = "PROT0" *) 
  (* QUAD1_RX2_LANE_SEL = "PROT0" *) 
  (* QUAD1_RX3_LANE_SEL = "PROT0" *) 
  (* QUAD1_TX0_LANE_SEL = "PROT0" *) 
  (* QUAD1_TX1_LANE_SEL = "PROT0" *) 
  (* QUAD1_TX2_LANE_SEL = "PROT0" *) 
  (* QUAD1_TX3_LANE_SEL = "PROT0" *) 
  (* QUAD2_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) 
  (* QUAD2_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD2_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
  (* QUAD2_LANE_SATISFIED = "1 {}" *) 
  (* QUAD2_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD2_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) 
  (* QUAD2_PACK = "" *) 
  (* QUAD2_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD2_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) 
  (* QUAD2_RX0_LANE_SEL = "PROT0" *) 
  (* QUAD2_RX1_LANE_SEL = "PROT0" *) 
  (* QUAD2_RX2_LANE_SEL = "PROT0" *) 
  (* QUAD2_RX3_LANE_SEL = "PROT0" *) 
  (* QUAD2_TX0_LANE_SEL = "PROT0" *) 
  (* QUAD2_TX1_LANE_SEL = "PROT0" *) 
  (* QUAD2_TX2_LANE_SEL = "PROT0" *) 
  (* QUAD2_TX3_LANE_SEL = "PROT0" *) 
  (* QUAD3_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) 
  (* QUAD3_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD3_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
  (* QUAD3_LANE_SATISFIED = "1 {}" *) 
  (* QUAD3_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD3_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) 
  (* QUAD3_PACK = "" *) 
  (* QUAD3_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD3_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) 
  (* QUAD3_RX0_LANE_SEL = "PROT0" *) 
  (* QUAD3_RX1_LANE_SEL = "PROT0" *) 
  (* QUAD3_RX2_LANE_SEL = "PROT0" *) 
  (* QUAD3_RX3_LANE_SEL = "PROT0" *) 
  (* QUAD3_TX0_LANE_SEL = "PROT0" *) 
  (* QUAD3_TX1_LANE_SEL = "PROT0" *) 
  (* QUAD3_TX2_LANE_SEL = "PROT0" *) 
  (* QUAD3_TX3_LANE_SEL = "PROT0" *) 
  (* QUAD4_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) 
  (* QUAD4_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD4_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
  (* QUAD4_LANE_SATISFIED = "1 {}" *) 
  (* QUAD4_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* QUAD4_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) 
  (* QUAD4_PACK = "" *) 
  (* QUAD4_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* QUAD4_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) 
  (* QUAD4_RX0_LANE_SEL = "PROT0" *) 
  (* QUAD4_RX1_LANE_SEL = "PROT0" *) 
  (* QUAD4_RX2_LANE_SEL = "PROT0" *) 
  (* QUAD4_RX3_LANE_SEL = "PROT0" *) 
  (* QUAD4_TX0_LANE_SEL = "PROT0" *) 
  (* QUAD4_TX1_LANE_SEL = "PROT0" *) 
  (* QUAD4_TX2_LANE_SEL = "PROT0" *) 
  (* QUAD4_TX3_LANE_SEL = "PROT0" *) 
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_inst inst
       (.INTF0_RX0_ch_cdrbmcdrreq(INTF0_RX0_ch_cdrbmcdrreq),
        .INTF0_RX0_ch_cdrfreqos(INTF0_RX0_ch_cdrfreqos),
        .INTF0_RX0_ch_cdrincpctrl(INTF0_RX0_ch_cdrincpctrl),
        .INTF0_RX0_ch_cdrstepdir(INTF0_RX0_ch_cdrstepdir),
        .INTF0_RX0_ch_cdrstepsq(INTF0_RX0_ch_cdrstepsq),
        .INTF0_RX0_ch_cdrstepsx(INTF0_RX0_ch_cdrstepsx),
        .INTF0_RX0_ch_dfehold(INTF0_RX0_ch_dfehold),
        .INTF0_RX0_ch_dfeovrd(INTF0_RX0_ch_dfeovrd),
        .INTF0_RX0_ch_eyescandataerror(INTF0_RX0_ch_eyescandataerror),
        .INTF0_RX0_ch_eyescanreset(INTF0_RX0_ch_eyescanreset),
        .INTF0_RX0_ch_eyescantrigger(INTF0_RX0_ch_eyescantrigger),
        .INTF0_RX0_ch_gtrxreset(INTF0_RX0_ch_gtrxreset),
        .INTF0_RX0_ch_refdebugout(INTF0_RX0_ch_refdebugout),
        .INTF0_RX0_ch_rx10gstat(INTF0_RX0_ch_rx10gstat),
        .INTF0_RX0_ch_rxbufstatus(INTF0_RX0_ch_rxbufstatus),
        .INTF0_RX0_ch_rxbyteisaligned(INTF0_RX0_ch_rxbyteisaligned),
        .INTF0_RX0_ch_rxbyterealign(INTF0_RX0_ch_rxbyterealign),
        .INTF0_RX0_ch_rxcdrhold(INTF0_RX0_ch_rxcdrhold),
        .INTF0_RX0_ch_rxcdrlock(INTF0_RX0_ch_rxcdrlock),
        .INTF0_RX0_ch_rxcdrovrden(INTF0_RX0_ch_rxcdrovrden),
        .INTF0_RX0_ch_rxcdrphdone(INTF0_RX0_ch_rxcdrphdone),
        .INTF0_RX0_ch_rxcdrreset(INTF0_RX0_ch_rxcdrreset),
        .INTF0_RX0_ch_rxchanbond_busy(NLW_inst_INTF0_RX0_ch_rxchanbond_busy_UNCONNECTED),
        .INTF0_RX0_ch_rxchanbond_en(1'b0),
        .INTF0_RX0_ch_rxchanbond_level({1'b0,1'b0,1'b0}),
        .INTF0_RX0_ch_rxchanbond_master(1'b0),
        .INTF0_RX0_ch_rxchanbond_slave(1'b0),
        .INTF0_RX0_ch_rxchanbondseq(INTF0_RX0_ch_rxchanbondseq),
        .INTF0_RX0_ch_rxchanisaligned(INTF0_RX0_ch_rxchanisaligned),
        .INTF0_RX0_ch_rxchanrealign(INTF0_RX0_ch_rxchanrealign),
        .INTF0_RX0_ch_rxchbondi(INTF0_RX0_ch_rxchbondi),
        .INTF0_RX0_ch_rxchbondo(INTF0_RX0_ch_rxchbondo),
        .INTF0_RX0_ch_rxclkcorcnt(INTF0_RX0_ch_rxclkcorcnt),
        .INTF0_RX0_ch_rxcominitdet(INTF0_RX0_ch_rxcominitdet),
        .INTF0_RX0_ch_rxcommadet(INTF0_RX0_ch_rxcommadet),
        .INTF0_RX0_ch_rxcomsasdet(INTF0_RX0_ch_rxcomsasdet),
        .INTF0_RX0_ch_rxcomwakedet(INTF0_RX0_ch_rxcomwakedet),
        .INTF0_RX0_ch_rxctrl0(INTF0_RX0_ch_rxctrl0),
        .INTF0_RX0_ch_rxctrl1(INTF0_RX0_ch_rxctrl1),
        .INTF0_RX0_ch_rxctrl2(INTF0_RX0_ch_rxctrl2),
        .INTF0_RX0_ch_rxctrl3(INTF0_RX0_ch_rxctrl3),
        .INTF0_RX0_ch_rxdapicodeovrden(INTF0_RX0_ch_rxdapicodeovrden),
        .INTF0_RX0_ch_rxdapicodereset(INTF0_RX0_ch_rxdapicodereset),
        .INTF0_RX0_ch_rxdapireset(INTF0_RX0_ch_rxdapireset),
        .INTF0_RX0_ch_rxdapiresetdone(INTF0_RX0_ch_rxdapiresetdone),
        .INTF0_RX0_ch_rxdapiresetmask(INTF0_RX0_ch_rxdapiresetmask),
        .INTF0_RX0_ch_rxdata(INTF0_RX0_ch_rxdata),
        .INTF0_RX0_ch_rxdatavalid(INTF0_RX0_ch_rxdatavalid),
        .INTF0_RX0_ch_rxdebugpcsout(INTF0_RX0_ch_rxdebugpcsout),
        .INTF0_RX0_ch_rxdlyalignerr(INTF0_RX0_ch_rxdlyalignerr),
        .INTF0_RX0_ch_rxdlyalignprog(INTF0_RX0_ch_rxdlyalignprog),
        .INTF0_RX0_ch_rxdlyalignreq(INTF0_RX0_ch_rxdlyalignreq),
        .INTF0_RX0_ch_rxelecidle(INTF0_RX0_ch_rxelecidle),
        .INTF0_RX0_ch_rxeqtraining(INTF0_RX0_ch_rxeqtraining),
        .INTF0_RX0_ch_rxfinealigndone(INTF0_RX0_ch_rxfinealigndone),
        .INTF0_RX0_ch_rxgearboxslip(INTF0_RX0_ch_rxgearboxslip),
        .INTF0_RX0_ch_rxheader(INTF0_RX0_ch_rxheader),
        .INTF0_RX0_ch_rxheadervalid(INTF0_RX0_ch_rxheadervalid),
        .INTF0_RX0_ch_rxlatclk(INTF0_RX0_ch_rxlatclk),
        .INTF0_RX0_ch_rxlpmen(INTF0_RX0_ch_rxlpmen),
        .INTF0_RX0_ch_rxmldchaindone(INTF0_RX0_ch_rxmldchaindone),
        .INTF0_RX0_ch_rxmldchainreq(INTF0_RX0_ch_rxmldchainreq),
        .INTF0_RX0_ch_rxmlfinealignreq(INTF0_RX0_ch_rxmlfinealignreq),
        .INTF0_RX0_ch_rxoobreset(INTF0_RX0_ch_rxoobreset),
        .INTF0_RX0_ch_rxosintdone(INTF0_RX0_ch_rxosintdone),
        .INTF0_RX0_ch_rxpcsresetmask(INTF0_RX0_ch_rxpcsresetmask),
        .INTF0_RX0_ch_rxpd(INTF0_RX0_ch_rxpd),
        .INTF0_RX0_ch_rxphaligndone(INTF0_RX0_ch_rxphaligndone),
        .INTF0_RX0_ch_rxphalignerr(INTF0_RX0_ch_rxphalignerr),
        .INTF0_RX0_ch_rxphalignreq(INTF0_RX0_ch_rxphalignreq),
        .INTF0_RX0_ch_rxphalignresetmask(INTF0_RX0_ch_rxphalignresetmask),
        .INTF0_RX0_ch_rxphdlypd(INTF0_RX0_ch_rxphdlypd),
        .INTF0_RX0_ch_rxphdlyreset(INTF0_RX0_ch_rxphdlyreset),
        .INTF0_RX0_ch_rxphdlyresetdone(INTF0_RX0_ch_rxphdlyresetdone),
        .INTF0_RX0_ch_rxphsetinitdone(INTF0_RX0_ch_rxphsetinitdone),
        .INTF0_RX0_ch_rxphsetinitreq(INTF0_RX0_ch_rxphsetinitreq),
        .INTF0_RX0_ch_rxphshift180(INTF0_RX0_ch_rxphshift180),
        .INTF0_RX0_ch_rxphshift180done(INTF0_RX0_ch_rxphshift180done),
        .INTF0_RX0_ch_rxpkdet(INTF0_RX0_ch_rxpkdet),
        .INTF0_RX0_ch_rxpmaresetmask(INTF0_RX0_ch_rxpmaresetmask),
        .INTF0_RX0_ch_rxpolarity(INTF0_RX0_ch_rxpolarity),
        .INTF0_RX0_ch_rxprbscntreset(INTF0_RX0_ch_rxprbscntreset),
        .INTF0_RX0_ch_rxprbserr(INTF0_RX0_ch_rxprbserr),
        .INTF0_RX0_ch_rxprbslocked(INTF0_RX0_ch_rxprbslocked),
        .INTF0_RX0_ch_rxprbssel(INTF0_RX0_ch_rxprbssel),
        .INTF0_RX0_ch_rxprogdivreset(INTF0_RX0_ch_rxprogdivreset),
        .INTF0_RX0_ch_rxprogdivresetdone(INTF0_RX0_ch_rxprogdivresetdone),
        .INTF0_RX0_ch_rxqpien(INTF0_RX0_ch_rxqpien),
        .INTF0_RX0_ch_rxqpisenn(INTF0_RX0_ch_rxqpisenn),
        .INTF0_RX0_ch_rxqpisenp(INTF0_RX0_ch_rxqpisenp),
        .INTF0_RX0_ch_rxrate(INTF0_RX0_ch_rxrate),
        .INTF0_RX0_ch_rxresetdone(INTF0_RX0_ch_rxresetdone),
        .INTF0_RX0_ch_rxresetmode(INTF0_RX0_ch_rxresetmode),
        .INTF0_RX0_ch_rxsimplexphystatus(INTF0_RX0_ch_rxsimplexphystatus),
        .INTF0_RX0_ch_rxslide(INTF0_RX0_ch_rxslide),
        .INTF0_RX0_ch_rxsliderdy(INTF0_RX0_ch_rxsliderdy),
        .INTF0_RX0_ch_rxslipdone(INTF0_RX0_ch_rxslipdone),
        .INTF0_RX0_ch_rxstartofseq(INTF0_RX0_ch_rxstartofseq),
        .INTF0_RX0_ch_rxstatus(INTF0_RX0_ch_rxstatus),
        .INTF0_RX0_ch_rxsyncallin(INTF0_RX0_ch_rxsyncallin),
        .INTF0_RX0_ch_rxsyncdone(INTF0_RX0_ch_rxsyncdone),
        .INTF0_RX0_ch_rxtermination(INTF0_RX0_ch_rxtermination),
        .INTF0_RX0_ch_rxvalid(INTF0_RX0_ch_rxvalid),
        .INTF0_RX_clr_out(INTF0_RX_clr_out),
        .INTF0_RX_clrb_leaf_out(INTF0_RX_clrb_leaf_out),
        .INTF0_TX0_ch_gttxreset(INTF0_TX0_ch_gttxreset),
        .INTF0_TX0_ch_tx10gstat(INTF0_TX0_ch_tx10gstat),
        .INTF0_TX0_ch_txbufstatus(INTF0_TX0_ch_txbufstatus),
        .INTF0_TX0_ch_txcomfinish(INTF0_TX0_ch_txcomfinish),
        .INTF0_TX0_ch_txcominit(INTF0_TX0_ch_txcominit),
        .INTF0_TX0_ch_txcomsas(INTF0_TX0_ch_txcomsas),
        .INTF0_TX0_ch_txcomwake(INTF0_TX0_ch_txcomwake),
        .INTF0_TX0_ch_txctrl0(INTF0_TX0_ch_txctrl0),
        .INTF0_TX0_ch_txctrl1(INTF0_TX0_ch_txctrl1),
        .INTF0_TX0_ch_txctrl2(INTF0_TX0_ch_txctrl2),
        .INTF0_TX0_ch_txdapicodeovrden(INTF0_TX0_ch_txdapicodeovrden),
        .INTF0_TX0_ch_txdapicodereset(INTF0_TX0_ch_txdapicodereset),
        .INTF0_TX0_ch_txdapireset(INTF0_TX0_ch_txdapireset),
        .INTF0_TX0_ch_txdapiresetdone(INTF0_TX0_ch_txdapiresetdone),
        .INTF0_TX0_ch_txdapiresetmask(INTF0_TX0_ch_txdapiresetmask),
        .INTF0_TX0_ch_txdata(INTF0_TX0_ch_txdata),
        .INTF0_TX0_ch_txdccdone(INTF0_TX0_ch_txdccdone),
        .INTF0_TX0_ch_txdebugpcsout(INTF0_TX0_ch_txdebugpcsout),
        .INTF0_TX0_ch_txdeemph(INTF0_TX0_ch_txdeemph),
        .INTF0_TX0_ch_txdetectrx(INTF0_TX0_ch_txdetectrx),
        .INTF0_TX0_ch_txdiffctrl(INTF0_TX0_ch_txdiffctrl),
        .INTF0_TX0_ch_txdlyalignerr(INTF0_TX0_ch_txdlyalignerr),
        .INTF0_TX0_ch_txdlyalignprog(INTF0_TX0_ch_txdlyalignprog),
        .INTF0_TX0_ch_txdlyalignreq(INTF0_TX0_ch_txdlyalignreq),
        .INTF0_TX0_ch_txelecidle(INTF0_TX0_ch_txelecidle),
        .INTF0_TX0_ch_txheader(INTF0_TX0_ch_txheader),
        .INTF0_TX0_ch_txinhibit(INTF0_TX0_ch_txinhibit),
        .INTF0_TX0_ch_txlatclk(INTF0_TX0_ch_txlatclk),
        .INTF0_TX0_ch_txmaincursor(INTF0_TX0_ch_txmaincursor),
        .INTF0_TX0_ch_txmargin(INTF0_TX0_ch_txmargin),
        .INTF0_TX0_ch_txmldchaindone(INTF0_TX0_ch_txmldchaindone),
        .INTF0_TX0_ch_txmldchainreq(INTF0_TX0_ch_txmldchainreq),
        .INTF0_TX0_ch_txoneszeros(INTF0_TX0_ch_txoneszeros),
        .INTF0_TX0_ch_txpausedelayalign(INTF0_TX0_ch_txpausedelayalign),
        .INTF0_TX0_ch_txpcsresetmask(INTF0_TX0_ch_txpcsresetmask),
        .INTF0_TX0_ch_txpd(INTF0_TX0_ch_txpd),
        .INTF0_TX0_ch_txphaligndone(INTF0_TX0_ch_txphaligndone),
        .INTF0_TX0_ch_txphalignerr(INTF0_TX0_ch_txphalignerr),
        .INTF0_TX0_ch_txphalignoutrsvd(INTF0_TX0_ch_txphalignoutrsvd),
        .INTF0_TX0_ch_txphalignreq(INTF0_TX0_ch_txphalignreq),
        .INTF0_TX0_ch_txphalignresetmask(INTF0_TX0_ch_txphalignresetmask),
        .INTF0_TX0_ch_txphdlypd(INTF0_TX0_ch_txphdlypd),
        .INTF0_TX0_ch_txphdlyreset(INTF0_TX0_ch_txphdlyreset),
        .INTF0_TX0_ch_txphdlyresetdone(INTF0_TX0_ch_txphdlyresetdone),
        .INTF0_TX0_ch_txphdlytstclk(INTF0_TX0_ch_txphdlytstclk),
        .INTF0_TX0_ch_txphsetinitdone(INTF0_TX0_ch_txphsetinitdone),
        .INTF0_TX0_ch_txphsetinitreq(INTF0_TX0_ch_txphsetinitreq),
        .INTF0_TX0_ch_txphshift180(INTF0_TX0_ch_txphshift180),
        .INTF0_TX0_ch_txphshift180done(INTF0_TX0_ch_txphshift180done),
        .INTF0_TX0_ch_txpicodeovrden(INTF0_TX0_ch_txpicodeovrden),
        .INTF0_TX0_ch_txpicodereset(INTF0_TX0_ch_txpicodereset),
        .INTF0_TX0_ch_txpippmen(INTF0_TX0_ch_txpippmen),
        .INTF0_TX0_ch_txpippmstepsize(INTF0_TX0_ch_txpippmstepsize),
        .INTF0_TX0_ch_txpisopd(INTF0_TX0_ch_txpisopd),
        .INTF0_TX0_ch_txpmaresetmask(INTF0_TX0_ch_txpmaresetmask),
        .INTF0_TX0_ch_txpolarity(INTF0_TX0_ch_txpolarity),
        .INTF0_TX0_ch_txpostcursor(INTF0_TX0_ch_txpostcursor),
        .INTF0_TX0_ch_txprbsforceerr(INTF0_TX0_ch_txprbsforceerr),
        .INTF0_TX0_ch_txprbssel(INTF0_TX0_ch_txprbssel),
        .INTF0_TX0_ch_txprecursor(INTF0_TX0_ch_txprecursor),
        .INTF0_TX0_ch_txprogdivreset(INTF0_TX0_ch_txprogdivreset),
        .INTF0_TX0_ch_txprogdivresetdone(INTF0_TX0_ch_txprogdivresetdone),
        .INTF0_TX0_ch_txqpibiasen(INTF0_TX0_ch_txqpibiasen),
        .INTF0_TX0_ch_txqpisenn(INTF0_TX0_ch_txqpisenn),
        .INTF0_TX0_ch_txqpisenp(INTF0_TX0_ch_txqpisenp),
        .INTF0_TX0_ch_txqpiweakpu(INTF0_TX0_ch_txqpiweakpu),
        .INTF0_TX0_ch_txrate(INTF0_TX0_ch_txrate),
        .INTF0_TX0_ch_txresetdone(INTF0_TX0_ch_txresetdone),
        .INTF0_TX0_ch_txresetmode(INTF0_TX0_ch_txresetmode),
        .INTF0_TX0_ch_txsequence(INTF0_TX0_ch_txsequence),
        .INTF0_TX0_ch_txswing(INTF0_TX0_ch_txswing),
        .INTF0_TX0_ch_txswingouthigh(INTF0_TX0_ch_txswingouthigh),
        .INTF0_TX0_ch_txswingoutlow(INTF0_TX0_ch_txswingoutlow),
        .INTF0_TX0_ch_txsyncallin(INTF0_TX0_ch_txsyncallin),
        .INTF0_TX0_ch_txsyncdone(INTF0_TX0_ch_txsyncdone),
        .INTF0_TX_clr_out(INTF0_TX_clr_out),
        .INTF0_TX_clrb_leaf_out(INTF0_TX_clrb_leaf_out),
        .INTF0_rst_all_in(INTF0_rst_all_in),
        .INTF0_rst_rx_datapath_in(INTF0_rst_rx_datapath_in),
        .INTF0_rst_rx_done_out(INTF0_rst_rx_done_out),
        .INTF0_rst_rx_pll_and_datapath_in(INTF0_rst_rx_pll_and_datapath_in),
        .INTF0_rst_tx_datapath_in(INTF0_rst_tx_datapath_in),
        .INTF0_rst_tx_done_out(INTF0_rst_tx_done_out),
        .INTF0_rst_tx_pll_and_datapath_in(INTF0_rst_tx_pll_and_datapath_in),
        .QUAD0_GTREFCLK0(QUAD0_GTREFCLK0),
        .QUAD0_RX0_outclk(QUAD0_RX0_outclk),
        .QUAD0_RX0_usrclk(QUAD0_RX0_usrclk),
        .QUAD0_TX0_outclk(QUAD0_TX0_outclk),
        .QUAD0_TX0_usrclk(QUAD0_TX0_usrclk),
        .QUAD0_ch0_loopback(QUAD0_ch0_loopback),
        .QUAD0_gpi(QUAD0_gpi),
        .QUAD0_gpo(QUAD0_gpo),
        .QUAD0_hsclk0_lcplllock(QUAD0_hsclk0_lcplllock),
        .QUAD0_rxn(QUAD0_rxn),
        .QUAD0_rxp(QUAD0_rxp),
        .QUAD0_txn(QUAD0_txn),
        .QUAD0_txp(QUAD0_txp),
        .gtpowergood(gtpowergood),
        .gtwiz_freerun_clk(gtwiz_freerun_clk));
endmodule

(* CHECK_LICENSE_TYPE = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0,extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst,Vivado 2024.1" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0
   (rxmarginclk,
    hsclk0_lcpllreset,
    hsclk0_rpllreset,
    hsclk1_lcpllreset,
    hsclk1_rpllreset,
    hsclk0_lcplllock,
    hsclk1_lcplllock,
    hsclk0_rplllock,
    hsclk1_rplllock,
    gtpowergood,
    ch0_pcierstb,
    ch1_pcierstb,
    ch2_pcierstb,
    ch3_pcierstb,
    pcielinkreachtarget,
    pcieltssm,
    rxmarginreqack,
    rxmarginrescmd,
    rxmarginreslanenum,
    rxmarginrespayld,
    rxmarginresreq,
    rxmarginreqcmd,
    rxmarginreqlanenum,
    rxmarginreqpayld,
    rxmarginreqreq,
    rxmarginresack,
    ch0_iloreset,
    ch1_iloreset,
    ch2_iloreset,
    ch3_iloreset,
    ch0_iloresetdone,
    ch1_iloresetdone,
    ch2_iloresetdone,
    ch3_iloresetdone,
    ch0_phystatus,
    ch1_phystatus,
    ch2_phystatus,
    ch3_phystatus,
    hsclk0_lcpllfbclklost,
    hsclk0_lcpllrefclklost,
    hsclk0_lcpllrefclkmonitor,
    hsclk0_rpllfbclklost,
    hsclk0_rpllrefclklost,
    hsclk0_rpllrefclkmonitor,
    hsclk1_lcpllfbclklost,
    hsclk1_lcpllrefclklost,
    hsclk1_lcpllrefclkmonitor,
    hsclk1_rpllfbclklost,
    hsclk1_rpllrefclklost,
    hsclk1_rpllrefclkmonitor,
    hsclk0_lcpllpd,
    hsclk0_rpllpd,
    hsclk0_lcpllresetbypassmode,
    hsclk0_lcpllsdmtoggle,
    hsclk0_rpllresetbypassmode,
    hsclk0_rpllsdmtoggle,
    hsclk1_lcpllpd,
    hsclk1_lcpllresetbypassmode,
    hsclk1_lcpllsdmtoggle,
    hsclk1_rpllpd,
    hsclk1_rpllresetbypassmode,
    hsclk1_rpllsdmtoggle,
    refclk0_gtrefclkpd,
    refclk1_gtrefclkpd,
    hsclk0_lcpllrefclksel,
    hsclk1_lcpllrefclksel,
    hsclk0_rpllrefclksel,
    hsclk1_rpllrefclksel,
    hsclk0_lcpllfbdiv,
    hsclk0_rpllfbdiv,
    hsclk1_lcpllfbdiv,
    hsclk1_rpllfbdiv,
    hsclk0_rxrecclkout0,
    hsclk0_rxrecclkout1,
    hsclk1_rxrecclkout0,
    hsclk1_rxrecclkout1,
    hsclk0_lcpllsdmdata,
    hsclk1_lcpllsdmdata,
    hsclk0_rpllsdmdata,
    hsclk1_rpllsdmdata,
    hsclk0_lcpllresetmask,
    hsclk1_lcpllresetmask,
    hsclk0_rpllresetmask,
    hsclk1_rpllresetmask,
    ch0_txdata,
    ch0_txheader,
    ch0_txsequence,
    ch0_gttxreset,
    ch0_txprogdivreset,
    ch0_txuserrdy,
    ch0_txphalignresetmask,
    ch0_txcominit,
    ch0_txcomsas,
    ch0_txcomwake,
    ch0_txdapicodeovrden,
    ch0_txdapicodereset,
    ch0_txdetectrx,
    ch0_txlatclk,
    ch0_txphdlytstclk,
    ch0_txdlyalignreq,
    ch0_txelecidle,
    ch0_txinhibit,
    ch0_txmldchaindone,
    ch0_txmldchainreq,
    ch0_txoneszeros,
    ch0_txpausedelayalign,
    ch0_txpcsresetmask,
    ch0_txphalignreq,
    ch0_txphdlypd,
    ch0_txphdlyreset,
    ch0_txphsetinitreq,
    ch0_txphshift180,
    ch0_txpicodeovrden,
    ch0_txpicodereset,
    ch0_txpippmen,
    ch0_txpisopd,
    ch0_txpolarity,
    ch0_txprbsforceerr,
    ch0_txswing,
    ch0_txsyncallin,
    ch0_tx10gstat,
    ch0_txcomfinish,
    ch0_txdccdone,
    ch0_txdlyalignerr,
    ch0_txdlyalignprog,
    ch0_txphaligndone,
    ch0_txphalignerr,
    ch0_txphalignoutrsvd,
    ch0_txphdlyresetdone,
    ch0_txphsetinitdone,
    ch0_txphshift180done,
    ch0_txsyncdone,
    ch0_txbufstatus,
    ch0_txctrl0,
    ch0_txctrl1,
    ch0_txdeemph,
    ch0_txpd,
    ch0_txresetmode,
    ch0_txmstreset,
    ch0_txmstdatapathreset,
    ch0_txmstresetdone,
    ch0_txmargin,
    ch0_txpmaresetmask,
    ch0_txprbssel,
    ch0_txdiffctrl,
    ch0_txpippmstepsize,
    ch0_txpostcursor,
    ch0_txprecursor,
    ch0_txmaincursor,
    ch0_txctrl2,
    ch0_txrate,
    ch0_txprogdivresetdone,
    ch0_txpmaresetdone,
    ch0_txresetdone,
    ch0_txdapiresetdone,
    ch0_txdebugpcsout,
    ch0_txqpisenn,
    ch0_txqpisenp,
    ch0_txsimplexphystatus,
    ch0_txswingouthigh,
    ch0_txswingoutlow,
    ch0_txdapireset,
    ch0_txdapiresetmask,
    ch0_txqpibiasen,
    ch0_txqpiweakpu,
    ch0_txoutclk,
    ch0_txusrclk,
    ch1_txdata,
    ch1_txheader,
    ch1_txsequence,
    ch1_gttxreset,
    ch1_txprogdivreset,
    ch1_txuserrdy,
    ch1_txphalignresetmask,
    ch1_txcominit,
    ch1_txcomsas,
    ch1_txcomwake,
    ch1_txdapicodeovrden,
    ch1_txdapicodereset,
    ch1_txdetectrx,
    ch1_txlatclk,
    ch1_txphdlytstclk,
    ch1_txdlyalignreq,
    ch1_txelecidle,
    ch1_txinhibit,
    ch1_txmldchaindone,
    ch1_txmldchainreq,
    ch1_txoneszeros,
    ch1_txpausedelayalign,
    ch1_txpcsresetmask,
    ch1_txphalignreq,
    ch1_txphdlypd,
    ch1_txphdlyreset,
    ch1_txphsetinitreq,
    ch1_txphshift180,
    ch1_txpicodeovrden,
    ch1_txpicodereset,
    ch1_txpippmen,
    ch1_txpisopd,
    ch1_txpolarity,
    ch1_txprbsforceerr,
    ch1_txswing,
    ch1_txsyncallin,
    ch1_tx10gstat,
    ch1_txcomfinish,
    ch1_txdccdone,
    ch1_txdlyalignerr,
    ch1_txdlyalignprog,
    ch1_txphaligndone,
    ch1_txphalignerr,
    ch1_txphalignoutrsvd,
    ch1_txphdlyresetdone,
    ch1_txphsetinitdone,
    ch1_txphshift180done,
    ch1_txsyncdone,
    ch1_txbufstatus,
    ch1_txctrl0,
    ch1_txctrl1,
    ch1_txdeemph,
    ch1_txpd,
    ch1_txresetmode,
    ch1_txmstreset,
    ch1_txmstdatapathreset,
    ch1_txmstresetdone,
    ch1_txmargin,
    ch1_txpmaresetmask,
    ch1_txprbssel,
    ch1_txdiffctrl,
    ch1_txpippmstepsize,
    ch1_txpostcursor,
    ch1_txprecursor,
    ch1_txmaincursor,
    ch1_txctrl2,
    ch1_txrate,
    ch1_txprogdivresetdone,
    ch1_txpmaresetdone,
    ch1_txresetdone,
    ch1_txdapiresetdone,
    ch1_txdebugpcsout,
    ch1_txqpisenn,
    ch1_txqpisenp,
    ch1_txsimplexphystatus,
    ch1_txswingouthigh,
    ch1_txswingoutlow,
    ch1_txdapireset,
    ch1_txdapiresetmask,
    ch1_txqpibiasen,
    ch1_txqpiweakpu,
    ch1_txoutclk,
    ch1_txusrclk,
    ch2_txdata,
    ch2_txheader,
    ch2_txsequence,
    ch2_gttxreset,
    ch2_txprogdivreset,
    ch2_txuserrdy,
    ch2_txphalignresetmask,
    ch2_txcominit,
    ch2_txcomsas,
    ch2_txcomwake,
    ch2_txdapicodeovrden,
    ch2_txdapicodereset,
    ch2_txdetectrx,
    ch2_txlatclk,
    ch2_txphdlytstclk,
    ch2_txdlyalignreq,
    ch2_txelecidle,
    ch2_txinhibit,
    ch2_txmldchaindone,
    ch2_txmldchainreq,
    ch2_txoneszeros,
    ch2_txpausedelayalign,
    ch2_txpcsresetmask,
    ch2_txphalignreq,
    ch2_txphdlypd,
    ch2_txphdlyreset,
    ch2_txphsetinitreq,
    ch2_txphshift180,
    ch2_txpicodeovrden,
    ch2_txpicodereset,
    ch2_txpippmen,
    ch2_txpisopd,
    ch2_txpolarity,
    ch2_txprbsforceerr,
    ch2_txswing,
    ch2_txsyncallin,
    ch2_tx10gstat,
    ch2_txcomfinish,
    ch2_txdccdone,
    ch2_txdlyalignerr,
    ch2_txdlyalignprog,
    ch2_txphaligndone,
    ch2_txphalignerr,
    ch2_txphalignoutrsvd,
    ch2_txphdlyresetdone,
    ch2_txphsetinitdone,
    ch2_txphshift180done,
    ch2_txsyncdone,
    ch2_txbufstatus,
    ch2_txctrl0,
    ch2_txctrl1,
    ch2_txdeemph,
    ch2_txpd,
    ch2_txresetmode,
    ch2_txmstreset,
    ch2_txmstdatapathreset,
    ch2_txmstresetdone,
    ch2_txmargin,
    ch2_txpmaresetmask,
    ch2_txprbssel,
    ch2_txdiffctrl,
    ch2_txpippmstepsize,
    ch2_txpostcursor,
    ch2_txprecursor,
    ch2_txmaincursor,
    ch2_txctrl2,
    ch2_txrate,
    ch2_txprogdivresetdone,
    ch2_txpmaresetdone,
    ch2_txresetdone,
    ch2_txdapiresetdone,
    ch2_txdebugpcsout,
    ch2_txqpisenn,
    ch2_txqpisenp,
    ch2_txsimplexphystatus,
    ch2_txswingouthigh,
    ch2_txswingoutlow,
    ch2_txdapireset,
    ch2_txdapiresetmask,
    ch2_txqpibiasen,
    ch2_txqpiweakpu,
    ch2_txoutclk,
    ch2_txusrclk,
    ch3_txdata,
    ch3_txheader,
    ch3_txsequence,
    ch3_gttxreset,
    ch3_txprogdivreset,
    ch3_txuserrdy,
    ch3_txphalignresetmask,
    ch3_txcominit,
    ch3_txcomsas,
    ch3_txcomwake,
    ch3_txdapicodeovrden,
    ch3_txdapicodereset,
    ch3_txdetectrx,
    ch3_txlatclk,
    ch3_txphdlytstclk,
    ch3_txdlyalignreq,
    ch3_txelecidle,
    ch3_txinhibit,
    ch3_txmldchaindone,
    ch3_txmldchainreq,
    ch3_txoneszeros,
    ch3_txpausedelayalign,
    ch3_txpcsresetmask,
    ch3_txphalignreq,
    ch3_txphdlypd,
    ch3_txphdlyreset,
    ch3_txphsetinitreq,
    ch3_txphshift180,
    ch3_txpicodeovrden,
    ch3_txpicodereset,
    ch3_txpippmen,
    ch3_txpisopd,
    ch3_txpolarity,
    ch3_txprbsforceerr,
    ch3_txswing,
    ch3_txsyncallin,
    ch3_tx10gstat,
    ch3_txcomfinish,
    ch3_txdccdone,
    ch3_txdlyalignerr,
    ch3_txdlyalignprog,
    ch3_txphaligndone,
    ch3_txphalignerr,
    ch3_txphalignoutrsvd,
    ch3_txphdlyresetdone,
    ch3_txphsetinitdone,
    ch3_txphshift180done,
    ch3_txsyncdone,
    ch3_txbufstatus,
    ch3_txctrl0,
    ch3_txctrl1,
    ch3_txdeemph,
    ch3_txpd,
    ch3_txresetmode,
    ch3_txmstreset,
    ch3_txmstdatapathreset,
    ch3_txmstresetdone,
    ch3_txmargin,
    ch3_txpmaresetmask,
    ch3_txprbssel,
    ch3_txdiffctrl,
    ch3_txpippmstepsize,
    ch3_txpostcursor,
    ch3_txprecursor,
    ch3_txmaincursor,
    ch3_txctrl2,
    ch3_txrate,
    ch3_txprogdivresetdone,
    ch3_txpmaresetdone,
    ch3_txresetdone,
    ch3_txdapiresetdone,
    ch3_txdebugpcsout,
    ch3_txqpisenn,
    ch3_txqpisenp,
    ch3_txsimplexphystatus,
    ch3_txswingouthigh,
    ch3_txswingoutlow,
    ch3_txdapireset,
    ch3_txdapiresetmask,
    ch3_txqpibiasen,
    ch3_txqpiweakpu,
    ch3_txoutclk,
    ch3_txusrclk,
    ch0_rxdata,
    ch0_rxdatavalid,
    ch0_rxheader,
    ch0_rxgearboxslip,
    ch0_rxlatclk,
    ch0_gtrxreset,
    ch0_rxprogdivreset,
    ch0_rxuserrdy,
    ch0_rxprogdivresetdone,
    ch0_rxpmaresetdone,
    ch0_rxresetdone,
    ch0_rx10gstat,
    ch0_rxbufstatus,
    ch0_rxbyteisaligned,
    ch0_rxbyterealign,
    ch0_rxcdrhold,
    ch0_rxcdrlock,
    ch0_rxcdrovrden,
    ch0_rxcdrphdone,
    ch0_rxcdrreset,
    ch0_rxchanbondseq,
    ch0_rxchanisaligned,
    ch0_rxchanrealign,
    ch0_rxchbondi,
    ch0_rxchbondo,
    ch0_rxclkcorcnt,
    ch0_rxcominitdet,
    ch0_rxcommadet,
    ch0_rxcomsasdet,
    ch0_rxcomwakedet,
    ch0_rxctrl0,
    ch0_rxctrl1,
    ch0_rxctrl2,
    ch0_rxctrl3,
    ch0_rxdapicodeovrden,
    ch0_rxdapicodereset,
    ch0_rxdlyalignerr,
    ch0_rxdlyalignprog,
    ch0_rxdlyalignreq,
    ch0_rxelecidle,
    ch0_rxeqtraining,
    ch0_rxfinealigndone,
    ch0_rxheadervalid,
    ch0_rxlpmen,
    ch0_rxmldchaindone,
    ch0_rxmldchainreq,
    ch0_rxmlfinealignreq,
    ch0_rxoobreset,
    ch0_rxosintdone,
    ch0_rxpcsresetmask,
    ch0_rxpd,
    ch0_rxphaligndone,
    ch0_rxphalignerr,
    ch0_rxphalignreq,
    ch0_rxphalignresetmask,
    ch0_rxphdlypd,
    ch0_rxphdlyreset,
    ch0_rxphdlyresetdone,
    ch0_rxphsetinitdone,
    ch0_rxphsetinitreq,
    ch0_rxphshift180,
    ch0_rxphshift180done,
    ch0_rxpmaresetmask,
    ch0_rxpolarity,
    ch0_rxprbscntreset,
    ch0_rxprbserr,
    ch0_rxprbslocked,
    ch0_rxprbssel,
    ch0_rxrate,
    ch0_rxresetmode,
    ch0_rxmstreset,
    ch0_rxmstdatapathreset,
    ch0_rxmstresetdone,
    ch0_rxslide,
    ch0_rxsliderdy,
    ch0_rxstartofseq,
    ch0_rxstatus,
    ch0_rxsyncallin,
    ch0_rxsyncdone,
    ch0_rxtermination,
    ch0_rxvalid,
    ch0_cdrbmcdrreq,
    ch0_cdrfreqos,
    ch0_cdrincpctrl,
    ch0_cdrstepdir,
    ch0_cdrstepsq,
    ch0_cdrstepsx,
    ch0_eyescanreset,
    ch0_eyescantrigger,
    ch0_eyescandataerror,
    ch0_refdebugout,
    ch0_rxdapiresetdone,
    ch0_rxdebugpcsout,
    ch0_rxpkdet,
    ch0_rxqpisenn,
    ch0_rxqpisenp,
    ch0_rxsimplexphystatus,
    ch0_rxslipdone,
    ch0_dfehold,
    ch0_dfeovrd,
    ch0_rxdapireset,
    ch0_rxdapiresetmask,
    ch0_rxqpien,
    ch0_rxoutclk,
    ch0_rxusrclk,
    ch1_rxdata,
    ch1_rxdatavalid,
    ch1_rxheader,
    ch1_rxgearboxslip,
    ch1_rxlatclk,
    ch1_gtrxreset,
    ch1_rxprogdivreset,
    ch1_rxuserrdy,
    ch1_rxprogdivresetdone,
    ch1_rxpmaresetdone,
    ch1_rxresetdone,
    ch1_rx10gstat,
    ch1_rxbufstatus,
    ch1_rxbyteisaligned,
    ch1_rxbyterealign,
    ch1_rxcdrhold,
    ch1_rxcdrlock,
    ch1_rxcdrovrden,
    ch1_rxcdrphdone,
    ch1_rxcdrreset,
    ch1_rxchanbondseq,
    ch1_rxchanisaligned,
    ch1_rxchanrealign,
    ch1_rxchbondi,
    ch1_rxchbondo,
    ch1_rxclkcorcnt,
    ch1_rxcominitdet,
    ch1_rxcommadet,
    ch1_rxcomsasdet,
    ch1_rxcomwakedet,
    ch1_rxctrl0,
    ch1_rxctrl1,
    ch1_rxctrl2,
    ch1_rxctrl3,
    ch1_rxdapicodeovrden,
    ch1_rxdapicodereset,
    ch1_rxdlyalignerr,
    ch1_rxdlyalignprog,
    ch1_rxdlyalignreq,
    ch1_rxelecidle,
    ch1_rxeqtraining,
    ch1_rxfinealigndone,
    ch1_rxheadervalid,
    ch1_rxlpmen,
    ch1_rxmldchaindone,
    ch1_rxmldchainreq,
    ch1_rxmlfinealignreq,
    ch1_rxoobreset,
    ch1_rxosintdone,
    ch1_rxpcsresetmask,
    ch1_rxpd,
    ch1_rxphaligndone,
    ch1_rxphalignerr,
    ch1_rxphalignreq,
    ch1_rxphalignresetmask,
    ch1_rxphdlypd,
    ch1_rxphdlyreset,
    ch1_rxphdlyresetdone,
    ch1_rxphsetinitdone,
    ch1_rxphsetinitreq,
    ch1_rxphshift180,
    ch1_rxphshift180done,
    ch1_rxpmaresetmask,
    ch1_rxpolarity,
    ch1_rxprbscntreset,
    ch1_rxprbserr,
    ch1_rxprbslocked,
    ch1_rxprbssel,
    ch1_rxrate,
    ch1_rxresetmode,
    ch1_rxmstreset,
    ch1_rxmstdatapathreset,
    ch1_rxmstresetdone,
    ch1_rxslide,
    ch1_rxsliderdy,
    ch1_rxstartofseq,
    ch1_rxstatus,
    ch1_rxsyncallin,
    ch1_rxsyncdone,
    ch1_rxtermination,
    ch1_rxvalid,
    ch1_cdrbmcdrreq,
    ch1_cdrfreqos,
    ch1_cdrincpctrl,
    ch1_cdrstepdir,
    ch1_cdrstepsq,
    ch1_cdrstepsx,
    ch1_eyescanreset,
    ch1_eyescantrigger,
    ch1_eyescandataerror,
    ch1_refdebugout,
    ch1_rxdapiresetdone,
    ch1_rxdebugpcsout,
    ch1_rxpkdet,
    ch1_rxqpisenn,
    ch1_rxqpisenp,
    ch1_rxsimplexphystatus,
    ch1_rxslipdone,
    ch1_dfehold,
    ch1_dfeovrd,
    ch1_rxdapireset,
    ch1_rxdapiresetmask,
    ch1_rxqpien,
    ch1_rxoutclk,
    ch1_rxusrclk,
    ch2_rxdata,
    ch2_rxdatavalid,
    ch2_rxheader,
    ch2_rxgearboxslip,
    ch2_rxlatclk,
    ch2_gtrxreset,
    ch2_rxprogdivreset,
    ch2_rxuserrdy,
    ch2_rxprogdivresetdone,
    ch2_rxpmaresetdone,
    ch2_rxresetdone,
    ch2_rx10gstat,
    ch2_rxbufstatus,
    ch2_rxbyteisaligned,
    ch2_rxbyterealign,
    ch2_rxcdrhold,
    ch2_rxcdrlock,
    ch2_rxcdrovrden,
    ch2_rxcdrphdone,
    ch2_rxcdrreset,
    ch2_rxchanbondseq,
    ch2_rxchanisaligned,
    ch2_rxchanrealign,
    ch2_rxchbondi,
    ch2_rxchbondo,
    ch2_rxclkcorcnt,
    ch2_rxcominitdet,
    ch2_rxcommadet,
    ch2_rxcomsasdet,
    ch2_rxcomwakedet,
    ch2_rxctrl0,
    ch2_rxctrl1,
    ch2_rxctrl2,
    ch2_rxctrl3,
    ch2_rxdapicodeovrden,
    ch2_rxdapicodereset,
    ch2_rxdlyalignerr,
    ch2_rxdlyalignprog,
    ch2_rxdlyalignreq,
    ch2_rxelecidle,
    ch2_rxeqtraining,
    ch2_rxfinealigndone,
    ch2_rxheadervalid,
    ch2_rxlpmen,
    ch2_rxmldchaindone,
    ch2_rxmldchainreq,
    ch2_rxmlfinealignreq,
    ch2_rxoobreset,
    ch2_rxosintdone,
    ch2_rxpcsresetmask,
    ch2_rxpd,
    ch2_rxphaligndone,
    ch2_rxphalignerr,
    ch2_rxphalignreq,
    ch2_rxphalignresetmask,
    ch2_rxphdlypd,
    ch2_rxphdlyreset,
    ch2_rxphdlyresetdone,
    ch2_rxphsetinitdone,
    ch2_rxphsetinitreq,
    ch2_rxphshift180,
    ch2_rxphshift180done,
    ch2_rxpmaresetmask,
    ch2_rxpolarity,
    ch2_rxprbscntreset,
    ch2_rxprbserr,
    ch2_rxprbslocked,
    ch2_rxprbssel,
    ch2_rxrate,
    ch2_rxresetmode,
    ch2_rxmstreset,
    ch2_rxmstdatapathreset,
    ch2_rxmstresetdone,
    ch2_rxslide,
    ch2_rxsliderdy,
    ch2_rxstartofseq,
    ch2_rxstatus,
    ch2_rxsyncallin,
    ch2_rxsyncdone,
    ch2_rxtermination,
    ch2_rxvalid,
    ch2_cdrbmcdrreq,
    ch2_cdrfreqos,
    ch2_cdrincpctrl,
    ch2_cdrstepdir,
    ch2_cdrstepsq,
    ch2_cdrstepsx,
    ch2_eyescanreset,
    ch2_eyescantrigger,
    ch2_eyescandataerror,
    ch2_refdebugout,
    ch2_rxdapiresetdone,
    ch2_rxdebugpcsout,
    ch2_rxpkdet,
    ch2_rxqpisenn,
    ch2_rxqpisenp,
    ch2_rxsimplexphystatus,
    ch2_rxslipdone,
    ch2_dfehold,
    ch2_dfeovrd,
    ch2_rxdapireset,
    ch2_rxdapiresetmask,
    ch2_rxqpien,
    ch2_rxoutclk,
    ch2_rxusrclk,
    ch3_rxdata,
    ch3_rxdatavalid,
    ch3_rxheader,
    ch3_rxgearboxslip,
    ch3_rxlatclk,
    ch3_gtrxreset,
    ch3_rxprogdivreset,
    ch3_rxuserrdy,
    ch3_rxprogdivresetdone,
    ch3_rxpmaresetdone,
    ch3_rxresetdone,
    ch3_rx10gstat,
    ch3_rxbufstatus,
    ch3_rxbyteisaligned,
    ch3_rxbyterealign,
    ch3_rxcdrhold,
    ch3_rxcdrlock,
    ch3_rxcdrovrden,
    ch3_rxcdrphdone,
    ch3_rxcdrreset,
    ch3_rxchanbondseq,
    ch3_rxchanisaligned,
    ch3_rxchanrealign,
    ch3_rxchbondi,
    ch3_rxchbondo,
    ch3_rxclkcorcnt,
    ch3_rxcominitdet,
    ch3_rxcommadet,
    ch3_rxcomsasdet,
    ch3_rxcomwakedet,
    ch3_rxctrl0,
    ch3_rxctrl1,
    ch3_rxctrl2,
    ch3_rxctrl3,
    ch3_rxdapicodeovrden,
    ch3_rxdapicodereset,
    ch3_rxdlyalignerr,
    ch3_rxdlyalignprog,
    ch3_rxdlyalignreq,
    ch3_rxelecidle,
    ch3_rxeqtraining,
    ch3_rxfinealigndone,
    ch3_rxheadervalid,
    ch3_rxlpmen,
    ch3_rxmldchaindone,
    ch3_rxmldchainreq,
    ch3_rxmlfinealignreq,
    ch3_rxoobreset,
    ch3_rxosintdone,
    ch3_rxpcsresetmask,
    ch3_rxpd,
    ch3_rxphaligndone,
    ch3_rxphalignerr,
    ch3_rxphalignreq,
    ch3_rxphalignresetmask,
    ch3_rxphdlypd,
    ch3_rxphdlyreset,
    ch3_rxphdlyresetdone,
    ch3_rxphsetinitdone,
    ch3_rxphsetinitreq,
    ch3_rxphshift180,
    ch3_rxphshift180done,
    ch3_rxpmaresetmask,
    ch3_rxpolarity,
    ch3_rxprbscntreset,
    ch3_rxprbserr,
    ch3_rxprbslocked,
    ch3_rxprbssel,
    ch3_rxrate,
    ch3_rxresetmode,
    ch3_rxmstreset,
    ch3_rxmstdatapathreset,
    ch3_rxmstresetdone,
    ch3_rxslide,
    ch3_rxsliderdy,
    ch3_rxstartofseq,
    ch3_rxstatus,
    ch3_rxsyncallin,
    ch3_rxsyncdone,
    ch3_rxtermination,
    ch3_rxvalid,
    ch3_cdrbmcdrreq,
    ch3_cdrfreqos,
    ch3_cdrincpctrl,
    ch3_cdrstepdir,
    ch3_cdrstepsq,
    ch3_cdrstepsx,
    ch3_eyescanreset,
    ch3_eyescantrigger,
    ch3_eyescandataerror,
    ch3_refdebugout,
    ch3_rxdapiresetdone,
    ch3_rxdebugpcsout,
    ch3_rxpkdet,
    ch3_rxqpisenn,
    ch3_rxqpisenp,
    ch3_rxsimplexphystatus,
    ch3_rxslipdone,
    ch3_dfehold,
    ch3_dfeovrd,
    ch3_rxdapireset,
    ch3_rxdapiresetmask,
    ch3_rxqpien,
    ch3_rxoutclk,
    ch3_rxusrclk,
    ch0_bufgtce,
    ch0_bufgtrst,
    ch0_bufgtcemask,
    ch0_bufgtrstmask,
    ch0_bufgtdiv,
    ch0_clkrsvd0,
    ch0_clkrsvd1,
    ch0_dmonitorclk,
    ch0_phyesmadaptsave,
    ch0_iloresetmask,
    ch0_loopback,
    ch0_dmonfiforeset,
    ch0_pcsrsvdin,
    ch0_gtrsvd,
    ch0_pcsrsvdout,
    ch0_pinrsvdas,
    ch0_dmonitoroutclk,
    ch0_resetexception,
    ch0_dmonitorout,
    ch0_phyready,
    ch0_hsdppcsreset,
    ch1_bufgtce,
    ch1_bufgtrst,
    ch1_bufgtcemask,
    ch1_bufgtrstmask,
    ch1_bufgtdiv,
    ch1_clkrsvd0,
    ch1_clkrsvd1,
    ch1_dmonitorclk,
    ch1_phyesmadaptsave,
    ch1_iloresetmask,
    ch1_loopback,
    ch1_dmonfiforeset,
    ch1_pcsrsvdin,
    ch1_gtrsvd,
    ch1_pcsrsvdout,
    ch1_pinrsvdas,
    ch1_dmonitoroutclk,
    ch1_resetexception,
    ch1_dmonitorout,
    ch1_phyready,
    ch1_hsdppcsreset,
    ch2_bufgtce,
    ch2_bufgtrst,
    ch2_bufgtcemask,
    ch2_bufgtrstmask,
    ch2_bufgtdiv,
    ch2_clkrsvd0,
    ch2_clkrsvd1,
    ch2_dmonitorclk,
    ch2_phyesmadaptsave,
    ch2_iloresetmask,
    ch2_loopback,
    ch2_dmonfiforeset,
    ch2_pcsrsvdin,
    ch2_gtrsvd,
    ch2_pcsrsvdout,
    ch2_pinrsvdas,
    ch2_dmonitoroutclk,
    ch2_resetexception,
    ch2_dmonitorout,
    ch2_phyready,
    ch2_hsdppcsreset,
    ch3_bufgtce,
    ch3_bufgtrst,
    ch3_bufgtcemask,
    ch3_bufgtrstmask,
    ch3_bufgtdiv,
    ch3_clkrsvd0,
    ch3_clkrsvd1,
    ch3_dmonitorclk,
    ch3_phyesmadaptsave,
    ch3_iloresetmask,
    ch3_loopback,
    ch3_dmonfiforeset,
    ch3_pcsrsvdin,
    ch3_gtrsvd,
    ch3_pcsrsvdout,
    ch3_pinrsvdas,
    ch3_dmonitoroutclk,
    ch3_resetexception,
    ch3_dmonitorout,
    ch3_phyready,
    ch3_hsdppcsreset,
    resetdone_northin,
    resetdone_southin,
    resetdone_northout,
    resetdone_southout,
    txpinorthin,
    rxpinorthin,
    txpisouthin,
    rxpisouthin,
    pipenorthin,
    pipesouthin,
    txpinorthout,
    txpisouthout,
    rxpinorthout,
    rxpisouthout,
    pipenorthout,
    pipesouthout,
    GT_REFCLK0,
    bgbypassb,
    bgmonitorenb,
    bgpdb,
    bgrcalovrdenb,
    bgrcalovrd,
    debugtraceready,
    debugtraceclk,
    rcalenb,
    trigackout0,
    trigin0,
    ubenable,
    ubiolmbrst,
    ubmbrst,
    ubintr,
    ubrxuart,
    ctrlrsvdin,
    coestatusdebug,
    gpi,
    refclk0_clktestsig,
    refclk1_clktestsig,
    correcterr,
    debugtracetvalid,
    debugtracetdata,
    refclk0_gtrefclkpdint,
    refclk0_clktestsigint,
    refclk1_gtrefclkpdint,
    refclk1_clktestsigint,
    trigackin0,
    trigout0,
    ubinterrupt,
    ubtxuart,
    uncorrecterr,
    ctrlrsvdout,
    gpo,
    hsclk0_rxrecclksel,
    hsclk1_rxrecclksel,
    ch0_xpipe5_pipeline_en,
    ch1_xpipe5_pipeline_en,
    ch2_xpipe5_pipeline_en,
    ch3_xpipe5_pipeline_en,
    apb3clk,
    apb3paddr,
    apb3penable,
    apb3presetn,
    apb3prdata,
    apb3psel,
    apb3pslverr,
    apb3pready,
    apb3pwdata,
    apb3pwrite,
    rxp,
    rxn,
    txp,
    txn);
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginclk" *) input rxmarginclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk0_lcpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk0_lcpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk0_lcpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk0_rpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk0_rpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk0_rpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk1_lcpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk1_lcpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk1_lcpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk1_rpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk1_rpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk1_rpllreset;
  output hsclk0_lcplllock;
  output hsclk1_lcplllock;
  output hsclk0_rplllock;
  output hsclk1_rplllock;
  output gtpowergood;
  input ch0_pcierstb;
  input ch1_pcierstb;
  input ch2_pcierstb;
  input ch3_pcierstb;
  input pcielinkreachtarget;
  input [5:0]pcieltssm;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqack" *) output rxmarginreqack;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginrescmd" *) output [3:0]rxmarginrescmd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreslanenum" *) output [1:0]rxmarginreslanenum;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginrespayld" *) output [7:0]rxmarginrespayld;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginresreq" *) output rxmarginresreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqcmd" *) input [3:0]rxmarginreqcmd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqlanenum" *) input [1:0]rxmarginreqlanenum;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqpayld" *) input [7:0]rxmarginreqpayld;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqreq" *) input rxmarginreqreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginresack" *) input rxmarginresack;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch0_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch0_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch0_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch1_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch1_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch1_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch2_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch2_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch2_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch3_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch3_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch3_iloreset;
  output ch0_iloresetdone;
  output ch1_iloresetdone;
  output ch2_iloresetdone;
  output ch3_iloresetdone;
  output ch0_phystatus;
  output ch1_phystatus;
  output ch2_phystatus;
  output ch3_phystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLFBCLKLOST" *) output hsclk0_lcpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKLOST" *) output hsclk0_lcpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKMONITOR" *) output hsclk0_lcpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLFBCLKLOST" *) output hsclk0_rpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKLOST" *) output hsclk0_rpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKMONITOR" *) output hsclk0_rpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLFBCLKLOST" *) output hsclk1_lcpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKLOST" *) output hsclk1_lcpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKMONITOR" *) output hsclk1_lcpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLFBCLKLOST" *) output hsclk1_rpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKLOST" *) output hsclk1_rpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKMONITOR" *) output hsclk1_rpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLPD" *) input hsclk0_lcpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLPD" *) input hsclk0_rpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRESETBYPASSMODE" *) input hsclk0_lcpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLSDMTOGGLE" *) input hsclk0_lcpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRESETBYPASSMODE" *) input hsclk0_rpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLSDMTOGGLE" *) input hsclk0_rpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLPD" *) input hsclk1_lcpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRESETBYPASSMODE" *) input hsclk1_lcpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLSDMTOGGLE" *) input hsclk1_lcpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLPD" *) input hsclk1_rpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRESETBYPASSMODE" *) input hsclk1_rpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLSDMTOGGLE" *) input hsclk1_rpllsdmtoggle;
  input refclk0_gtrefclkpd;
  input refclk1_gtrefclkpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKSEL" *) input [2:0]hsclk0_lcpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKSEL" *) input [2:0]hsclk1_lcpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKSEL" *) input [2:0]hsclk0_rpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKSEL" *) input [2:0]hsclk1_rpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLFBDIV" *) input [7:0]hsclk0_lcpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLFBDIV" *) input [7:0]hsclk0_rpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLFBDIV" *) input [7:0]hsclk1_lcpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLFBDIV" *) input [7:0]hsclk1_rpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RXRECCLKOUT0" *) output hsclk0_rxrecclkout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RXRECCLKOUT1" *) output hsclk0_rxrecclkout1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RXRECCLKOUT0" *) output hsclk1_rxrecclkout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RXRECCLKOUT1" *) output hsclk1_rxrecclkout1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLSDMDATA" *) input [25:0]hsclk0_lcpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLSDMDATA" *) input [25:0]hsclk1_lcpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLSDMDATA" *) input [25:0]hsclk0_rpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLSDMDATA" *) input [25:0]hsclk1_rpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRESETMASK" *) input [1:0]hsclk0_lcpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRESETMASK" *) input [1:0]hsclk1_lcpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRESETMASK" *) input [1:0]hsclk0_rpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRESETMASK" *) input [1:0]hsclk1_rpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdata" *) input [127:0]ch0_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txheader" *) input [5:0]ch0_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsequence" *) input [6:0]ch0_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_gttxreset" *) input ch0_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprogdivreset" *) input ch0_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txuserrdy" *) input ch0_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch0_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcominit" *) input ch0_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomsas" *) input ch0_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomwake" *) input ch0_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapicodeovrden" *) input ch0_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapicodereset" *) input ch0_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdetectrx" *) input ch0_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txlatclk" *) input ch0_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlytstclk" *) input ch0_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignreq" *) input ch0_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txelecidle" *) input ch0_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txinhibit" *) input ch0_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmldchaindone" *) input ch0_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmldchainreq" *) input ch0_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txoneszeros" *) input ch0_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpausedelayalign" *) input ch0_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpcsresetmask" *) input ch0_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignreq" *) input ch0_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlypd" *) input ch0_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlyreset" *) input ch0_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphsetinitreq" *) input ch0_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphshift180" *) input ch0_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpicodeovrden" *) input ch0_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpicodereset" *) input ch0_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpippmen" *) input ch0_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpisopd" *) input ch0_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpolarity" *) input ch0_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprbsforceerr" *) input ch0_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txswing" *) input ch0_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsyncallin" *) input ch0_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_tx10gstat" *) output ch0_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomfinish" *) output ch0_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdccdone" *) output ch0_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignerr" *) output ch0_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignprog" *) output ch0_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphaligndone" *) output ch0_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignerr" *) output ch0_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignoutrsvd" *) output ch0_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlyresetdone" *) output ch0_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphsetinitdone" *) output ch0_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphshift180done" *) output ch0_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsyncdone" *) output ch0_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch0_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl0" *) input [15:0]ch0_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl1" *) input [15:0]ch0_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdeemph" *) input [1:0]ch0_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpd" *) input [1:0]ch0_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txresetmode" *) input [1:0]ch0_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstreset" *) input ch0_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstdatapathreset" *) input ch0_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstresetdone" *) output ch0_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmargin" *) input [2:0]ch0_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch0_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprbssel" *) input [3:0]ch0_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch0_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch0_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch0_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprecursor" *) input [4:0]ch0_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch0_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl2" *) input [7:0]ch0_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txrate" *) input [7:0]ch0_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprogdivresetdone" *) output ch0_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpmaresetdone" *) output ch0_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txresetdone" *) output ch0_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapiresetdone" *) output ch0_txdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdebugpcsout" *) output ch0_txdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txqpisenn" *) output ch0_txqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txqpisenp" *) output ch0_txqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsimplexphystatus" *) output ch0_txsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txswingouthigh" *) output ch0_txswingouthigh;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txswingoutlow" *) output ch0_txswingoutlow;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapireset" *) input ch0_txdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapiresetmask" *) input [1:0]ch0_txdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txqpibiasen" *) input ch0_txqpibiasen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txqpiweakpu" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, TX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch0_txqpiweakpu;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch0_txoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 TX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_USRCLK, FREQ_HZ 156250000, PARENT_ID undef, PHASE 0.0" *) input ch0_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdata" *) input [127:0]ch1_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txheader" *) input [5:0]ch1_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsequence" *) input [6:0]ch1_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_gttxreset" *) input ch1_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprogdivreset" *) input ch1_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txuserrdy" *) input ch1_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch1_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcominit" *) input ch1_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomsas" *) input ch1_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomwake" *) input ch1_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapicodeovrden" *) input ch1_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapicodereset" *) input ch1_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdetectrx" *) input ch1_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txlatclk" *) input ch1_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlytstclk" *) input ch1_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignreq" *) input ch1_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txelecidle" *) input ch1_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txinhibit" *) input ch1_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmldchaindone" *) input ch1_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmldchainreq" *) input ch1_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txoneszeros" *) input ch1_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpausedelayalign" *) input ch1_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpcsresetmask" *) input ch1_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignreq" *) input ch1_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlypd" *) input ch1_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlyreset" *) input ch1_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphsetinitreq" *) input ch1_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphshift180" *) input ch1_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpicodeovrden" *) input ch1_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpicodereset" *) input ch1_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpippmen" *) input ch1_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpisopd" *) input ch1_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpolarity" *) input ch1_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprbsforceerr" *) input ch1_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txswing" *) input ch1_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsyncallin" *) input ch1_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_tx10gstat" *) output ch1_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomfinish" *) output ch1_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdccdone" *) output ch1_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignerr" *) output ch1_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignprog" *) output ch1_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphaligndone" *) output ch1_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignerr" *) output ch1_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignoutrsvd" *) output ch1_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlyresetdone" *) output ch1_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphsetinitdone" *) output ch1_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphshift180done" *) output ch1_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsyncdone" *) output ch1_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch1_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl0" *) input [15:0]ch1_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl1" *) input [15:0]ch1_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdeemph" *) input [1:0]ch1_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpd" *) input [1:0]ch1_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txresetmode" *) input [1:0]ch1_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstreset" *) input ch1_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstdatapathreset" *) input ch1_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstresetdone" *) output ch1_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmargin" *) input [2:0]ch1_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch1_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprbssel" *) input [3:0]ch1_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch1_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch1_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch1_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprecursor" *) input [4:0]ch1_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch1_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl2" *) input [7:0]ch1_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txrate" *) input [7:0]ch1_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprogdivresetdone" *) output ch1_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpmaresetdone" *) output ch1_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txresetdone" *) output ch1_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapiresetdone" *) output ch1_txdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdebugpcsout" *) output ch1_txdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txqpisenn" *) output ch1_txqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txqpisenp" *) output ch1_txqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsimplexphystatus" *) output ch1_txsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txswingouthigh" *) output ch1_txswingouthigh;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txswingoutlow" *) output ch1_txswingoutlow;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapireset" *) input ch1_txdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapiresetmask" *) input [1:0]ch1_txdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txqpibiasen" *) input ch1_txqpibiasen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txqpiweakpu" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX1_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, TX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch1_txqpiweakpu;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX1_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX1_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch1_txoutclk;
  input ch1_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdata" *) input [127:0]ch2_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txheader" *) input [5:0]ch2_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsequence" *) input [6:0]ch2_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_gttxreset" *) input ch2_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprogdivreset" *) input ch2_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txuserrdy" *) input ch2_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch2_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcominit" *) input ch2_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomsas" *) input ch2_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomwake" *) input ch2_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapicodeovrden" *) input ch2_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapicodereset" *) input ch2_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdetectrx" *) input ch2_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txlatclk" *) input ch2_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlytstclk" *) input ch2_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignreq" *) input ch2_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txelecidle" *) input ch2_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txinhibit" *) input ch2_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmldchaindone" *) input ch2_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmldchainreq" *) input ch2_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txoneszeros" *) input ch2_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpausedelayalign" *) input ch2_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpcsresetmask" *) input ch2_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignreq" *) input ch2_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlypd" *) input ch2_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlyreset" *) input ch2_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphsetinitreq" *) input ch2_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphshift180" *) input ch2_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpicodeovrden" *) input ch2_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpicodereset" *) input ch2_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpippmen" *) input ch2_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpisopd" *) input ch2_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpolarity" *) input ch2_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprbsforceerr" *) input ch2_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txswing" *) input ch2_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsyncallin" *) input ch2_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_tx10gstat" *) output ch2_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomfinish" *) output ch2_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdccdone" *) output ch2_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignerr" *) output ch2_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignprog" *) output ch2_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphaligndone" *) output ch2_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignerr" *) output ch2_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignoutrsvd" *) output ch2_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlyresetdone" *) output ch2_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphsetinitdone" *) output ch2_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphshift180done" *) output ch2_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsyncdone" *) output ch2_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch2_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl0" *) input [15:0]ch2_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl1" *) input [15:0]ch2_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdeemph" *) input [1:0]ch2_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpd" *) input [1:0]ch2_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txresetmode" *) input [1:0]ch2_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstreset" *) input ch2_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstdatapathreset" *) input ch2_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstresetdone" *) output ch2_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmargin" *) input [2:0]ch2_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch2_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprbssel" *) input [3:0]ch2_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch2_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch2_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch2_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprecursor" *) input [4:0]ch2_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch2_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl2" *) input [7:0]ch2_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txrate" *) input [7:0]ch2_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprogdivresetdone" *) output ch2_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpmaresetdone" *) output ch2_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txresetdone" *) output ch2_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapiresetdone" *) output ch2_txdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdebugpcsout" *) output ch2_txdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txqpisenn" *) output ch2_txqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txqpisenp" *) output ch2_txqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsimplexphystatus" *) output ch2_txsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txswingouthigh" *) output ch2_txswingouthigh;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txswingoutlow" *) output ch2_txswingoutlow;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapireset" *) input ch2_txdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapiresetmask" *) input [1:0]ch2_txdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txqpibiasen" *) input ch2_txqpibiasen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txqpiweakpu" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX2_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, TX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch2_txqpiweakpu;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX2_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX2_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch2_txoutclk;
  input ch2_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdata" *) input [127:0]ch3_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txheader" *) input [5:0]ch3_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsequence" *) input [6:0]ch3_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_gttxreset" *) input ch3_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprogdivreset" *) input ch3_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txuserrdy" *) input ch3_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch3_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcominit" *) input ch3_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomsas" *) input ch3_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomwake" *) input ch3_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapicodeovrden" *) input ch3_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapicodereset" *) input ch3_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdetectrx" *) input ch3_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txlatclk" *) input ch3_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlytstclk" *) input ch3_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignreq" *) input ch3_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txelecidle" *) input ch3_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txinhibit" *) input ch3_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmldchaindone" *) input ch3_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmldchainreq" *) input ch3_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txoneszeros" *) input ch3_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpausedelayalign" *) input ch3_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpcsresetmask" *) input ch3_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignreq" *) input ch3_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlypd" *) input ch3_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlyreset" *) input ch3_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphsetinitreq" *) input ch3_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphshift180" *) input ch3_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpicodeovrden" *) input ch3_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpicodereset" *) input ch3_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpippmen" *) input ch3_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpisopd" *) input ch3_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpolarity" *) input ch3_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprbsforceerr" *) input ch3_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txswing" *) input ch3_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsyncallin" *) input ch3_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_tx10gstat" *) output ch3_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomfinish" *) output ch3_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdccdone" *) output ch3_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignerr" *) output ch3_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignprog" *) output ch3_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphaligndone" *) output ch3_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignerr" *) output ch3_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignoutrsvd" *) output ch3_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlyresetdone" *) output ch3_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphsetinitdone" *) output ch3_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphshift180done" *) output ch3_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsyncdone" *) output ch3_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch3_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl0" *) input [15:0]ch3_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl1" *) input [15:0]ch3_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdeemph" *) input [1:0]ch3_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpd" *) input [1:0]ch3_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txresetmode" *) input [1:0]ch3_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstreset" *) input ch3_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstdatapathreset" *) input ch3_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstresetdone" *) output ch3_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmargin" *) input [2:0]ch3_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch3_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprbssel" *) input [3:0]ch3_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch3_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch3_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch3_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprecursor" *) input [4:0]ch3_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch3_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl2" *) input [7:0]ch3_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txrate" *) input [7:0]ch3_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprogdivresetdone" *) output ch3_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpmaresetdone" *) output ch3_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txresetdone" *) output ch3_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapiresetdone" *) output ch3_txdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdebugpcsout" *) output ch3_txdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txqpisenn" *) output ch3_txqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txqpisenp" *) output ch3_txqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsimplexphystatus" *) output ch3_txsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txswingouthigh" *) output ch3_txswingouthigh;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txswingoutlow" *) output ch3_txswingoutlow;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapireset" *) input ch3_txdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapiresetmask" *) input [1:0]ch3_txdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txqpibiasen" *) input ch3_txqpibiasen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txqpiweakpu" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX3_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, TX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch3_txqpiweakpu;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX3_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX3_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch3_txoutclk;
  input ch3_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdata" *) output [127:0]ch0_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch0_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxheader" *) output [5:0]ch0_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxgearboxslip" *) input ch0_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxlatclk" *) input ch0_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_gtrxreset" *) input ch0_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprogdivreset" *) input ch0_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxuserrdy" *) input ch0_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprogdivresetdone" *) output ch0_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpmaresetdone" *) output ch0_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxresetdone" *) output ch0_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch0_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch0_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbyteisaligned" *) output ch0_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbyterealign" *) output ch0_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrhold" *) input ch0_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrlock" *) output ch0_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrovrden" *) input ch0_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrphdone" *) output ch0_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrreset" *) input ch0_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanbondseq" *) output ch0_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanisaligned" *) output ch0_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanrealign" *) output ch0_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch0_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch0_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch0_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcominitdet" *) output ch0_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcommadet" *) output ch0_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcomsasdet" *) output ch0_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcomwakedet" *) output ch0_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch0_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch0_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch0_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch0_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapicodeovrden" *) input ch0_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapicodereset" *) input ch0_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignerr" *) output ch0_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignprog" *) output ch0_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignreq" *) input ch0_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxelecidle" *) output ch0_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxeqtraining" *) input ch0_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxfinealigndone" *) output ch0_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch0_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxlpmen" *) input ch0_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmldchaindone" *) input ch0_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmldchainreq" *) input ch0_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmlfinealignreq" *) input ch0_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxoobreset" *) input ch0_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxosintdone" *) output ch0_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch0_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpd" *) input [1:0]ch0_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphaligndone" *) output ch0_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignerr" *) output ch0_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignreq" *) input ch0_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch0_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlypd" *) input ch0_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlyreset" *) input ch0_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlyresetdone" *) output ch0_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphsetinitdone" *) output ch0_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphsetinitreq" *) input ch0_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphshift180" *) input ch0_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphshift180done" *) output ch0_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch0_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpolarity" *) input ch0_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbscntreset" *) input ch0_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbserr" *) output ch0_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbslocked" *) output ch0_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch0_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxrate" *) input [7:0]ch0_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch0_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstreset" *) input ch0_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstdatapathreset" *) input ch0_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstresetdone" *) output ch0_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxslide" *) input ch0_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsliderdy" *) output ch0_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch0_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxstatus" *) output [2:0]ch0_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsyncallin" *) input ch0_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsyncdone" *) output ch0_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxtermination" *) input ch0_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxvalid" *) output ch0_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrbmcdrreq" *) input ch0_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrfreqos" *) input ch0_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrincpctrl" *) input ch0_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepdir" *) input ch0_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepsq" *) input ch0_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepsx" *) input ch0_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescanreset" *) input ch0_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescantrigger" *) input ch0_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescandataerror" *) output ch0_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_refdebugout" *) output [1:0]ch0_refdebugout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapiresetdone" *) output ch0_rxdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdebugpcsout" *) output ch0_rxdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpkdet" *) output ch0_rxpkdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxqpisenn" *) output ch0_rxqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxqpisenp" *) output ch0_rxqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsimplexphystatus" *) output ch0_rxsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxslipdone" *) output ch0_rxslipdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_dfehold" *) input ch0_dfehold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_dfeovrd" *) input ch0_dfeovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapireset" *) input ch0_rxdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapiresetmask" *) input [1:0]ch0_rxdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxqpien" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, RX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch0_rxqpien;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch0_rxoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 RX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_USRCLK, FREQ_HZ 156250000, PARENT_ID undef, PHASE 0.0" *) input ch0_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdata" *) output [127:0]ch1_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch1_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxheader" *) output [5:0]ch1_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxgearboxslip" *) input ch1_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxlatclk" *) input ch1_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_gtrxreset" *) input ch1_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprogdivreset" *) input ch1_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxuserrdy" *) input ch1_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprogdivresetdone" *) output ch1_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpmaresetdone" *) output ch1_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxresetdone" *) output ch1_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch1_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch1_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbyteisaligned" *) output ch1_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbyterealign" *) output ch1_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrhold" *) input ch1_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrlock" *) output ch1_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrovrden" *) input ch1_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrphdone" *) output ch1_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrreset" *) input ch1_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanbondseq" *) output ch1_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanisaligned" *) output ch1_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanrealign" *) output ch1_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch1_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch1_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch1_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcominitdet" *) output ch1_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcommadet" *) output ch1_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcomsasdet" *) output ch1_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcomwakedet" *) output ch1_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch1_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch1_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch1_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch1_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapicodeovrden" *) input ch1_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapicodereset" *) input ch1_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignerr" *) output ch1_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignprog" *) output ch1_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignreq" *) input ch1_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxelecidle" *) output ch1_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxeqtraining" *) input ch1_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxfinealigndone" *) output ch1_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch1_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxlpmen" *) input ch1_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmldchaindone" *) input ch1_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmldchainreq" *) input ch1_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmlfinealignreq" *) input ch1_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxoobreset" *) input ch1_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxosintdone" *) output ch1_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch1_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpd" *) input [1:0]ch1_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphaligndone" *) output ch1_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignerr" *) output ch1_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignreq" *) input ch1_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch1_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlypd" *) input ch1_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlyreset" *) input ch1_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlyresetdone" *) output ch1_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphsetinitdone" *) output ch1_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphsetinitreq" *) input ch1_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphshift180" *) input ch1_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphshift180done" *) output ch1_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch1_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpolarity" *) input ch1_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbscntreset" *) input ch1_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbserr" *) output ch1_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbslocked" *) output ch1_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch1_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxrate" *) input [7:0]ch1_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch1_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstreset" *) input ch1_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstdatapathreset" *) input ch1_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstresetdone" *) output ch1_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxslide" *) input ch1_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsliderdy" *) output ch1_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch1_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxstatus" *) output [2:0]ch1_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsyncallin" *) input ch1_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsyncdone" *) output ch1_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxtermination" *) input ch1_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxvalid" *) output ch1_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrbmcdrreq" *) input ch1_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrfreqos" *) input ch1_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrincpctrl" *) input ch1_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepdir" *) input ch1_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepsq" *) input ch1_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepsx" *) input ch1_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescanreset" *) input ch1_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescantrigger" *) input ch1_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescandataerror" *) output ch1_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_refdebugout" *) output [1:0]ch1_refdebugout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapiresetdone" *) output ch1_rxdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdebugpcsout" *) output ch1_rxdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpkdet" *) output ch1_rxpkdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxqpisenn" *) output ch1_rxqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxqpisenp" *) output ch1_rxqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsimplexphystatus" *) output ch1_rxsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxslipdone" *) output ch1_rxslipdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_dfehold" *) input ch1_dfehold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_dfeovrd" *) input ch1_dfeovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapireset" *) input ch1_rxdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapiresetmask" *) input [1:0]ch1_rxdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxqpien" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX1_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, RX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch1_rxqpien;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX1_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX1_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch1_rxoutclk;
  input ch1_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdata" *) output [127:0]ch2_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch2_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxheader" *) output [5:0]ch2_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxgearboxslip" *) input ch2_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxlatclk" *) input ch2_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_gtrxreset" *) input ch2_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprogdivreset" *) input ch2_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxuserrdy" *) input ch2_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprogdivresetdone" *) output ch2_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpmaresetdone" *) output ch2_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxresetdone" *) output ch2_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch2_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch2_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbyteisaligned" *) output ch2_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbyterealign" *) output ch2_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrhold" *) input ch2_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrlock" *) output ch2_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrovrden" *) input ch2_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrphdone" *) output ch2_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrreset" *) input ch2_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanbondseq" *) output ch2_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanisaligned" *) output ch2_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanrealign" *) output ch2_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch2_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch2_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch2_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcominitdet" *) output ch2_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcommadet" *) output ch2_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcomsasdet" *) output ch2_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcomwakedet" *) output ch2_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch2_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch2_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch2_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch2_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapicodeovrden" *) input ch2_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapicodereset" *) input ch2_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignerr" *) output ch2_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignprog" *) output ch2_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignreq" *) input ch2_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxelecidle" *) output ch2_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxeqtraining" *) input ch2_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxfinealigndone" *) output ch2_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch2_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxlpmen" *) input ch2_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmldchaindone" *) input ch2_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmldchainreq" *) input ch2_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmlfinealignreq" *) input ch2_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxoobreset" *) input ch2_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxosintdone" *) output ch2_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch2_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpd" *) input [1:0]ch2_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphaligndone" *) output ch2_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignerr" *) output ch2_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignreq" *) input ch2_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch2_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlypd" *) input ch2_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlyreset" *) input ch2_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlyresetdone" *) output ch2_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphsetinitdone" *) output ch2_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphsetinitreq" *) input ch2_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphshift180" *) input ch2_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphshift180done" *) output ch2_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch2_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpolarity" *) input ch2_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbscntreset" *) input ch2_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbserr" *) output ch2_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbslocked" *) output ch2_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch2_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxrate" *) input [7:0]ch2_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch2_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstreset" *) input ch2_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstdatapathreset" *) input ch2_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstresetdone" *) output ch2_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxslide" *) input ch2_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsliderdy" *) output ch2_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch2_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxstatus" *) output [2:0]ch2_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsyncallin" *) input ch2_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsyncdone" *) output ch2_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxtermination" *) input ch2_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxvalid" *) output ch2_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrbmcdrreq" *) input ch2_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrfreqos" *) input ch2_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrincpctrl" *) input ch2_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepdir" *) input ch2_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepsq" *) input ch2_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepsx" *) input ch2_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescanreset" *) input ch2_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescantrigger" *) input ch2_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescandataerror" *) output ch2_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_refdebugout" *) output [1:0]ch2_refdebugout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapiresetdone" *) output ch2_rxdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdebugpcsout" *) output ch2_rxdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpkdet" *) output ch2_rxpkdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxqpisenn" *) output ch2_rxqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxqpisenp" *) output ch2_rxqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsimplexphystatus" *) output ch2_rxsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxslipdone" *) output ch2_rxslipdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_dfehold" *) input ch2_dfehold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_dfeovrd" *) input ch2_dfeovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapireset" *) input ch2_rxdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapiresetmask" *) input [1:0]ch2_rxdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxqpien" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX2_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, RX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch2_rxqpien;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX2_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX2_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch2_rxoutclk;
  input ch2_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdata" *) output [127:0]ch3_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch3_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxheader" *) output [5:0]ch3_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxgearboxslip" *) input ch3_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxlatclk" *) input ch3_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_gtrxreset" *) input ch3_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprogdivreset" *) input ch3_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxuserrdy" *) input ch3_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprogdivresetdone" *) output ch3_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpmaresetdone" *) output ch3_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxresetdone" *) output ch3_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch3_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch3_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbyteisaligned" *) output ch3_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbyterealign" *) output ch3_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrhold" *) input ch3_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrlock" *) output ch3_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrovrden" *) input ch3_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrphdone" *) output ch3_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrreset" *) input ch3_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanbondseq" *) output ch3_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanisaligned" *) output ch3_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanrealign" *) output ch3_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch3_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch3_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch3_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcominitdet" *) output ch3_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcommadet" *) output ch3_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcomsasdet" *) output ch3_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcomwakedet" *) output ch3_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch3_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch3_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch3_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch3_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapicodeovrden" *) input ch3_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapicodereset" *) input ch3_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignerr" *) output ch3_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignprog" *) output ch3_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignreq" *) input ch3_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxelecidle" *) output ch3_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxeqtraining" *) input ch3_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxfinealigndone" *) output ch3_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch3_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxlpmen" *) input ch3_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmldchaindone" *) input ch3_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmldchainreq" *) input ch3_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmlfinealignreq" *) input ch3_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxoobreset" *) input ch3_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxosintdone" *) output ch3_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch3_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpd" *) input [1:0]ch3_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphaligndone" *) output ch3_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignerr" *) output ch3_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignreq" *) input ch3_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch3_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlypd" *) input ch3_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlyreset" *) input ch3_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlyresetdone" *) output ch3_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphsetinitdone" *) output ch3_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphsetinitreq" *) input ch3_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphshift180" *) input ch3_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphshift180done" *) output ch3_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch3_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpolarity" *) input ch3_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbscntreset" *) input ch3_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbserr" *) output ch3_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbslocked" *) output ch3_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch3_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxrate" *) input [7:0]ch3_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch3_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstreset" *) input ch3_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstdatapathreset" *) input ch3_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstresetdone" *) output ch3_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxslide" *) input ch3_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsliderdy" *) output ch3_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch3_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxstatus" *) output [2:0]ch3_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsyncallin" *) input ch3_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsyncdone" *) output ch3_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxtermination" *) input ch3_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxvalid" *) output ch3_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrbmcdrreq" *) input ch3_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrfreqos" *) input ch3_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrincpctrl" *) input ch3_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepdir" *) input ch3_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepsq" *) input ch3_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepsx" *) input ch3_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescanreset" *) input ch3_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescantrigger" *) input ch3_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescandataerror" *) output ch3_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_refdebugout" *) output [1:0]ch3_refdebugout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapiresetdone" *) output ch3_rxdapiresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdebugpcsout" *) output ch3_rxdebugpcsout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpkdet" *) output ch3_rxpkdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxqpisenn" *) output ch3_rxqpisenn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxqpisenp" *) output ch3_rxqpisenp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsimplexphystatus" *) output ch3_rxsimplexphystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxslipdone" *) output ch3_rxslipdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_dfehold" *) input ch3_dfehold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_dfeovrd" *) input ch3_dfeovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapireset" *) input ch3_rxdapireset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapiresetmask" *) input [1:0]ch3_rxdapiresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxqpien" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX3_GT_IP_Interface, PARENT_ID undef, CHNL_NUMBER undef, MASTERCLK_SRC undef, GT_DIRECTION undef, RX_SETTINGS undef, ADDITIONAL_QUAD_SETTINGS undef, ADDITIONAL_CONFIG_FILE undef, ADDITIONAL_CONFIG_ENABLE undef" *) input ch3_rxqpien;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX3_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX3_OUTCLK, FREQ_HZ 156250000, IS_MASTER false, PARENT_ID undef, PHASE 0.0" *) output ch3_rxoutclk;
  input ch3_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtce" *) output ch0_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtrst" *) output ch0_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtcemask" *) output [3:0]ch0_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtrstmask" *) output [3:0]ch0_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtdiv" *) output [11:0]ch0_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_clkrsvd0" *) input ch0_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_clkrsvd1" *) input ch0_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitorclk" *) input ch0_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_phyesmadaptsave" *) input ch0_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_iloresetmask" *) input ch0_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_loopback" *) input [2:0]ch0_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonfiforeset" *) input ch0_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pcsrsvdin" *) input [15:0]ch0_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_gtrsvd" *) input [15:0]ch0_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pcsrsvdout" *) output [15:0]ch0_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pinrsvdas" *) output [15:0]ch0_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitoroutclk" *) output ch0_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_resetexception" *) output ch0_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitorout" *) output [31:0]ch0_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_phyready" *) output ch0_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_hsdppcsreset" *) input ch0_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtce" *) output ch1_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtrst" *) output ch1_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtcemask" *) output [3:0]ch1_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtrstmask" *) output [3:0]ch1_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtdiv" *) output [11:0]ch1_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_clkrsvd0" *) input ch1_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_clkrsvd1" *) input ch1_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitorclk" *) input ch1_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_phyesmadaptsave" *) input ch1_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_iloresetmask" *) input ch1_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_loopback" *) input [2:0]ch1_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonfiforeset" *) input ch1_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pcsrsvdin" *) input [15:0]ch1_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_gtrsvd" *) input [15:0]ch1_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pcsrsvdout" *) output [15:0]ch1_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pinrsvdas" *) output [15:0]ch1_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitoroutclk" *) output ch1_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_resetexception" *) output ch1_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitorout" *) output [31:0]ch1_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_phyready" *) output ch1_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_hsdppcsreset" *) input ch1_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtce" *) output ch2_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtrst" *) output ch2_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtcemask" *) output [3:0]ch2_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtrstmask" *) output [3:0]ch2_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtdiv" *) output [11:0]ch2_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_clkrsvd0" *) input ch2_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_clkrsvd1" *) input ch2_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitorclk" *) input ch2_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_phyesmadaptsave" *) input ch2_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_iloresetmask" *) input ch2_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_loopback" *) input [2:0]ch2_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonfiforeset" *) input ch2_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pcsrsvdin" *) input [15:0]ch2_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_gtrsvd" *) input [15:0]ch2_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pcsrsvdout" *) output [15:0]ch2_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pinrsvdas" *) output [15:0]ch2_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitoroutclk" *) output ch2_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_resetexception" *) output ch2_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitorout" *) output [31:0]ch2_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_phyready" *) output ch2_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_hsdppcsreset" *) input ch2_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtce" *) output ch3_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtrst" *) output ch3_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtcemask" *) output [3:0]ch3_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtrstmask" *) output [3:0]ch3_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtdiv" *) output [11:0]ch3_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_clkrsvd0" *) input ch3_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_clkrsvd1" *) input ch3_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitorclk" *) input ch3_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_phyesmadaptsave" *) input ch3_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_iloresetmask" *) input ch3_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_loopback" *) input [2:0]ch3_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonfiforeset" *) input ch3_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pcsrsvdin" *) input [15:0]ch3_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_gtrsvd" *) input [15:0]ch3_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pcsrsvdout" *) output [15:0]ch3_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pinrsvdas" *) output [15:0]ch3_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitoroutclk" *) output ch3_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_resetexception" *) output ch3_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitorout" *) output [31:0]ch3_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_phyready" *) output ch3_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_hsdppcsreset" *) input ch3_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RESETDONE_NORTHIN" *) input [1:0]resetdone_northin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RESETDONE_SOUTHOUT" *) input [1:0]resetdone_southin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RESETDONE_NORTHIN" *) output [1:0]resetdone_northout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RESETDONE_SOUTHOUT" *) output [1:0]resetdone_southout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT TXPINORTHIN" *) input [3:0]txpinorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RXPINORTHIN" *) input [3:0]rxpinorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN TXPISOUTHOUT" *) input [3:0]txpisouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RXPISOUTHOUT" *) input [3:0]rxpisouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT PIPENORTHIN" *) input [5:0]pipenorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN PIPESOUTHOUT" *) input [5:0]pipesouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN txpinorthin" *) output [3:0]txpinorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT TXPISOUTHOUT" *) output [3:0]txpisouthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RXPINORTHIN" *) output [3:0]rxpinorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RXPISOUTHOUT" *) output [3:0]rxpisouthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN PIPENORTHIN" *) output [5:0]pipenorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT PIPESOUTHOUT" *) output [5:0]pipesouthout;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 GT_REFCLK0 CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_REFCLK0, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, INSERT_VIP 0" *) input GT_REFCLK0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgbypassb" *) input bgbypassb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgmonitorenb" *) input bgmonitorenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgpdb" *) input bgpdb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgrcalovrdenb" *) input bgrcalovrdenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgrcalovrd" *) input [4:0]bgrcalovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtraceready" *) input debugtraceready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtraceclk" *) input debugtraceclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG rcalenb" *) input rcalenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigackout0" *) input trigackout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigin0" *) input trigin0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubenable" *) input ubenable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubiolmbrst" *) input ubiolmbrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubmbrst" *) input ubmbrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubintr" *) input [11:0]ubintr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubrxuart" *) input ubrxuart;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ctrlrsvdin0" *) input [7:0]ctrlrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG coestatusdebug" *) input coestatusdebug;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG gpi" *) input [31:0]gpi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_clktestsig" *) input refclk0_clktestsig;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_clktestsig" *) input refclk1_clktestsig;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG correcterr" *) output correcterr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtracetvalid" *) output debugtracetvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtracedata" *) output [15:0]debugtracetdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_gtrefclkpdint" *) output refclk0_gtrefclkpdint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_clktestsigint" *) output refclk0_clktestsigint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_gtrefclkpdint" *) output refclk1_gtrefclkpdint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_clktestsigint" *) output refclk1_clktestsigint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigackin0" *) output trigackin0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigout0" *) output trigout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubinterrupt" *) output ubinterrupt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubtxuart" *) output ubtxuart;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG uncorrecterr" *) output uncorrecterr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ctrlrsvdout" *) output [7:0]ctrlrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG gpo" *) output [31:0]gpo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG hsclk0_rxrecclksel" *) output [1:0]hsclk0_rxrecclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG hsclk1_rxrecclksel" *) output [1:0]hsclk1_rxrecclksel;
  output ch0_xpipe5_pipeline_en;
  output ch1_xpipe5_pipeline_en;
  output ch2_xpipe5_pipeline_en;
  output ch3_xpipe5_pipeline_en;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 apb3clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME apb3clk, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, INSERT_VIP 0" *) input apb3clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PADDR" *) input [15:0]apb3paddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PENABLE" *) input apb3penable;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 apb3presetn RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME apb3presetn, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input apb3presetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PRDATA" *) output [31:0]apb3prdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PSEL" *) input apb3psel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PSLVERR" *) output apb3pslverr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PREADY" *) output apb3pready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PWDATA" *) input [31:0]apb3pwdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PWRITE" *) input apb3pwrite;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GRX_P" *) input [3:0]rxp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GRX_N" *) input [3:0]rxn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GTX_P" *) output [3:0]txp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GTX_N" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_Serial, CAN_DEBUG false" *) output [3:0]txn;

  wire \<const0> ;
  wire GT_REFCLK0;
  wire apb3clk;
  wire ch0_cdrbmcdrreq;
  wire ch0_cdrfreqos;
  wire ch0_cdrincpctrl;
  wire ch0_cdrstepdir;
  wire ch0_cdrstepsq;
  wire ch0_cdrstepsx;
  wire ch0_dfehold;
  wire ch0_dfeovrd;
  wire ch0_eyescandataerror;
  wire ch0_eyescanreset;
  wire ch0_eyescantrigger;
  wire ch0_gtrxreset;
  wire ch0_gttxreset;
  wire [2:0]ch0_loopback;
  wire [1:0]ch0_refdebugout;
  wire [7:0]ch0_rx10gstat;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxbyterealign;
  wire ch0_rxcdrhold;
  wire ch0_rxcdrlock;
  wire ch0_rxcdrovrden;
  wire ch0_rxcdrphdone;
  wire ch0_rxcdrreset;
  wire ch0_rxchanbondseq;
  wire ch0_rxchanisaligned;
  wire ch0_rxchanrealign;
  wire [4:0]ch0_rxchbondi;
  wire [4:0]ch0_rxchbondo;
  wire [1:0]ch0_rxclkcorcnt;
  wire ch0_rxcominitdet;
  wire ch0_rxcommadet;
  wire ch0_rxcomsasdet;
  wire ch0_rxcomwakedet;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl2;
  wire [7:0]ch0_rxctrl3;
  wire ch0_rxdapicodeovrden;
  wire ch0_rxdapicodereset;
  wire ch0_rxdapireset;
  wire ch0_rxdapiresetdone;
  wire [1:0]ch0_rxdapiresetmask;
  wire [127:0]ch0_rxdata;
  wire [1:0]ch0_rxdatavalid;
  wire ch0_rxdebugpcsout;
  wire ch0_rxdlyalignerr;
  wire ch0_rxdlyalignprog;
  wire ch0_rxdlyalignreq;
  wire ch0_rxelecidle;
  wire ch0_rxeqtraining;
  wire ch0_rxfinealigndone;
  wire ch0_rxgearboxslip;
  wire [5:0]ch0_rxheader;
  wire [1:0]ch0_rxheadervalid;
  wire ch0_rxlatclk;
  wire ch0_rxlpmen;
  wire ch0_rxmldchaindone;
  wire ch0_rxmldchainreq;
  wire ch0_rxmlfinealignreq;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire ch0_rxmstresetdone;
  wire ch0_rxoobreset;
  wire ch0_rxosintdone;
  wire ch0_rxoutclk;
  wire [4:0]ch0_rxpcsresetmask;
  wire [1:0]ch0_rxpd;
  wire ch0_rxphaligndone;
  wire ch0_rxphalignerr;
  wire ch0_rxphalignreq;
  wire [1:0]ch0_rxphalignresetmask;
  wire ch0_rxphdlypd;
  wire ch0_rxphdlyreset;
  wire ch0_rxphdlyresetdone;
  wire ch0_rxphsetinitdone;
  wire ch0_rxphsetinitreq;
  wire ch0_rxphshift180;
  wire ch0_rxphshift180done;
  wire ch0_rxpkdet;
  wire ch0_rxpmaresetdone;
  wire [6:0]ch0_rxpmaresetmask;
  wire ch0_rxpolarity;
  wire ch0_rxprbscntreset;
  wire ch0_rxprbserr;
  wire ch0_rxprbslocked;
  wire [3:0]ch0_rxprbssel;
  wire ch0_rxprogdivreset;
  wire ch0_rxprogdivresetdone;
  wire ch0_rxqpien;
  wire ch0_rxqpisenn;
  wire ch0_rxqpisenp;
  wire [7:0]ch0_rxrate;
  wire ch0_rxresetdone;
  wire [1:0]ch0_rxresetmode;
  wire ch0_rxsimplexphystatus;
  wire ch0_rxslide;
  wire ch0_rxsliderdy;
  wire ch0_rxslipdone;
  wire [1:0]ch0_rxstartofseq;
  wire [2:0]ch0_rxstatus;
  wire ch0_rxsyncallin;
  wire ch0_rxsyncdone;
  wire ch0_rxtermination;
  wire ch0_rxuserrdy;
  wire ch0_rxusrclk;
  wire ch0_rxvalid;
  wire ch0_tx10gstat;
  wire [1:0]ch0_txbufstatus;
  wire ch0_txcomfinish;
  wire ch0_txcominit;
  wire ch0_txcomsas;
  wire ch0_txcomwake;
  wire [15:0]ch0_txctrl0;
  wire [15:0]ch0_txctrl1;
  wire [7:0]ch0_txctrl2;
  wire ch0_txdapicodeovrden;
  wire ch0_txdapicodereset;
  wire ch0_txdapireset;
  wire ch0_txdapiresetdone;
  wire [1:0]ch0_txdapiresetmask;
  wire [127:0]ch0_txdata;
  wire ch0_txdccdone;
  wire ch0_txdebugpcsout;
  wire [1:0]ch0_txdeemph;
  wire ch0_txdetectrx;
  wire [4:0]ch0_txdiffctrl;
  wire ch0_txdlyalignerr;
  wire ch0_txdlyalignprog;
  wire ch0_txdlyalignreq;
  wire ch0_txelecidle;
  wire [5:0]ch0_txheader;
  wire ch0_txinhibit;
  wire ch0_txlatclk;
  wire [6:0]ch0_txmaincursor;
  wire [2:0]ch0_txmargin;
  wire ch0_txmldchaindone;
  wire ch0_txmldchainreq;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire ch0_txmstresetdone;
  wire ch0_txoneszeros;
  wire ch0_txoutclk;
  wire ch0_txpausedelayalign;
  wire ch0_txpcsresetmask;
  wire [1:0]ch0_txpd;
  wire ch0_txphaligndone;
  wire ch0_txphalignerr;
  wire ch0_txphalignoutrsvd;
  wire ch0_txphalignreq;
  wire [1:0]ch0_txphalignresetmask;
  wire ch0_txphdlypd;
  wire ch0_txphdlyreset;
  wire ch0_txphdlyresetdone;
  wire ch0_txphdlytstclk;
  wire ch0_txphsetinitdone;
  wire ch0_txphsetinitreq;
  wire ch0_txphshift180;
  wire ch0_txphshift180done;
  wire ch0_txpicodeovrden;
  wire ch0_txpicodereset;
  wire ch0_txpippmen;
  wire [4:0]ch0_txpippmstepsize;
  wire ch0_txpisopd;
  wire ch0_txpmaresetdone;
  wire [2:0]ch0_txpmaresetmask;
  wire ch0_txpolarity;
  wire [4:0]ch0_txpostcursor;
  wire ch0_txprbsforceerr;
  wire [3:0]ch0_txprbssel;
  wire [4:0]ch0_txprecursor;
  wire ch0_txprogdivreset;
  wire ch0_txprogdivresetdone;
  wire ch0_txqpibiasen;
  wire ch0_txqpisenn;
  wire ch0_txqpisenp;
  wire ch0_txqpiweakpu;
  wire [7:0]ch0_txrate;
  wire ch0_txresetdone;
  wire [1:0]ch0_txresetmode;
  wire [6:0]ch0_txsequence;
  wire ch0_txswing;
  wire ch0_txswingouthigh;
  wire ch0_txswingoutlow;
  wire ch0_txsyncallin;
  wire ch0_txsyncdone;
  wire ch0_txuserrdy;
  wire ch0_txusrclk;
  wire [31:0]gpi;
  wire [31:0]gpo;
  wire gtpowergood;
  wire hsclk0_lcplllock;
  wire [3:0]rxn;
  wire [3:0]rxp;
  wire [3:0]txn;
  wire [3:0]txp;
  wire NLW_inst_apb3pready_UNCONNECTED;
  wire NLW_inst_apb3pslverr_UNCONNECTED;
  wire NLW_inst_ch0_bufgtce_UNCONNECTED;
  wire NLW_inst_ch0_bufgtrst_UNCONNECTED;
  wire NLW_inst_ch0_dmonitoroutclk_UNCONNECTED;
  wire NLW_inst_ch0_iloresetdone_UNCONNECTED;
  wire NLW_inst_ch0_phyready_UNCONNECTED;
  wire NLW_inst_ch0_phystatus_UNCONNECTED;
  wire NLW_inst_ch0_resetexception_UNCONNECTED;
  wire NLW_inst_ch0_txsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch0_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_inst_ch1_bufgtce_UNCONNECTED;
  wire NLW_inst_ch1_bufgtrst_UNCONNECTED;
  wire NLW_inst_ch1_dmonitoroutclk_UNCONNECTED;
  wire NLW_inst_ch1_eyescandataerror_UNCONNECTED;
  wire NLW_inst_ch1_iloresetdone_UNCONNECTED;
  wire NLW_inst_ch1_phyready_UNCONNECTED;
  wire NLW_inst_ch1_phystatus_UNCONNECTED;
  wire NLW_inst_ch1_resetexception_UNCONNECTED;
  wire NLW_inst_ch1_rxbyteisaligned_UNCONNECTED;
  wire NLW_inst_ch1_rxbyterealign_UNCONNECTED;
  wire NLW_inst_ch1_rxcdrlock_UNCONNECTED;
  wire NLW_inst_ch1_rxcdrphdone_UNCONNECTED;
  wire NLW_inst_ch1_rxchanbondseq_UNCONNECTED;
  wire NLW_inst_ch1_rxchanisaligned_UNCONNECTED;
  wire NLW_inst_ch1_rxchanrealign_UNCONNECTED;
  wire NLW_inst_ch1_rxcominitdet_UNCONNECTED;
  wire NLW_inst_ch1_rxcommadet_UNCONNECTED;
  wire NLW_inst_ch1_rxcomsasdet_UNCONNECTED;
  wire NLW_inst_ch1_rxcomwakedet_UNCONNECTED;
  wire NLW_inst_ch1_rxdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch1_rxdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch1_rxdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch1_rxelecidle_UNCONNECTED;
  wire NLW_inst_ch1_rxfinealigndone_UNCONNECTED;
  wire NLW_inst_ch1_rxmstresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxosintdone_UNCONNECTED;
  wire NLW_inst_ch1_rxoutclk_UNCONNECTED;
  wire NLW_inst_ch1_rxphaligndone_UNCONNECTED;
  wire NLW_inst_ch1_rxphalignerr_UNCONNECTED;
  wire NLW_inst_ch1_rxphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch1_rxphshift180done_UNCONNECTED;
  wire NLW_inst_ch1_rxpkdet_UNCONNECTED;
  wire NLW_inst_ch1_rxpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxprbserr_UNCONNECTED;
  wire NLW_inst_ch1_rxprbslocked_UNCONNECTED;
  wire NLW_inst_ch1_rxprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxqpisenn_UNCONNECTED;
  wire NLW_inst_ch1_rxqpisenp_UNCONNECTED;
  wire NLW_inst_ch1_rxresetdone_UNCONNECTED;
  wire NLW_inst_ch1_rxsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch1_rxsliderdy_UNCONNECTED;
  wire NLW_inst_ch1_rxslipdone_UNCONNECTED;
  wire NLW_inst_ch1_rxsyncdone_UNCONNECTED;
  wire NLW_inst_ch1_rxvalid_UNCONNECTED;
  wire NLW_inst_ch1_tx10gstat_UNCONNECTED;
  wire NLW_inst_ch1_txcomfinish_UNCONNECTED;
  wire NLW_inst_ch1_txdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txdccdone_UNCONNECTED;
  wire NLW_inst_ch1_txdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch1_txdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch1_txdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch1_txmstresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txoutclk_UNCONNECTED;
  wire NLW_inst_ch1_txphaligndone_UNCONNECTED;
  wire NLW_inst_ch1_txphalignerr_UNCONNECTED;
  wire NLW_inst_ch1_txphalignoutrsvd_UNCONNECTED;
  wire NLW_inst_ch1_txphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch1_txphshift180done_UNCONNECTED;
  wire NLW_inst_ch1_txpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txqpisenn_UNCONNECTED;
  wire NLW_inst_ch1_txqpisenp_UNCONNECTED;
  wire NLW_inst_ch1_txresetdone_UNCONNECTED;
  wire NLW_inst_ch1_txsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch1_txswingouthigh_UNCONNECTED;
  wire NLW_inst_ch1_txswingoutlow_UNCONNECTED;
  wire NLW_inst_ch1_txsyncdone_UNCONNECTED;
  wire NLW_inst_ch1_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_inst_ch2_bufgtce_UNCONNECTED;
  wire NLW_inst_ch2_bufgtrst_UNCONNECTED;
  wire NLW_inst_ch2_dmonitoroutclk_UNCONNECTED;
  wire NLW_inst_ch2_eyescandataerror_UNCONNECTED;
  wire NLW_inst_ch2_iloresetdone_UNCONNECTED;
  wire NLW_inst_ch2_phyready_UNCONNECTED;
  wire NLW_inst_ch2_phystatus_UNCONNECTED;
  wire NLW_inst_ch2_resetexception_UNCONNECTED;
  wire NLW_inst_ch2_rxbyteisaligned_UNCONNECTED;
  wire NLW_inst_ch2_rxbyterealign_UNCONNECTED;
  wire NLW_inst_ch2_rxcdrlock_UNCONNECTED;
  wire NLW_inst_ch2_rxcdrphdone_UNCONNECTED;
  wire NLW_inst_ch2_rxchanbondseq_UNCONNECTED;
  wire NLW_inst_ch2_rxchanisaligned_UNCONNECTED;
  wire NLW_inst_ch2_rxchanrealign_UNCONNECTED;
  wire NLW_inst_ch2_rxcominitdet_UNCONNECTED;
  wire NLW_inst_ch2_rxcommadet_UNCONNECTED;
  wire NLW_inst_ch2_rxcomsasdet_UNCONNECTED;
  wire NLW_inst_ch2_rxcomwakedet_UNCONNECTED;
  wire NLW_inst_ch2_rxdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch2_rxdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch2_rxdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch2_rxelecidle_UNCONNECTED;
  wire NLW_inst_ch2_rxfinealigndone_UNCONNECTED;
  wire NLW_inst_ch2_rxmstresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxosintdone_UNCONNECTED;
  wire NLW_inst_ch2_rxoutclk_UNCONNECTED;
  wire NLW_inst_ch2_rxphaligndone_UNCONNECTED;
  wire NLW_inst_ch2_rxphalignerr_UNCONNECTED;
  wire NLW_inst_ch2_rxphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch2_rxphshift180done_UNCONNECTED;
  wire NLW_inst_ch2_rxpkdet_UNCONNECTED;
  wire NLW_inst_ch2_rxpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxprbserr_UNCONNECTED;
  wire NLW_inst_ch2_rxprbslocked_UNCONNECTED;
  wire NLW_inst_ch2_rxprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxqpisenn_UNCONNECTED;
  wire NLW_inst_ch2_rxqpisenp_UNCONNECTED;
  wire NLW_inst_ch2_rxresetdone_UNCONNECTED;
  wire NLW_inst_ch2_rxsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch2_rxsliderdy_UNCONNECTED;
  wire NLW_inst_ch2_rxslipdone_UNCONNECTED;
  wire NLW_inst_ch2_rxsyncdone_UNCONNECTED;
  wire NLW_inst_ch2_rxvalid_UNCONNECTED;
  wire NLW_inst_ch2_tx10gstat_UNCONNECTED;
  wire NLW_inst_ch2_txcomfinish_UNCONNECTED;
  wire NLW_inst_ch2_txdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txdccdone_UNCONNECTED;
  wire NLW_inst_ch2_txdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch2_txdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch2_txdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch2_txmstresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txoutclk_UNCONNECTED;
  wire NLW_inst_ch2_txphaligndone_UNCONNECTED;
  wire NLW_inst_ch2_txphalignerr_UNCONNECTED;
  wire NLW_inst_ch2_txphalignoutrsvd_UNCONNECTED;
  wire NLW_inst_ch2_txphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch2_txphshift180done_UNCONNECTED;
  wire NLW_inst_ch2_txpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txqpisenn_UNCONNECTED;
  wire NLW_inst_ch2_txqpisenp_UNCONNECTED;
  wire NLW_inst_ch2_txresetdone_UNCONNECTED;
  wire NLW_inst_ch2_txsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch2_txswingouthigh_UNCONNECTED;
  wire NLW_inst_ch2_txswingoutlow_UNCONNECTED;
  wire NLW_inst_ch2_txsyncdone_UNCONNECTED;
  wire NLW_inst_ch2_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_inst_ch3_bufgtce_UNCONNECTED;
  wire NLW_inst_ch3_bufgtrst_UNCONNECTED;
  wire NLW_inst_ch3_dmonitoroutclk_UNCONNECTED;
  wire NLW_inst_ch3_eyescandataerror_UNCONNECTED;
  wire NLW_inst_ch3_iloresetdone_UNCONNECTED;
  wire NLW_inst_ch3_phyready_UNCONNECTED;
  wire NLW_inst_ch3_phystatus_UNCONNECTED;
  wire NLW_inst_ch3_resetexception_UNCONNECTED;
  wire NLW_inst_ch3_rxbyteisaligned_UNCONNECTED;
  wire NLW_inst_ch3_rxbyterealign_UNCONNECTED;
  wire NLW_inst_ch3_rxcdrlock_UNCONNECTED;
  wire NLW_inst_ch3_rxcdrphdone_UNCONNECTED;
  wire NLW_inst_ch3_rxchanbondseq_UNCONNECTED;
  wire NLW_inst_ch3_rxchanisaligned_UNCONNECTED;
  wire NLW_inst_ch3_rxchanrealign_UNCONNECTED;
  wire NLW_inst_ch3_rxcominitdet_UNCONNECTED;
  wire NLW_inst_ch3_rxcommadet_UNCONNECTED;
  wire NLW_inst_ch3_rxcomsasdet_UNCONNECTED;
  wire NLW_inst_ch3_rxcomwakedet_UNCONNECTED;
  wire NLW_inst_ch3_rxdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch3_rxdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch3_rxdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch3_rxelecidle_UNCONNECTED;
  wire NLW_inst_ch3_rxfinealigndone_UNCONNECTED;
  wire NLW_inst_ch3_rxmstresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxosintdone_UNCONNECTED;
  wire NLW_inst_ch3_rxoutclk_UNCONNECTED;
  wire NLW_inst_ch3_rxphaligndone_UNCONNECTED;
  wire NLW_inst_ch3_rxphalignerr_UNCONNECTED;
  wire NLW_inst_ch3_rxphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch3_rxphshift180done_UNCONNECTED;
  wire NLW_inst_ch3_rxpkdet_UNCONNECTED;
  wire NLW_inst_ch3_rxpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxprbserr_UNCONNECTED;
  wire NLW_inst_ch3_rxprbslocked_UNCONNECTED;
  wire NLW_inst_ch3_rxprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxqpisenn_UNCONNECTED;
  wire NLW_inst_ch3_rxqpisenp_UNCONNECTED;
  wire NLW_inst_ch3_rxresetdone_UNCONNECTED;
  wire NLW_inst_ch3_rxsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch3_rxsliderdy_UNCONNECTED;
  wire NLW_inst_ch3_rxslipdone_UNCONNECTED;
  wire NLW_inst_ch3_rxsyncdone_UNCONNECTED;
  wire NLW_inst_ch3_rxvalid_UNCONNECTED;
  wire NLW_inst_ch3_tx10gstat_UNCONNECTED;
  wire NLW_inst_ch3_txcomfinish_UNCONNECTED;
  wire NLW_inst_ch3_txdapiresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txdccdone_UNCONNECTED;
  wire NLW_inst_ch3_txdebugpcsout_UNCONNECTED;
  wire NLW_inst_ch3_txdlyalignerr_UNCONNECTED;
  wire NLW_inst_ch3_txdlyalignprog_UNCONNECTED;
  wire NLW_inst_ch3_txmstresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txoutclk_UNCONNECTED;
  wire NLW_inst_ch3_txphaligndone_UNCONNECTED;
  wire NLW_inst_ch3_txphalignerr_UNCONNECTED;
  wire NLW_inst_ch3_txphalignoutrsvd_UNCONNECTED;
  wire NLW_inst_ch3_txphdlyresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txphsetinitdone_UNCONNECTED;
  wire NLW_inst_ch3_txphshift180done_UNCONNECTED;
  wire NLW_inst_ch3_txpmaresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txprogdivresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txqpisenn_UNCONNECTED;
  wire NLW_inst_ch3_txqpisenp_UNCONNECTED;
  wire NLW_inst_ch3_txresetdone_UNCONNECTED;
  wire NLW_inst_ch3_txsimplexphystatus_UNCONNECTED;
  wire NLW_inst_ch3_txswingouthigh_UNCONNECTED;
  wire NLW_inst_ch3_txswingoutlow_UNCONNECTED;
  wire NLW_inst_ch3_txsyncdone_UNCONNECTED;
  wire NLW_inst_ch3_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_inst_correcterr_UNCONNECTED;
  wire NLW_inst_debugtracetvalid_UNCONNECTED;
  wire NLW_inst_hsclk0_lcpllfbclklost_UNCONNECTED;
  wire NLW_inst_hsclk0_lcpllrefclklost_UNCONNECTED;
  wire NLW_inst_hsclk0_lcpllrefclkmonitor_UNCONNECTED;
  wire NLW_inst_hsclk0_rpllfbclklost_UNCONNECTED;
  wire NLW_inst_hsclk0_rplllock_UNCONNECTED;
  wire NLW_inst_hsclk0_rpllrefclklost_UNCONNECTED;
  wire NLW_inst_hsclk0_rpllrefclkmonitor_UNCONNECTED;
  wire NLW_inst_hsclk0_rxrecclkout0_UNCONNECTED;
  wire NLW_inst_hsclk0_rxrecclkout1_UNCONNECTED;
  wire NLW_inst_hsclk1_lcpllfbclklost_UNCONNECTED;
  wire NLW_inst_hsclk1_lcplllock_UNCONNECTED;
  wire NLW_inst_hsclk1_lcpllrefclklost_UNCONNECTED;
  wire NLW_inst_hsclk1_lcpllrefclkmonitor_UNCONNECTED;
  wire NLW_inst_hsclk1_rpllfbclklost_UNCONNECTED;
  wire NLW_inst_hsclk1_rplllock_UNCONNECTED;
  wire NLW_inst_hsclk1_rpllrefclklost_UNCONNECTED;
  wire NLW_inst_hsclk1_rpllrefclkmonitor_UNCONNECTED;
  wire NLW_inst_hsclk1_rxrecclkout0_UNCONNECTED;
  wire NLW_inst_hsclk1_rxrecclkout1_UNCONNECTED;
  wire NLW_inst_refclk0_clktestsigint_UNCONNECTED;
  wire NLW_inst_refclk0_gtrefclkpdint_UNCONNECTED;
  wire NLW_inst_refclk1_clktestsigint_UNCONNECTED;
  wire NLW_inst_refclk1_gtrefclkpdint_UNCONNECTED;
  wire NLW_inst_rxmarginreqack_UNCONNECTED;
  wire NLW_inst_rxmarginresreq_UNCONNECTED;
  wire NLW_inst_s_axi_lite_arready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_awready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_rvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_wready_UNCONNECTED;
  wire NLW_inst_trigackin0_UNCONNECTED;
  wire NLW_inst_trigout0_UNCONNECTED;
  wire NLW_inst_ubinterrupt_UNCONNECTED;
  wire NLW_inst_ubtxuart_UNCONNECTED;
  wire NLW_inst_uncorrecterr_UNCONNECTED;
  wire [31:0]NLW_inst_apb3prdata_UNCONNECTED;
  wire [3:0]NLW_inst_ch0_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_inst_ch0_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_inst_ch0_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_inst_ch0_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_inst_ch0_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_inst_ch0_pinrsvdas_UNCONNECTED;
  wire [3:0]NLW_inst_ch1_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_inst_ch1_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_inst_ch1_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_inst_ch1_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_refdebugout_UNCONNECTED;
  wire [7:0]NLW_inst_ch1_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_inst_ch1_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_inst_ch1_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch1_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_inst_ch1_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_inst_ch1_rxdata_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_inst_ch1_rxheader_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_inst_ch1_rxstatus_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_txbufstatus_UNCONNECTED;
  wire [3:0]NLW_inst_ch2_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_inst_ch2_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_inst_ch2_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_inst_ch2_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_refdebugout_UNCONNECTED;
  wire [7:0]NLW_inst_ch2_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_inst_ch2_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_inst_ch2_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch2_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_inst_ch2_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_inst_ch2_rxdata_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_inst_ch2_rxheader_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_inst_ch2_rxstatus_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_txbufstatus_UNCONNECTED;
  wire [3:0]NLW_inst_ch3_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_inst_ch3_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_inst_ch3_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_inst_ch3_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_refdebugout_UNCONNECTED;
  wire [7:0]NLW_inst_ch3_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_inst_ch3_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_inst_ch3_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch3_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_inst_ch3_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_inst_ch3_rxdata_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_inst_ch3_rxheader_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_inst_ch3_rxstatus_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_txbufstatus_UNCONNECTED;
  wire [7:0]NLW_inst_ctrlrsvdout_UNCONNECTED;
  wire [15:0]NLW_inst_debugtracetdata_UNCONNECTED;
  wire [7:0]NLW_inst_hsclk0_lcpllrsvdout_UNCONNECTED;
  wire [7:0]NLW_inst_hsclk0_rpllrsvdout_UNCONNECTED;
  wire [1:0]NLW_inst_hsclk0_rxrecclksel_UNCONNECTED;
  wire [7:0]NLW_inst_hsclk1_lcpllrsvdout_UNCONNECTED;
  wire [7:0]NLW_inst_hsclk1_rpllrsvdout_UNCONNECTED;
  wire [1:0]NLW_inst_hsclk1_rxrecclksel_UNCONNECTED;
  wire [5:0]NLW_inst_pipenorthout_UNCONNECTED;
  wire [5:0]NLW_inst_pipesouthout_UNCONNECTED;
  wire [1:0]NLW_inst_resetdone_northout_UNCONNECTED;
  wire [1:0]NLW_inst_resetdone_southout_UNCONNECTED;
  wire [3:0]NLW_inst_rxmarginrescmd_UNCONNECTED;
  wire [1:0]NLW_inst_rxmarginreslanenum_UNCONNECTED;
  wire [7:0]NLW_inst_rxmarginrespayld_UNCONNECTED;
  wire [3:0]NLW_inst_rxpinorthout_UNCONNECTED;
  wire [3:0]NLW_inst_rxpisouthout_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_lite_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_rresp_UNCONNECTED;
  wire [3:0]NLW_inst_txpinorthout_UNCONNECTED;
  wire [3:0]NLW_inst_txpisouthout_UNCONNECTED;

  assign apb3prdata[31] = \<const0> ;
  assign apb3prdata[30] = \<const0> ;
  assign apb3prdata[29] = \<const0> ;
  assign apb3prdata[28] = \<const0> ;
  assign apb3prdata[27] = \<const0> ;
  assign apb3prdata[26] = \<const0> ;
  assign apb3prdata[25] = \<const0> ;
  assign apb3prdata[24] = \<const0> ;
  assign apb3prdata[23] = \<const0> ;
  assign apb3prdata[22] = \<const0> ;
  assign apb3prdata[21] = \<const0> ;
  assign apb3prdata[20] = \<const0> ;
  assign apb3prdata[19] = \<const0> ;
  assign apb3prdata[18] = \<const0> ;
  assign apb3prdata[17] = \<const0> ;
  assign apb3prdata[16] = \<const0> ;
  assign apb3prdata[15] = \<const0> ;
  assign apb3prdata[14] = \<const0> ;
  assign apb3prdata[13] = \<const0> ;
  assign apb3prdata[12] = \<const0> ;
  assign apb3prdata[11] = \<const0> ;
  assign apb3prdata[10] = \<const0> ;
  assign apb3prdata[9] = \<const0> ;
  assign apb3prdata[8] = \<const0> ;
  assign apb3prdata[7] = \<const0> ;
  assign apb3prdata[6] = \<const0> ;
  assign apb3prdata[5] = \<const0> ;
  assign apb3prdata[4] = \<const0> ;
  assign apb3prdata[3] = \<const0> ;
  assign apb3prdata[2] = \<const0> ;
  assign apb3prdata[1] = \<const0> ;
  assign apb3prdata[0] = \<const0> ;
  assign apb3pready = \<const0> ;
  assign apb3pslverr = \<const0> ;
  assign ch0_bufgtce = \<const0> ;
  assign ch0_bufgtcemask[3] = \<const0> ;
  assign ch0_bufgtcemask[2] = \<const0> ;
  assign ch0_bufgtcemask[1] = \<const0> ;
  assign ch0_bufgtcemask[0] = \<const0> ;
  assign ch0_bufgtdiv[11] = \<const0> ;
  assign ch0_bufgtdiv[10] = \<const0> ;
  assign ch0_bufgtdiv[9] = \<const0> ;
  assign ch0_bufgtdiv[8] = \<const0> ;
  assign ch0_bufgtdiv[7] = \<const0> ;
  assign ch0_bufgtdiv[6] = \<const0> ;
  assign ch0_bufgtdiv[5] = \<const0> ;
  assign ch0_bufgtdiv[4] = \<const0> ;
  assign ch0_bufgtdiv[3] = \<const0> ;
  assign ch0_bufgtdiv[2] = \<const0> ;
  assign ch0_bufgtdiv[1] = \<const0> ;
  assign ch0_bufgtdiv[0] = \<const0> ;
  assign ch0_bufgtrst = \<const0> ;
  assign ch0_bufgtrstmask[3] = \<const0> ;
  assign ch0_bufgtrstmask[2] = \<const0> ;
  assign ch0_bufgtrstmask[1] = \<const0> ;
  assign ch0_bufgtrstmask[0] = \<const0> ;
  assign ch0_dmonitorout[31] = \<const0> ;
  assign ch0_dmonitorout[30] = \<const0> ;
  assign ch0_dmonitorout[29] = \<const0> ;
  assign ch0_dmonitorout[28] = \<const0> ;
  assign ch0_dmonitorout[27] = \<const0> ;
  assign ch0_dmonitorout[26] = \<const0> ;
  assign ch0_dmonitorout[25] = \<const0> ;
  assign ch0_dmonitorout[24] = \<const0> ;
  assign ch0_dmonitorout[23] = \<const0> ;
  assign ch0_dmonitorout[22] = \<const0> ;
  assign ch0_dmonitorout[21] = \<const0> ;
  assign ch0_dmonitorout[20] = \<const0> ;
  assign ch0_dmonitorout[19] = \<const0> ;
  assign ch0_dmonitorout[18] = \<const0> ;
  assign ch0_dmonitorout[17] = \<const0> ;
  assign ch0_dmonitorout[16] = \<const0> ;
  assign ch0_dmonitorout[15] = \<const0> ;
  assign ch0_dmonitorout[14] = \<const0> ;
  assign ch0_dmonitorout[13] = \<const0> ;
  assign ch0_dmonitorout[12] = \<const0> ;
  assign ch0_dmonitorout[11] = \<const0> ;
  assign ch0_dmonitorout[10] = \<const0> ;
  assign ch0_dmonitorout[9] = \<const0> ;
  assign ch0_dmonitorout[8] = \<const0> ;
  assign ch0_dmonitorout[7] = \<const0> ;
  assign ch0_dmonitorout[6] = \<const0> ;
  assign ch0_dmonitorout[5] = \<const0> ;
  assign ch0_dmonitorout[4] = \<const0> ;
  assign ch0_dmonitorout[3] = \<const0> ;
  assign ch0_dmonitorout[2] = \<const0> ;
  assign ch0_dmonitorout[1] = \<const0> ;
  assign ch0_dmonitorout[0] = \<const0> ;
  assign ch0_dmonitoroutclk = \<const0> ;
  assign ch0_iloresetdone = \<const0> ;
  assign ch0_pcsrsvdout[15] = \<const0> ;
  assign ch0_pcsrsvdout[14] = \<const0> ;
  assign ch0_pcsrsvdout[13] = \<const0> ;
  assign ch0_pcsrsvdout[12] = \<const0> ;
  assign ch0_pcsrsvdout[11] = \<const0> ;
  assign ch0_pcsrsvdout[10] = \<const0> ;
  assign ch0_pcsrsvdout[9] = \<const0> ;
  assign ch0_pcsrsvdout[8] = \<const0> ;
  assign ch0_pcsrsvdout[7] = \<const0> ;
  assign ch0_pcsrsvdout[6] = \<const0> ;
  assign ch0_pcsrsvdout[5] = \<const0> ;
  assign ch0_pcsrsvdout[4] = \<const0> ;
  assign ch0_pcsrsvdout[3] = \<const0> ;
  assign ch0_pcsrsvdout[2] = \<const0> ;
  assign ch0_pcsrsvdout[1] = \<const0> ;
  assign ch0_pcsrsvdout[0] = \<const0> ;
  assign ch0_phyready = \<const0> ;
  assign ch0_phystatus = \<const0> ;
  assign ch0_pinrsvdas[15] = \<const0> ;
  assign ch0_pinrsvdas[14] = \<const0> ;
  assign ch0_pinrsvdas[13] = \<const0> ;
  assign ch0_pinrsvdas[12] = \<const0> ;
  assign ch0_pinrsvdas[11] = \<const0> ;
  assign ch0_pinrsvdas[10] = \<const0> ;
  assign ch0_pinrsvdas[9] = \<const0> ;
  assign ch0_pinrsvdas[8] = \<const0> ;
  assign ch0_pinrsvdas[7] = \<const0> ;
  assign ch0_pinrsvdas[6] = \<const0> ;
  assign ch0_pinrsvdas[5] = \<const0> ;
  assign ch0_pinrsvdas[4] = \<const0> ;
  assign ch0_pinrsvdas[3] = \<const0> ;
  assign ch0_pinrsvdas[2] = \<const0> ;
  assign ch0_pinrsvdas[1] = \<const0> ;
  assign ch0_pinrsvdas[0] = \<const0> ;
  assign ch0_resetexception = \<const0> ;
  assign ch0_txsimplexphystatus = \<const0> ;
  assign ch0_xpipe5_pipeline_en = \<const0> ;
  assign ch1_bufgtce = \<const0> ;
  assign ch1_bufgtcemask[3] = \<const0> ;
  assign ch1_bufgtcemask[2] = \<const0> ;
  assign ch1_bufgtcemask[1] = \<const0> ;
  assign ch1_bufgtcemask[0] = \<const0> ;
  assign ch1_bufgtdiv[11] = \<const0> ;
  assign ch1_bufgtdiv[10] = \<const0> ;
  assign ch1_bufgtdiv[9] = \<const0> ;
  assign ch1_bufgtdiv[8] = \<const0> ;
  assign ch1_bufgtdiv[7] = \<const0> ;
  assign ch1_bufgtdiv[6] = \<const0> ;
  assign ch1_bufgtdiv[5] = \<const0> ;
  assign ch1_bufgtdiv[4] = \<const0> ;
  assign ch1_bufgtdiv[3] = \<const0> ;
  assign ch1_bufgtdiv[2] = \<const0> ;
  assign ch1_bufgtdiv[1] = \<const0> ;
  assign ch1_bufgtdiv[0] = \<const0> ;
  assign ch1_bufgtrst = \<const0> ;
  assign ch1_bufgtrstmask[3] = \<const0> ;
  assign ch1_bufgtrstmask[2] = \<const0> ;
  assign ch1_bufgtrstmask[1] = \<const0> ;
  assign ch1_bufgtrstmask[0] = \<const0> ;
  assign ch1_dmonitorout[31] = \<const0> ;
  assign ch1_dmonitorout[30] = \<const0> ;
  assign ch1_dmonitorout[29] = \<const0> ;
  assign ch1_dmonitorout[28] = \<const0> ;
  assign ch1_dmonitorout[27] = \<const0> ;
  assign ch1_dmonitorout[26] = \<const0> ;
  assign ch1_dmonitorout[25] = \<const0> ;
  assign ch1_dmonitorout[24] = \<const0> ;
  assign ch1_dmonitorout[23] = \<const0> ;
  assign ch1_dmonitorout[22] = \<const0> ;
  assign ch1_dmonitorout[21] = \<const0> ;
  assign ch1_dmonitorout[20] = \<const0> ;
  assign ch1_dmonitorout[19] = \<const0> ;
  assign ch1_dmonitorout[18] = \<const0> ;
  assign ch1_dmonitorout[17] = \<const0> ;
  assign ch1_dmonitorout[16] = \<const0> ;
  assign ch1_dmonitorout[15] = \<const0> ;
  assign ch1_dmonitorout[14] = \<const0> ;
  assign ch1_dmonitorout[13] = \<const0> ;
  assign ch1_dmonitorout[12] = \<const0> ;
  assign ch1_dmonitorout[11] = \<const0> ;
  assign ch1_dmonitorout[10] = \<const0> ;
  assign ch1_dmonitorout[9] = \<const0> ;
  assign ch1_dmonitorout[8] = \<const0> ;
  assign ch1_dmonitorout[7] = \<const0> ;
  assign ch1_dmonitorout[6] = \<const0> ;
  assign ch1_dmonitorout[5] = \<const0> ;
  assign ch1_dmonitorout[4] = \<const0> ;
  assign ch1_dmonitorout[3] = \<const0> ;
  assign ch1_dmonitorout[2] = \<const0> ;
  assign ch1_dmonitorout[1] = \<const0> ;
  assign ch1_dmonitorout[0] = \<const0> ;
  assign ch1_dmonitoroutclk = \<const0> ;
  assign ch1_eyescandataerror = \<const0> ;
  assign ch1_iloresetdone = \<const0> ;
  assign ch1_pcsrsvdout[15] = \<const0> ;
  assign ch1_pcsrsvdout[14] = \<const0> ;
  assign ch1_pcsrsvdout[13] = \<const0> ;
  assign ch1_pcsrsvdout[12] = \<const0> ;
  assign ch1_pcsrsvdout[11] = \<const0> ;
  assign ch1_pcsrsvdout[10] = \<const0> ;
  assign ch1_pcsrsvdout[9] = \<const0> ;
  assign ch1_pcsrsvdout[8] = \<const0> ;
  assign ch1_pcsrsvdout[7] = \<const0> ;
  assign ch1_pcsrsvdout[6] = \<const0> ;
  assign ch1_pcsrsvdout[5] = \<const0> ;
  assign ch1_pcsrsvdout[4] = \<const0> ;
  assign ch1_pcsrsvdout[3] = \<const0> ;
  assign ch1_pcsrsvdout[2] = \<const0> ;
  assign ch1_pcsrsvdout[1] = \<const0> ;
  assign ch1_pcsrsvdout[0] = \<const0> ;
  assign ch1_phyready = \<const0> ;
  assign ch1_phystatus = \<const0> ;
  assign ch1_pinrsvdas[15] = \<const0> ;
  assign ch1_pinrsvdas[14] = \<const0> ;
  assign ch1_pinrsvdas[13] = \<const0> ;
  assign ch1_pinrsvdas[12] = \<const0> ;
  assign ch1_pinrsvdas[11] = \<const0> ;
  assign ch1_pinrsvdas[10] = \<const0> ;
  assign ch1_pinrsvdas[9] = \<const0> ;
  assign ch1_pinrsvdas[8] = \<const0> ;
  assign ch1_pinrsvdas[7] = \<const0> ;
  assign ch1_pinrsvdas[6] = \<const0> ;
  assign ch1_pinrsvdas[5] = \<const0> ;
  assign ch1_pinrsvdas[4] = \<const0> ;
  assign ch1_pinrsvdas[3] = \<const0> ;
  assign ch1_pinrsvdas[2] = \<const0> ;
  assign ch1_pinrsvdas[1] = \<const0> ;
  assign ch1_pinrsvdas[0] = \<const0> ;
  assign ch1_refdebugout[1] = \<const0> ;
  assign ch1_refdebugout[0] = \<const0> ;
  assign ch1_resetexception = \<const0> ;
  assign ch1_rx10gstat[7] = \<const0> ;
  assign ch1_rx10gstat[6] = \<const0> ;
  assign ch1_rx10gstat[5] = \<const0> ;
  assign ch1_rx10gstat[4] = \<const0> ;
  assign ch1_rx10gstat[3] = \<const0> ;
  assign ch1_rx10gstat[2] = \<const0> ;
  assign ch1_rx10gstat[1] = \<const0> ;
  assign ch1_rx10gstat[0] = \<const0> ;
  assign ch1_rxbufstatus[2] = \<const0> ;
  assign ch1_rxbufstatus[1] = \<const0> ;
  assign ch1_rxbufstatus[0] = \<const0> ;
  assign ch1_rxbyteisaligned = \<const0> ;
  assign ch1_rxbyterealign = \<const0> ;
  assign ch1_rxcdrlock = \<const0> ;
  assign ch1_rxcdrphdone = \<const0> ;
  assign ch1_rxchanbondseq = \<const0> ;
  assign ch1_rxchanisaligned = \<const0> ;
  assign ch1_rxchanrealign = \<const0> ;
  assign ch1_rxchbondo[4] = \<const0> ;
  assign ch1_rxchbondo[3] = \<const0> ;
  assign ch1_rxchbondo[2] = \<const0> ;
  assign ch1_rxchbondo[1] = \<const0> ;
  assign ch1_rxchbondo[0] = \<const0> ;
  assign ch1_rxclkcorcnt[1] = \<const0> ;
  assign ch1_rxclkcorcnt[0] = \<const0> ;
  assign ch1_rxcominitdet = \<const0> ;
  assign ch1_rxcommadet = \<const0> ;
  assign ch1_rxcomsasdet = \<const0> ;
  assign ch1_rxcomwakedet = \<const0> ;
  assign ch1_rxctrl0[15] = \<const0> ;
  assign ch1_rxctrl0[14] = \<const0> ;
  assign ch1_rxctrl0[13] = \<const0> ;
  assign ch1_rxctrl0[12] = \<const0> ;
  assign ch1_rxctrl0[11] = \<const0> ;
  assign ch1_rxctrl0[10] = \<const0> ;
  assign ch1_rxctrl0[9] = \<const0> ;
  assign ch1_rxctrl0[8] = \<const0> ;
  assign ch1_rxctrl0[7] = \<const0> ;
  assign ch1_rxctrl0[6] = \<const0> ;
  assign ch1_rxctrl0[5] = \<const0> ;
  assign ch1_rxctrl0[4] = \<const0> ;
  assign ch1_rxctrl0[3] = \<const0> ;
  assign ch1_rxctrl0[2] = \<const0> ;
  assign ch1_rxctrl0[1] = \<const0> ;
  assign ch1_rxctrl0[0] = \<const0> ;
  assign ch1_rxctrl1[15] = \<const0> ;
  assign ch1_rxctrl1[14] = \<const0> ;
  assign ch1_rxctrl1[13] = \<const0> ;
  assign ch1_rxctrl1[12] = \<const0> ;
  assign ch1_rxctrl1[11] = \<const0> ;
  assign ch1_rxctrl1[10] = \<const0> ;
  assign ch1_rxctrl1[9] = \<const0> ;
  assign ch1_rxctrl1[8] = \<const0> ;
  assign ch1_rxctrl1[7] = \<const0> ;
  assign ch1_rxctrl1[6] = \<const0> ;
  assign ch1_rxctrl1[5] = \<const0> ;
  assign ch1_rxctrl1[4] = \<const0> ;
  assign ch1_rxctrl1[3] = \<const0> ;
  assign ch1_rxctrl1[2] = \<const0> ;
  assign ch1_rxctrl1[1] = \<const0> ;
  assign ch1_rxctrl1[0] = \<const0> ;
  assign ch1_rxctrl2[7] = \<const0> ;
  assign ch1_rxctrl2[6] = \<const0> ;
  assign ch1_rxctrl2[5] = \<const0> ;
  assign ch1_rxctrl2[4] = \<const0> ;
  assign ch1_rxctrl2[3] = \<const0> ;
  assign ch1_rxctrl2[2] = \<const0> ;
  assign ch1_rxctrl2[1] = \<const0> ;
  assign ch1_rxctrl2[0] = \<const0> ;
  assign ch1_rxctrl3[7] = \<const0> ;
  assign ch1_rxctrl3[6] = \<const0> ;
  assign ch1_rxctrl3[5] = \<const0> ;
  assign ch1_rxctrl3[4] = \<const0> ;
  assign ch1_rxctrl3[3] = \<const0> ;
  assign ch1_rxctrl3[2] = \<const0> ;
  assign ch1_rxctrl3[1] = \<const0> ;
  assign ch1_rxctrl3[0] = \<const0> ;
  assign ch1_rxdapiresetdone = \<const0> ;
  assign ch1_rxdata[127] = \<const0> ;
  assign ch1_rxdata[126] = \<const0> ;
  assign ch1_rxdata[125] = \<const0> ;
  assign ch1_rxdata[124] = \<const0> ;
  assign ch1_rxdata[123] = \<const0> ;
  assign ch1_rxdata[122] = \<const0> ;
  assign ch1_rxdata[121] = \<const0> ;
  assign ch1_rxdata[120] = \<const0> ;
  assign ch1_rxdata[119] = \<const0> ;
  assign ch1_rxdata[118] = \<const0> ;
  assign ch1_rxdata[117] = \<const0> ;
  assign ch1_rxdata[116] = \<const0> ;
  assign ch1_rxdata[115] = \<const0> ;
  assign ch1_rxdata[114] = \<const0> ;
  assign ch1_rxdata[113] = \<const0> ;
  assign ch1_rxdata[112] = \<const0> ;
  assign ch1_rxdata[111] = \<const0> ;
  assign ch1_rxdata[110] = \<const0> ;
  assign ch1_rxdata[109] = \<const0> ;
  assign ch1_rxdata[108] = \<const0> ;
  assign ch1_rxdata[107] = \<const0> ;
  assign ch1_rxdata[106] = \<const0> ;
  assign ch1_rxdata[105] = \<const0> ;
  assign ch1_rxdata[104] = \<const0> ;
  assign ch1_rxdata[103] = \<const0> ;
  assign ch1_rxdata[102] = \<const0> ;
  assign ch1_rxdata[101] = \<const0> ;
  assign ch1_rxdata[100] = \<const0> ;
  assign ch1_rxdata[99] = \<const0> ;
  assign ch1_rxdata[98] = \<const0> ;
  assign ch1_rxdata[97] = \<const0> ;
  assign ch1_rxdata[96] = \<const0> ;
  assign ch1_rxdata[95] = \<const0> ;
  assign ch1_rxdata[94] = \<const0> ;
  assign ch1_rxdata[93] = \<const0> ;
  assign ch1_rxdata[92] = \<const0> ;
  assign ch1_rxdata[91] = \<const0> ;
  assign ch1_rxdata[90] = \<const0> ;
  assign ch1_rxdata[89] = \<const0> ;
  assign ch1_rxdata[88] = \<const0> ;
  assign ch1_rxdata[87] = \<const0> ;
  assign ch1_rxdata[86] = \<const0> ;
  assign ch1_rxdata[85] = \<const0> ;
  assign ch1_rxdata[84] = \<const0> ;
  assign ch1_rxdata[83] = \<const0> ;
  assign ch1_rxdata[82] = \<const0> ;
  assign ch1_rxdata[81] = \<const0> ;
  assign ch1_rxdata[80] = \<const0> ;
  assign ch1_rxdata[79] = \<const0> ;
  assign ch1_rxdata[78] = \<const0> ;
  assign ch1_rxdata[77] = \<const0> ;
  assign ch1_rxdata[76] = \<const0> ;
  assign ch1_rxdata[75] = \<const0> ;
  assign ch1_rxdata[74] = \<const0> ;
  assign ch1_rxdata[73] = \<const0> ;
  assign ch1_rxdata[72] = \<const0> ;
  assign ch1_rxdata[71] = \<const0> ;
  assign ch1_rxdata[70] = \<const0> ;
  assign ch1_rxdata[69] = \<const0> ;
  assign ch1_rxdata[68] = \<const0> ;
  assign ch1_rxdata[67] = \<const0> ;
  assign ch1_rxdata[66] = \<const0> ;
  assign ch1_rxdata[65] = \<const0> ;
  assign ch1_rxdata[64] = \<const0> ;
  assign ch1_rxdata[63] = \<const0> ;
  assign ch1_rxdata[62] = \<const0> ;
  assign ch1_rxdata[61] = \<const0> ;
  assign ch1_rxdata[60] = \<const0> ;
  assign ch1_rxdata[59] = \<const0> ;
  assign ch1_rxdata[58] = \<const0> ;
  assign ch1_rxdata[57] = \<const0> ;
  assign ch1_rxdata[56] = \<const0> ;
  assign ch1_rxdata[55] = \<const0> ;
  assign ch1_rxdata[54] = \<const0> ;
  assign ch1_rxdata[53] = \<const0> ;
  assign ch1_rxdata[52] = \<const0> ;
  assign ch1_rxdata[51] = \<const0> ;
  assign ch1_rxdata[50] = \<const0> ;
  assign ch1_rxdata[49] = \<const0> ;
  assign ch1_rxdata[48] = \<const0> ;
  assign ch1_rxdata[47] = \<const0> ;
  assign ch1_rxdata[46] = \<const0> ;
  assign ch1_rxdata[45] = \<const0> ;
  assign ch1_rxdata[44] = \<const0> ;
  assign ch1_rxdata[43] = \<const0> ;
  assign ch1_rxdata[42] = \<const0> ;
  assign ch1_rxdata[41] = \<const0> ;
  assign ch1_rxdata[40] = \<const0> ;
  assign ch1_rxdata[39] = \<const0> ;
  assign ch1_rxdata[38] = \<const0> ;
  assign ch1_rxdata[37] = \<const0> ;
  assign ch1_rxdata[36] = \<const0> ;
  assign ch1_rxdata[35] = \<const0> ;
  assign ch1_rxdata[34] = \<const0> ;
  assign ch1_rxdata[33] = \<const0> ;
  assign ch1_rxdata[32] = \<const0> ;
  assign ch1_rxdata[31] = \<const0> ;
  assign ch1_rxdata[30] = \<const0> ;
  assign ch1_rxdata[29] = \<const0> ;
  assign ch1_rxdata[28] = \<const0> ;
  assign ch1_rxdata[27] = \<const0> ;
  assign ch1_rxdata[26] = \<const0> ;
  assign ch1_rxdata[25] = \<const0> ;
  assign ch1_rxdata[24] = \<const0> ;
  assign ch1_rxdata[23] = \<const0> ;
  assign ch1_rxdata[22] = \<const0> ;
  assign ch1_rxdata[21] = \<const0> ;
  assign ch1_rxdata[20] = \<const0> ;
  assign ch1_rxdata[19] = \<const0> ;
  assign ch1_rxdata[18] = \<const0> ;
  assign ch1_rxdata[17] = \<const0> ;
  assign ch1_rxdata[16] = \<const0> ;
  assign ch1_rxdata[15] = \<const0> ;
  assign ch1_rxdata[14] = \<const0> ;
  assign ch1_rxdata[13] = \<const0> ;
  assign ch1_rxdata[12] = \<const0> ;
  assign ch1_rxdata[11] = \<const0> ;
  assign ch1_rxdata[10] = \<const0> ;
  assign ch1_rxdata[9] = \<const0> ;
  assign ch1_rxdata[8] = \<const0> ;
  assign ch1_rxdata[7] = \<const0> ;
  assign ch1_rxdata[6] = \<const0> ;
  assign ch1_rxdata[5] = \<const0> ;
  assign ch1_rxdata[4] = \<const0> ;
  assign ch1_rxdata[3] = \<const0> ;
  assign ch1_rxdata[2] = \<const0> ;
  assign ch1_rxdata[1] = \<const0> ;
  assign ch1_rxdata[0] = \<const0> ;
  assign ch1_rxdatavalid[1] = \<const0> ;
  assign ch1_rxdatavalid[0] = \<const0> ;
  assign ch1_rxdebugpcsout = \<const0> ;
  assign ch1_rxdlyalignerr = \<const0> ;
  assign ch1_rxdlyalignprog = \<const0> ;
  assign ch1_rxelecidle = \<const0> ;
  assign ch1_rxfinealigndone = \<const0> ;
  assign ch1_rxheader[5] = \<const0> ;
  assign ch1_rxheader[4] = \<const0> ;
  assign ch1_rxheader[3] = \<const0> ;
  assign ch1_rxheader[2] = \<const0> ;
  assign ch1_rxheader[1] = \<const0> ;
  assign ch1_rxheader[0] = \<const0> ;
  assign ch1_rxheadervalid[1] = \<const0> ;
  assign ch1_rxheadervalid[0] = \<const0> ;
  assign ch1_rxmstresetdone = \<const0> ;
  assign ch1_rxosintdone = \<const0> ;
  assign ch1_rxoutclk = \<const0> ;
  assign ch1_rxphaligndone = \<const0> ;
  assign ch1_rxphalignerr = \<const0> ;
  assign ch1_rxphdlyresetdone = \<const0> ;
  assign ch1_rxphsetinitdone = \<const0> ;
  assign ch1_rxphshift180done = \<const0> ;
  assign ch1_rxpkdet = \<const0> ;
  assign ch1_rxpmaresetdone = \<const0> ;
  assign ch1_rxprbserr = \<const0> ;
  assign ch1_rxprbslocked = \<const0> ;
  assign ch1_rxprogdivresetdone = \<const0> ;
  assign ch1_rxqpisenn = \<const0> ;
  assign ch1_rxqpisenp = \<const0> ;
  assign ch1_rxresetdone = \<const0> ;
  assign ch1_rxsimplexphystatus = \<const0> ;
  assign ch1_rxsliderdy = \<const0> ;
  assign ch1_rxslipdone = \<const0> ;
  assign ch1_rxstartofseq[1] = \<const0> ;
  assign ch1_rxstartofseq[0] = \<const0> ;
  assign ch1_rxstatus[2] = \<const0> ;
  assign ch1_rxstatus[1] = \<const0> ;
  assign ch1_rxstatus[0] = \<const0> ;
  assign ch1_rxsyncdone = \<const0> ;
  assign ch1_rxvalid = \<const0> ;
  assign ch1_tx10gstat = \<const0> ;
  assign ch1_txbufstatus[1] = \<const0> ;
  assign ch1_txbufstatus[0] = \<const0> ;
  assign ch1_txcomfinish = \<const0> ;
  assign ch1_txdapiresetdone = \<const0> ;
  assign ch1_txdccdone = \<const0> ;
  assign ch1_txdebugpcsout = \<const0> ;
  assign ch1_txdlyalignerr = \<const0> ;
  assign ch1_txdlyalignprog = \<const0> ;
  assign ch1_txmstresetdone = \<const0> ;
  assign ch1_txoutclk = \<const0> ;
  assign ch1_txphaligndone = \<const0> ;
  assign ch1_txphalignerr = \<const0> ;
  assign ch1_txphalignoutrsvd = \<const0> ;
  assign ch1_txphdlyresetdone = \<const0> ;
  assign ch1_txphsetinitdone = \<const0> ;
  assign ch1_txphshift180done = \<const0> ;
  assign ch1_txpmaresetdone = \<const0> ;
  assign ch1_txprogdivresetdone = \<const0> ;
  assign ch1_txqpisenn = \<const0> ;
  assign ch1_txqpisenp = \<const0> ;
  assign ch1_txresetdone = \<const0> ;
  assign ch1_txsimplexphystatus = \<const0> ;
  assign ch1_txswingouthigh = \<const0> ;
  assign ch1_txswingoutlow = \<const0> ;
  assign ch1_txsyncdone = \<const0> ;
  assign ch1_xpipe5_pipeline_en = \<const0> ;
  assign ch2_bufgtce = \<const0> ;
  assign ch2_bufgtcemask[3] = \<const0> ;
  assign ch2_bufgtcemask[2] = \<const0> ;
  assign ch2_bufgtcemask[1] = \<const0> ;
  assign ch2_bufgtcemask[0] = \<const0> ;
  assign ch2_bufgtdiv[11] = \<const0> ;
  assign ch2_bufgtdiv[10] = \<const0> ;
  assign ch2_bufgtdiv[9] = \<const0> ;
  assign ch2_bufgtdiv[8] = \<const0> ;
  assign ch2_bufgtdiv[7] = \<const0> ;
  assign ch2_bufgtdiv[6] = \<const0> ;
  assign ch2_bufgtdiv[5] = \<const0> ;
  assign ch2_bufgtdiv[4] = \<const0> ;
  assign ch2_bufgtdiv[3] = \<const0> ;
  assign ch2_bufgtdiv[2] = \<const0> ;
  assign ch2_bufgtdiv[1] = \<const0> ;
  assign ch2_bufgtdiv[0] = \<const0> ;
  assign ch2_bufgtrst = \<const0> ;
  assign ch2_bufgtrstmask[3] = \<const0> ;
  assign ch2_bufgtrstmask[2] = \<const0> ;
  assign ch2_bufgtrstmask[1] = \<const0> ;
  assign ch2_bufgtrstmask[0] = \<const0> ;
  assign ch2_dmonitorout[31] = \<const0> ;
  assign ch2_dmonitorout[30] = \<const0> ;
  assign ch2_dmonitorout[29] = \<const0> ;
  assign ch2_dmonitorout[28] = \<const0> ;
  assign ch2_dmonitorout[27] = \<const0> ;
  assign ch2_dmonitorout[26] = \<const0> ;
  assign ch2_dmonitorout[25] = \<const0> ;
  assign ch2_dmonitorout[24] = \<const0> ;
  assign ch2_dmonitorout[23] = \<const0> ;
  assign ch2_dmonitorout[22] = \<const0> ;
  assign ch2_dmonitorout[21] = \<const0> ;
  assign ch2_dmonitorout[20] = \<const0> ;
  assign ch2_dmonitorout[19] = \<const0> ;
  assign ch2_dmonitorout[18] = \<const0> ;
  assign ch2_dmonitorout[17] = \<const0> ;
  assign ch2_dmonitorout[16] = \<const0> ;
  assign ch2_dmonitorout[15] = \<const0> ;
  assign ch2_dmonitorout[14] = \<const0> ;
  assign ch2_dmonitorout[13] = \<const0> ;
  assign ch2_dmonitorout[12] = \<const0> ;
  assign ch2_dmonitorout[11] = \<const0> ;
  assign ch2_dmonitorout[10] = \<const0> ;
  assign ch2_dmonitorout[9] = \<const0> ;
  assign ch2_dmonitorout[8] = \<const0> ;
  assign ch2_dmonitorout[7] = \<const0> ;
  assign ch2_dmonitorout[6] = \<const0> ;
  assign ch2_dmonitorout[5] = \<const0> ;
  assign ch2_dmonitorout[4] = \<const0> ;
  assign ch2_dmonitorout[3] = \<const0> ;
  assign ch2_dmonitorout[2] = \<const0> ;
  assign ch2_dmonitorout[1] = \<const0> ;
  assign ch2_dmonitorout[0] = \<const0> ;
  assign ch2_dmonitoroutclk = \<const0> ;
  assign ch2_eyescandataerror = \<const0> ;
  assign ch2_iloresetdone = \<const0> ;
  assign ch2_pcsrsvdout[15] = \<const0> ;
  assign ch2_pcsrsvdout[14] = \<const0> ;
  assign ch2_pcsrsvdout[13] = \<const0> ;
  assign ch2_pcsrsvdout[12] = \<const0> ;
  assign ch2_pcsrsvdout[11] = \<const0> ;
  assign ch2_pcsrsvdout[10] = \<const0> ;
  assign ch2_pcsrsvdout[9] = \<const0> ;
  assign ch2_pcsrsvdout[8] = \<const0> ;
  assign ch2_pcsrsvdout[7] = \<const0> ;
  assign ch2_pcsrsvdout[6] = \<const0> ;
  assign ch2_pcsrsvdout[5] = \<const0> ;
  assign ch2_pcsrsvdout[4] = \<const0> ;
  assign ch2_pcsrsvdout[3] = \<const0> ;
  assign ch2_pcsrsvdout[2] = \<const0> ;
  assign ch2_pcsrsvdout[1] = \<const0> ;
  assign ch2_pcsrsvdout[0] = \<const0> ;
  assign ch2_phyready = \<const0> ;
  assign ch2_phystatus = \<const0> ;
  assign ch2_pinrsvdas[15] = \<const0> ;
  assign ch2_pinrsvdas[14] = \<const0> ;
  assign ch2_pinrsvdas[13] = \<const0> ;
  assign ch2_pinrsvdas[12] = \<const0> ;
  assign ch2_pinrsvdas[11] = \<const0> ;
  assign ch2_pinrsvdas[10] = \<const0> ;
  assign ch2_pinrsvdas[9] = \<const0> ;
  assign ch2_pinrsvdas[8] = \<const0> ;
  assign ch2_pinrsvdas[7] = \<const0> ;
  assign ch2_pinrsvdas[6] = \<const0> ;
  assign ch2_pinrsvdas[5] = \<const0> ;
  assign ch2_pinrsvdas[4] = \<const0> ;
  assign ch2_pinrsvdas[3] = \<const0> ;
  assign ch2_pinrsvdas[2] = \<const0> ;
  assign ch2_pinrsvdas[1] = \<const0> ;
  assign ch2_pinrsvdas[0] = \<const0> ;
  assign ch2_refdebugout[1] = \<const0> ;
  assign ch2_refdebugout[0] = \<const0> ;
  assign ch2_resetexception = \<const0> ;
  assign ch2_rx10gstat[7] = \<const0> ;
  assign ch2_rx10gstat[6] = \<const0> ;
  assign ch2_rx10gstat[5] = \<const0> ;
  assign ch2_rx10gstat[4] = \<const0> ;
  assign ch2_rx10gstat[3] = \<const0> ;
  assign ch2_rx10gstat[2] = \<const0> ;
  assign ch2_rx10gstat[1] = \<const0> ;
  assign ch2_rx10gstat[0] = \<const0> ;
  assign ch2_rxbufstatus[2] = \<const0> ;
  assign ch2_rxbufstatus[1] = \<const0> ;
  assign ch2_rxbufstatus[0] = \<const0> ;
  assign ch2_rxbyteisaligned = \<const0> ;
  assign ch2_rxbyterealign = \<const0> ;
  assign ch2_rxcdrlock = \<const0> ;
  assign ch2_rxcdrphdone = \<const0> ;
  assign ch2_rxchanbondseq = \<const0> ;
  assign ch2_rxchanisaligned = \<const0> ;
  assign ch2_rxchanrealign = \<const0> ;
  assign ch2_rxchbondo[4] = \<const0> ;
  assign ch2_rxchbondo[3] = \<const0> ;
  assign ch2_rxchbondo[2] = \<const0> ;
  assign ch2_rxchbondo[1] = \<const0> ;
  assign ch2_rxchbondo[0] = \<const0> ;
  assign ch2_rxclkcorcnt[1] = \<const0> ;
  assign ch2_rxclkcorcnt[0] = \<const0> ;
  assign ch2_rxcominitdet = \<const0> ;
  assign ch2_rxcommadet = \<const0> ;
  assign ch2_rxcomsasdet = \<const0> ;
  assign ch2_rxcomwakedet = \<const0> ;
  assign ch2_rxctrl0[15] = \<const0> ;
  assign ch2_rxctrl0[14] = \<const0> ;
  assign ch2_rxctrl0[13] = \<const0> ;
  assign ch2_rxctrl0[12] = \<const0> ;
  assign ch2_rxctrl0[11] = \<const0> ;
  assign ch2_rxctrl0[10] = \<const0> ;
  assign ch2_rxctrl0[9] = \<const0> ;
  assign ch2_rxctrl0[8] = \<const0> ;
  assign ch2_rxctrl0[7] = \<const0> ;
  assign ch2_rxctrl0[6] = \<const0> ;
  assign ch2_rxctrl0[5] = \<const0> ;
  assign ch2_rxctrl0[4] = \<const0> ;
  assign ch2_rxctrl0[3] = \<const0> ;
  assign ch2_rxctrl0[2] = \<const0> ;
  assign ch2_rxctrl0[1] = \<const0> ;
  assign ch2_rxctrl0[0] = \<const0> ;
  assign ch2_rxctrl1[15] = \<const0> ;
  assign ch2_rxctrl1[14] = \<const0> ;
  assign ch2_rxctrl1[13] = \<const0> ;
  assign ch2_rxctrl1[12] = \<const0> ;
  assign ch2_rxctrl1[11] = \<const0> ;
  assign ch2_rxctrl1[10] = \<const0> ;
  assign ch2_rxctrl1[9] = \<const0> ;
  assign ch2_rxctrl1[8] = \<const0> ;
  assign ch2_rxctrl1[7] = \<const0> ;
  assign ch2_rxctrl1[6] = \<const0> ;
  assign ch2_rxctrl1[5] = \<const0> ;
  assign ch2_rxctrl1[4] = \<const0> ;
  assign ch2_rxctrl1[3] = \<const0> ;
  assign ch2_rxctrl1[2] = \<const0> ;
  assign ch2_rxctrl1[1] = \<const0> ;
  assign ch2_rxctrl1[0] = \<const0> ;
  assign ch2_rxctrl2[7] = \<const0> ;
  assign ch2_rxctrl2[6] = \<const0> ;
  assign ch2_rxctrl2[5] = \<const0> ;
  assign ch2_rxctrl2[4] = \<const0> ;
  assign ch2_rxctrl2[3] = \<const0> ;
  assign ch2_rxctrl2[2] = \<const0> ;
  assign ch2_rxctrl2[1] = \<const0> ;
  assign ch2_rxctrl2[0] = \<const0> ;
  assign ch2_rxctrl3[7] = \<const0> ;
  assign ch2_rxctrl3[6] = \<const0> ;
  assign ch2_rxctrl3[5] = \<const0> ;
  assign ch2_rxctrl3[4] = \<const0> ;
  assign ch2_rxctrl3[3] = \<const0> ;
  assign ch2_rxctrl3[2] = \<const0> ;
  assign ch2_rxctrl3[1] = \<const0> ;
  assign ch2_rxctrl3[0] = \<const0> ;
  assign ch2_rxdapiresetdone = \<const0> ;
  assign ch2_rxdata[127] = \<const0> ;
  assign ch2_rxdata[126] = \<const0> ;
  assign ch2_rxdata[125] = \<const0> ;
  assign ch2_rxdata[124] = \<const0> ;
  assign ch2_rxdata[123] = \<const0> ;
  assign ch2_rxdata[122] = \<const0> ;
  assign ch2_rxdata[121] = \<const0> ;
  assign ch2_rxdata[120] = \<const0> ;
  assign ch2_rxdata[119] = \<const0> ;
  assign ch2_rxdata[118] = \<const0> ;
  assign ch2_rxdata[117] = \<const0> ;
  assign ch2_rxdata[116] = \<const0> ;
  assign ch2_rxdata[115] = \<const0> ;
  assign ch2_rxdata[114] = \<const0> ;
  assign ch2_rxdata[113] = \<const0> ;
  assign ch2_rxdata[112] = \<const0> ;
  assign ch2_rxdata[111] = \<const0> ;
  assign ch2_rxdata[110] = \<const0> ;
  assign ch2_rxdata[109] = \<const0> ;
  assign ch2_rxdata[108] = \<const0> ;
  assign ch2_rxdata[107] = \<const0> ;
  assign ch2_rxdata[106] = \<const0> ;
  assign ch2_rxdata[105] = \<const0> ;
  assign ch2_rxdata[104] = \<const0> ;
  assign ch2_rxdata[103] = \<const0> ;
  assign ch2_rxdata[102] = \<const0> ;
  assign ch2_rxdata[101] = \<const0> ;
  assign ch2_rxdata[100] = \<const0> ;
  assign ch2_rxdata[99] = \<const0> ;
  assign ch2_rxdata[98] = \<const0> ;
  assign ch2_rxdata[97] = \<const0> ;
  assign ch2_rxdata[96] = \<const0> ;
  assign ch2_rxdata[95] = \<const0> ;
  assign ch2_rxdata[94] = \<const0> ;
  assign ch2_rxdata[93] = \<const0> ;
  assign ch2_rxdata[92] = \<const0> ;
  assign ch2_rxdata[91] = \<const0> ;
  assign ch2_rxdata[90] = \<const0> ;
  assign ch2_rxdata[89] = \<const0> ;
  assign ch2_rxdata[88] = \<const0> ;
  assign ch2_rxdata[87] = \<const0> ;
  assign ch2_rxdata[86] = \<const0> ;
  assign ch2_rxdata[85] = \<const0> ;
  assign ch2_rxdata[84] = \<const0> ;
  assign ch2_rxdata[83] = \<const0> ;
  assign ch2_rxdata[82] = \<const0> ;
  assign ch2_rxdata[81] = \<const0> ;
  assign ch2_rxdata[80] = \<const0> ;
  assign ch2_rxdata[79] = \<const0> ;
  assign ch2_rxdata[78] = \<const0> ;
  assign ch2_rxdata[77] = \<const0> ;
  assign ch2_rxdata[76] = \<const0> ;
  assign ch2_rxdata[75] = \<const0> ;
  assign ch2_rxdata[74] = \<const0> ;
  assign ch2_rxdata[73] = \<const0> ;
  assign ch2_rxdata[72] = \<const0> ;
  assign ch2_rxdata[71] = \<const0> ;
  assign ch2_rxdata[70] = \<const0> ;
  assign ch2_rxdata[69] = \<const0> ;
  assign ch2_rxdata[68] = \<const0> ;
  assign ch2_rxdata[67] = \<const0> ;
  assign ch2_rxdata[66] = \<const0> ;
  assign ch2_rxdata[65] = \<const0> ;
  assign ch2_rxdata[64] = \<const0> ;
  assign ch2_rxdata[63] = \<const0> ;
  assign ch2_rxdata[62] = \<const0> ;
  assign ch2_rxdata[61] = \<const0> ;
  assign ch2_rxdata[60] = \<const0> ;
  assign ch2_rxdata[59] = \<const0> ;
  assign ch2_rxdata[58] = \<const0> ;
  assign ch2_rxdata[57] = \<const0> ;
  assign ch2_rxdata[56] = \<const0> ;
  assign ch2_rxdata[55] = \<const0> ;
  assign ch2_rxdata[54] = \<const0> ;
  assign ch2_rxdata[53] = \<const0> ;
  assign ch2_rxdata[52] = \<const0> ;
  assign ch2_rxdata[51] = \<const0> ;
  assign ch2_rxdata[50] = \<const0> ;
  assign ch2_rxdata[49] = \<const0> ;
  assign ch2_rxdata[48] = \<const0> ;
  assign ch2_rxdata[47] = \<const0> ;
  assign ch2_rxdata[46] = \<const0> ;
  assign ch2_rxdata[45] = \<const0> ;
  assign ch2_rxdata[44] = \<const0> ;
  assign ch2_rxdata[43] = \<const0> ;
  assign ch2_rxdata[42] = \<const0> ;
  assign ch2_rxdata[41] = \<const0> ;
  assign ch2_rxdata[40] = \<const0> ;
  assign ch2_rxdata[39] = \<const0> ;
  assign ch2_rxdata[38] = \<const0> ;
  assign ch2_rxdata[37] = \<const0> ;
  assign ch2_rxdata[36] = \<const0> ;
  assign ch2_rxdata[35] = \<const0> ;
  assign ch2_rxdata[34] = \<const0> ;
  assign ch2_rxdata[33] = \<const0> ;
  assign ch2_rxdata[32] = \<const0> ;
  assign ch2_rxdata[31] = \<const0> ;
  assign ch2_rxdata[30] = \<const0> ;
  assign ch2_rxdata[29] = \<const0> ;
  assign ch2_rxdata[28] = \<const0> ;
  assign ch2_rxdata[27] = \<const0> ;
  assign ch2_rxdata[26] = \<const0> ;
  assign ch2_rxdata[25] = \<const0> ;
  assign ch2_rxdata[24] = \<const0> ;
  assign ch2_rxdata[23] = \<const0> ;
  assign ch2_rxdata[22] = \<const0> ;
  assign ch2_rxdata[21] = \<const0> ;
  assign ch2_rxdata[20] = \<const0> ;
  assign ch2_rxdata[19] = \<const0> ;
  assign ch2_rxdata[18] = \<const0> ;
  assign ch2_rxdata[17] = \<const0> ;
  assign ch2_rxdata[16] = \<const0> ;
  assign ch2_rxdata[15] = \<const0> ;
  assign ch2_rxdata[14] = \<const0> ;
  assign ch2_rxdata[13] = \<const0> ;
  assign ch2_rxdata[12] = \<const0> ;
  assign ch2_rxdata[11] = \<const0> ;
  assign ch2_rxdata[10] = \<const0> ;
  assign ch2_rxdata[9] = \<const0> ;
  assign ch2_rxdata[8] = \<const0> ;
  assign ch2_rxdata[7] = \<const0> ;
  assign ch2_rxdata[6] = \<const0> ;
  assign ch2_rxdata[5] = \<const0> ;
  assign ch2_rxdata[4] = \<const0> ;
  assign ch2_rxdata[3] = \<const0> ;
  assign ch2_rxdata[2] = \<const0> ;
  assign ch2_rxdata[1] = \<const0> ;
  assign ch2_rxdata[0] = \<const0> ;
  assign ch2_rxdatavalid[1] = \<const0> ;
  assign ch2_rxdatavalid[0] = \<const0> ;
  assign ch2_rxdebugpcsout = \<const0> ;
  assign ch2_rxdlyalignerr = \<const0> ;
  assign ch2_rxdlyalignprog = \<const0> ;
  assign ch2_rxelecidle = \<const0> ;
  assign ch2_rxfinealigndone = \<const0> ;
  assign ch2_rxheader[5] = \<const0> ;
  assign ch2_rxheader[4] = \<const0> ;
  assign ch2_rxheader[3] = \<const0> ;
  assign ch2_rxheader[2] = \<const0> ;
  assign ch2_rxheader[1] = \<const0> ;
  assign ch2_rxheader[0] = \<const0> ;
  assign ch2_rxheadervalid[1] = \<const0> ;
  assign ch2_rxheadervalid[0] = \<const0> ;
  assign ch2_rxmstresetdone = \<const0> ;
  assign ch2_rxosintdone = \<const0> ;
  assign ch2_rxoutclk = \<const0> ;
  assign ch2_rxphaligndone = \<const0> ;
  assign ch2_rxphalignerr = \<const0> ;
  assign ch2_rxphdlyresetdone = \<const0> ;
  assign ch2_rxphsetinitdone = \<const0> ;
  assign ch2_rxphshift180done = \<const0> ;
  assign ch2_rxpkdet = \<const0> ;
  assign ch2_rxpmaresetdone = \<const0> ;
  assign ch2_rxprbserr = \<const0> ;
  assign ch2_rxprbslocked = \<const0> ;
  assign ch2_rxprogdivresetdone = \<const0> ;
  assign ch2_rxqpisenn = \<const0> ;
  assign ch2_rxqpisenp = \<const0> ;
  assign ch2_rxresetdone = \<const0> ;
  assign ch2_rxsimplexphystatus = \<const0> ;
  assign ch2_rxsliderdy = \<const0> ;
  assign ch2_rxslipdone = \<const0> ;
  assign ch2_rxstartofseq[1] = \<const0> ;
  assign ch2_rxstartofseq[0] = \<const0> ;
  assign ch2_rxstatus[2] = \<const0> ;
  assign ch2_rxstatus[1] = \<const0> ;
  assign ch2_rxstatus[0] = \<const0> ;
  assign ch2_rxsyncdone = \<const0> ;
  assign ch2_rxvalid = \<const0> ;
  assign ch2_tx10gstat = \<const0> ;
  assign ch2_txbufstatus[1] = \<const0> ;
  assign ch2_txbufstatus[0] = \<const0> ;
  assign ch2_txcomfinish = \<const0> ;
  assign ch2_txdapiresetdone = \<const0> ;
  assign ch2_txdccdone = \<const0> ;
  assign ch2_txdebugpcsout = \<const0> ;
  assign ch2_txdlyalignerr = \<const0> ;
  assign ch2_txdlyalignprog = \<const0> ;
  assign ch2_txmstresetdone = \<const0> ;
  assign ch2_txoutclk = \<const0> ;
  assign ch2_txphaligndone = \<const0> ;
  assign ch2_txphalignerr = \<const0> ;
  assign ch2_txphalignoutrsvd = \<const0> ;
  assign ch2_txphdlyresetdone = \<const0> ;
  assign ch2_txphsetinitdone = \<const0> ;
  assign ch2_txphshift180done = \<const0> ;
  assign ch2_txpmaresetdone = \<const0> ;
  assign ch2_txprogdivresetdone = \<const0> ;
  assign ch2_txqpisenn = \<const0> ;
  assign ch2_txqpisenp = \<const0> ;
  assign ch2_txresetdone = \<const0> ;
  assign ch2_txsimplexphystatus = \<const0> ;
  assign ch2_txswingouthigh = \<const0> ;
  assign ch2_txswingoutlow = \<const0> ;
  assign ch2_txsyncdone = \<const0> ;
  assign ch2_xpipe5_pipeline_en = \<const0> ;
  assign ch3_bufgtce = \<const0> ;
  assign ch3_bufgtcemask[3] = \<const0> ;
  assign ch3_bufgtcemask[2] = \<const0> ;
  assign ch3_bufgtcemask[1] = \<const0> ;
  assign ch3_bufgtcemask[0] = \<const0> ;
  assign ch3_bufgtdiv[11] = \<const0> ;
  assign ch3_bufgtdiv[10] = \<const0> ;
  assign ch3_bufgtdiv[9] = \<const0> ;
  assign ch3_bufgtdiv[8] = \<const0> ;
  assign ch3_bufgtdiv[7] = \<const0> ;
  assign ch3_bufgtdiv[6] = \<const0> ;
  assign ch3_bufgtdiv[5] = \<const0> ;
  assign ch3_bufgtdiv[4] = \<const0> ;
  assign ch3_bufgtdiv[3] = \<const0> ;
  assign ch3_bufgtdiv[2] = \<const0> ;
  assign ch3_bufgtdiv[1] = \<const0> ;
  assign ch3_bufgtdiv[0] = \<const0> ;
  assign ch3_bufgtrst = \<const0> ;
  assign ch3_bufgtrstmask[3] = \<const0> ;
  assign ch3_bufgtrstmask[2] = \<const0> ;
  assign ch3_bufgtrstmask[1] = \<const0> ;
  assign ch3_bufgtrstmask[0] = \<const0> ;
  assign ch3_dmonitorout[31] = \<const0> ;
  assign ch3_dmonitorout[30] = \<const0> ;
  assign ch3_dmonitorout[29] = \<const0> ;
  assign ch3_dmonitorout[28] = \<const0> ;
  assign ch3_dmonitorout[27] = \<const0> ;
  assign ch3_dmonitorout[26] = \<const0> ;
  assign ch3_dmonitorout[25] = \<const0> ;
  assign ch3_dmonitorout[24] = \<const0> ;
  assign ch3_dmonitorout[23] = \<const0> ;
  assign ch3_dmonitorout[22] = \<const0> ;
  assign ch3_dmonitorout[21] = \<const0> ;
  assign ch3_dmonitorout[20] = \<const0> ;
  assign ch3_dmonitorout[19] = \<const0> ;
  assign ch3_dmonitorout[18] = \<const0> ;
  assign ch3_dmonitorout[17] = \<const0> ;
  assign ch3_dmonitorout[16] = \<const0> ;
  assign ch3_dmonitorout[15] = \<const0> ;
  assign ch3_dmonitorout[14] = \<const0> ;
  assign ch3_dmonitorout[13] = \<const0> ;
  assign ch3_dmonitorout[12] = \<const0> ;
  assign ch3_dmonitorout[11] = \<const0> ;
  assign ch3_dmonitorout[10] = \<const0> ;
  assign ch3_dmonitorout[9] = \<const0> ;
  assign ch3_dmonitorout[8] = \<const0> ;
  assign ch3_dmonitorout[7] = \<const0> ;
  assign ch3_dmonitorout[6] = \<const0> ;
  assign ch3_dmonitorout[5] = \<const0> ;
  assign ch3_dmonitorout[4] = \<const0> ;
  assign ch3_dmonitorout[3] = \<const0> ;
  assign ch3_dmonitorout[2] = \<const0> ;
  assign ch3_dmonitorout[1] = \<const0> ;
  assign ch3_dmonitorout[0] = \<const0> ;
  assign ch3_dmonitoroutclk = \<const0> ;
  assign ch3_eyescandataerror = \<const0> ;
  assign ch3_iloresetdone = \<const0> ;
  assign ch3_pcsrsvdout[15] = \<const0> ;
  assign ch3_pcsrsvdout[14] = \<const0> ;
  assign ch3_pcsrsvdout[13] = \<const0> ;
  assign ch3_pcsrsvdout[12] = \<const0> ;
  assign ch3_pcsrsvdout[11] = \<const0> ;
  assign ch3_pcsrsvdout[10] = \<const0> ;
  assign ch3_pcsrsvdout[9] = \<const0> ;
  assign ch3_pcsrsvdout[8] = \<const0> ;
  assign ch3_pcsrsvdout[7] = \<const0> ;
  assign ch3_pcsrsvdout[6] = \<const0> ;
  assign ch3_pcsrsvdout[5] = \<const0> ;
  assign ch3_pcsrsvdout[4] = \<const0> ;
  assign ch3_pcsrsvdout[3] = \<const0> ;
  assign ch3_pcsrsvdout[2] = \<const0> ;
  assign ch3_pcsrsvdout[1] = \<const0> ;
  assign ch3_pcsrsvdout[0] = \<const0> ;
  assign ch3_phyready = \<const0> ;
  assign ch3_phystatus = \<const0> ;
  assign ch3_pinrsvdas[15] = \<const0> ;
  assign ch3_pinrsvdas[14] = \<const0> ;
  assign ch3_pinrsvdas[13] = \<const0> ;
  assign ch3_pinrsvdas[12] = \<const0> ;
  assign ch3_pinrsvdas[11] = \<const0> ;
  assign ch3_pinrsvdas[10] = \<const0> ;
  assign ch3_pinrsvdas[9] = \<const0> ;
  assign ch3_pinrsvdas[8] = \<const0> ;
  assign ch3_pinrsvdas[7] = \<const0> ;
  assign ch3_pinrsvdas[6] = \<const0> ;
  assign ch3_pinrsvdas[5] = \<const0> ;
  assign ch3_pinrsvdas[4] = \<const0> ;
  assign ch3_pinrsvdas[3] = \<const0> ;
  assign ch3_pinrsvdas[2] = \<const0> ;
  assign ch3_pinrsvdas[1] = \<const0> ;
  assign ch3_pinrsvdas[0] = \<const0> ;
  assign ch3_refdebugout[1] = \<const0> ;
  assign ch3_refdebugout[0] = \<const0> ;
  assign ch3_resetexception = \<const0> ;
  assign ch3_rx10gstat[7] = \<const0> ;
  assign ch3_rx10gstat[6] = \<const0> ;
  assign ch3_rx10gstat[5] = \<const0> ;
  assign ch3_rx10gstat[4] = \<const0> ;
  assign ch3_rx10gstat[3] = \<const0> ;
  assign ch3_rx10gstat[2] = \<const0> ;
  assign ch3_rx10gstat[1] = \<const0> ;
  assign ch3_rx10gstat[0] = \<const0> ;
  assign ch3_rxbufstatus[2] = \<const0> ;
  assign ch3_rxbufstatus[1] = \<const0> ;
  assign ch3_rxbufstatus[0] = \<const0> ;
  assign ch3_rxbyteisaligned = \<const0> ;
  assign ch3_rxbyterealign = \<const0> ;
  assign ch3_rxcdrlock = \<const0> ;
  assign ch3_rxcdrphdone = \<const0> ;
  assign ch3_rxchanbondseq = \<const0> ;
  assign ch3_rxchanisaligned = \<const0> ;
  assign ch3_rxchanrealign = \<const0> ;
  assign ch3_rxchbondo[4] = \<const0> ;
  assign ch3_rxchbondo[3] = \<const0> ;
  assign ch3_rxchbondo[2] = \<const0> ;
  assign ch3_rxchbondo[1] = \<const0> ;
  assign ch3_rxchbondo[0] = \<const0> ;
  assign ch3_rxclkcorcnt[1] = \<const0> ;
  assign ch3_rxclkcorcnt[0] = \<const0> ;
  assign ch3_rxcominitdet = \<const0> ;
  assign ch3_rxcommadet = \<const0> ;
  assign ch3_rxcomsasdet = \<const0> ;
  assign ch3_rxcomwakedet = \<const0> ;
  assign ch3_rxctrl0[15] = \<const0> ;
  assign ch3_rxctrl0[14] = \<const0> ;
  assign ch3_rxctrl0[13] = \<const0> ;
  assign ch3_rxctrl0[12] = \<const0> ;
  assign ch3_rxctrl0[11] = \<const0> ;
  assign ch3_rxctrl0[10] = \<const0> ;
  assign ch3_rxctrl0[9] = \<const0> ;
  assign ch3_rxctrl0[8] = \<const0> ;
  assign ch3_rxctrl0[7] = \<const0> ;
  assign ch3_rxctrl0[6] = \<const0> ;
  assign ch3_rxctrl0[5] = \<const0> ;
  assign ch3_rxctrl0[4] = \<const0> ;
  assign ch3_rxctrl0[3] = \<const0> ;
  assign ch3_rxctrl0[2] = \<const0> ;
  assign ch3_rxctrl0[1] = \<const0> ;
  assign ch3_rxctrl0[0] = \<const0> ;
  assign ch3_rxctrl1[15] = \<const0> ;
  assign ch3_rxctrl1[14] = \<const0> ;
  assign ch3_rxctrl1[13] = \<const0> ;
  assign ch3_rxctrl1[12] = \<const0> ;
  assign ch3_rxctrl1[11] = \<const0> ;
  assign ch3_rxctrl1[10] = \<const0> ;
  assign ch3_rxctrl1[9] = \<const0> ;
  assign ch3_rxctrl1[8] = \<const0> ;
  assign ch3_rxctrl1[7] = \<const0> ;
  assign ch3_rxctrl1[6] = \<const0> ;
  assign ch3_rxctrl1[5] = \<const0> ;
  assign ch3_rxctrl1[4] = \<const0> ;
  assign ch3_rxctrl1[3] = \<const0> ;
  assign ch3_rxctrl1[2] = \<const0> ;
  assign ch3_rxctrl1[1] = \<const0> ;
  assign ch3_rxctrl1[0] = \<const0> ;
  assign ch3_rxctrl2[7] = \<const0> ;
  assign ch3_rxctrl2[6] = \<const0> ;
  assign ch3_rxctrl2[5] = \<const0> ;
  assign ch3_rxctrl2[4] = \<const0> ;
  assign ch3_rxctrl2[3] = \<const0> ;
  assign ch3_rxctrl2[2] = \<const0> ;
  assign ch3_rxctrl2[1] = \<const0> ;
  assign ch3_rxctrl2[0] = \<const0> ;
  assign ch3_rxctrl3[7] = \<const0> ;
  assign ch3_rxctrl3[6] = \<const0> ;
  assign ch3_rxctrl3[5] = \<const0> ;
  assign ch3_rxctrl3[4] = \<const0> ;
  assign ch3_rxctrl3[3] = \<const0> ;
  assign ch3_rxctrl3[2] = \<const0> ;
  assign ch3_rxctrl3[1] = \<const0> ;
  assign ch3_rxctrl3[0] = \<const0> ;
  assign ch3_rxdapiresetdone = \<const0> ;
  assign ch3_rxdata[127] = \<const0> ;
  assign ch3_rxdata[126] = \<const0> ;
  assign ch3_rxdata[125] = \<const0> ;
  assign ch3_rxdata[124] = \<const0> ;
  assign ch3_rxdata[123] = \<const0> ;
  assign ch3_rxdata[122] = \<const0> ;
  assign ch3_rxdata[121] = \<const0> ;
  assign ch3_rxdata[120] = \<const0> ;
  assign ch3_rxdata[119] = \<const0> ;
  assign ch3_rxdata[118] = \<const0> ;
  assign ch3_rxdata[117] = \<const0> ;
  assign ch3_rxdata[116] = \<const0> ;
  assign ch3_rxdata[115] = \<const0> ;
  assign ch3_rxdata[114] = \<const0> ;
  assign ch3_rxdata[113] = \<const0> ;
  assign ch3_rxdata[112] = \<const0> ;
  assign ch3_rxdata[111] = \<const0> ;
  assign ch3_rxdata[110] = \<const0> ;
  assign ch3_rxdata[109] = \<const0> ;
  assign ch3_rxdata[108] = \<const0> ;
  assign ch3_rxdata[107] = \<const0> ;
  assign ch3_rxdata[106] = \<const0> ;
  assign ch3_rxdata[105] = \<const0> ;
  assign ch3_rxdata[104] = \<const0> ;
  assign ch3_rxdata[103] = \<const0> ;
  assign ch3_rxdata[102] = \<const0> ;
  assign ch3_rxdata[101] = \<const0> ;
  assign ch3_rxdata[100] = \<const0> ;
  assign ch3_rxdata[99] = \<const0> ;
  assign ch3_rxdata[98] = \<const0> ;
  assign ch3_rxdata[97] = \<const0> ;
  assign ch3_rxdata[96] = \<const0> ;
  assign ch3_rxdata[95] = \<const0> ;
  assign ch3_rxdata[94] = \<const0> ;
  assign ch3_rxdata[93] = \<const0> ;
  assign ch3_rxdata[92] = \<const0> ;
  assign ch3_rxdata[91] = \<const0> ;
  assign ch3_rxdata[90] = \<const0> ;
  assign ch3_rxdata[89] = \<const0> ;
  assign ch3_rxdata[88] = \<const0> ;
  assign ch3_rxdata[87] = \<const0> ;
  assign ch3_rxdata[86] = \<const0> ;
  assign ch3_rxdata[85] = \<const0> ;
  assign ch3_rxdata[84] = \<const0> ;
  assign ch3_rxdata[83] = \<const0> ;
  assign ch3_rxdata[82] = \<const0> ;
  assign ch3_rxdata[81] = \<const0> ;
  assign ch3_rxdata[80] = \<const0> ;
  assign ch3_rxdata[79] = \<const0> ;
  assign ch3_rxdata[78] = \<const0> ;
  assign ch3_rxdata[77] = \<const0> ;
  assign ch3_rxdata[76] = \<const0> ;
  assign ch3_rxdata[75] = \<const0> ;
  assign ch3_rxdata[74] = \<const0> ;
  assign ch3_rxdata[73] = \<const0> ;
  assign ch3_rxdata[72] = \<const0> ;
  assign ch3_rxdata[71] = \<const0> ;
  assign ch3_rxdata[70] = \<const0> ;
  assign ch3_rxdata[69] = \<const0> ;
  assign ch3_rxdata[68] = \<const0> ;
  assign ch3_rxdata[67] = \<const0> ;
  assign ch3_rxdata[66] = \<const0> ;
  assign ch3_rxdata[65] = \<const0> ;
  assign ch3_rxdata[64] = \<const0> ;
  assign ch3_rxdata[63] = \<const0> ;
  assign ch3_rxdata[62] = \<const0> ;
  assign ch3_rxdata[61] = \<const0> ;
  assign ch3_rxdata[60] = \<const0> ;
  assign ch3_rxdata[59] = \<const0> ;
  assign ch3_rxdata[58] = \<const0> ;
  assign ch3_rxdata[57] = \<const0> ;
  assign ch3_rxdata[56] = \<const0> ;
  assign ch3_rxdata[55] = \<const0> ;
  assign ch3_rxdata[54] = \<const0> ;
  assign ch3_rxdata[53] = \<const0> ;
  assign ch3_rxdata[52] = \<const0> ;
  assign ch3_rxdata[51] = \<const0> ;
  assign ch3_rxdata[50] = \<const0> ;
  assign ch3_rxdata[49] = \<const0> ;
  assign ch3_rxdata[48] = \<const0> ;
  assign ch3_rxdata[47] = \<const0> ;
  assign ch3_rxdata[46] = \<const0> ;
  assign ch3_rxdata[45] = \<const0> ;
  assign ch3_rxdata[44] = \<const0> ;
  assign ch3_rxdata[43] = \<const0> ;
  assign ch3_rxdata[42] = \<const0> ;
  assign ch3_rxdata[41] = \<const0> ;
  assign ch3_rxdata[40] = \<const0> ;
  assign ch3_rxdata[39] = \<const0> ;
  assign ch3_rxdata[38] = \<const0> ;
  assign ch3_rxdata[37] = \<const0> ;
  assign ch3_rxdata[36] = \<const0> ;
  assign ch3_rxdata[35] = \<const0> ;
  assign ch3_rxdata[34] = \<const0> ;
  assign ch3_rxdata[33] = \<const0> ;
  assign ch3_rxdata[32] = \<const0> ;
  assign ch3_rxdata[31] = \<const0> ;
  assign ch3_rxdata[30] = \<const0> ;
  assign ch3_rxdata[29] = \<const0> ;
  assign ch3_rxdata[28] = \<const0> ;
  assign ch3_rxdata[27] = \<const0> ;
  assign ch3_rxdata[26] = \<const0> ;
  assign ch3_rxdata[25] = \<const0> ;
  assign ch3_rxdata[24] = \<const0> ;
  assign ch3_rxdata[23] = \<const0> ;
  assign ch3_rxdata[22] = \<const0> ;
  assign ch3_rxdata[21] = \<const0> ;
  assign ch3_rxdata[20] = \<const0> ;
  assign ch3_rxdata[19] = \<const0> ;
  assign ch3_rxdata[18] = \<const0> ;
  assign ch3_rxdata[17] = \<const0> ;
  assign ch3_rxdata[16] = \<const0> ;
  assign ch3_rxdata[15] = \<const0> ;
  assign ch3_rxdata[14] = \<const0> ;
  assign ch3_rxdata[13] = \<const0> ;
  assign ch3_rxdata[12] = \<const0> ;
  assign ch3_rxdata[11] = \<const0> ;
  assign ch3_rxdata[10] = \<const0> ;
  assign ch3_rxdata[9] = \<const0> ;
  assign ch3_rxdata[8] = \<const0> ;
  assign ch3_rxdata[7] = \<const0> ;
  assign ch3_rxdata[6] = \<const0> ;
  assign ch3_rxdata[5] = \<const0> ;
  assign ch3_rxdata[4] = \<const0> ;
  assign ch3_rxdata[3] = \<const0> ;
  assign ch3_rxdata[2] = \<const0> ;
  assign ch3_rxdata[1] = \<const0> ;
  assign ch3_rxdata[0] = \<const0> ;
  assign ch3_rxdatavalid[1] = \<const0> ;
  assign ch3_rxdatavalid[0] = \<const0> ;
  assign ch3_rxdebugpcsout = \<const0> ;
  assign ch3_rxdlyalignerr = \<const0> ;
  assign ch3_rxdlyalignprog = \<const0> ;
  assign ch3_rxelecidle = \<const0> ;
  assign ch3_rxfinealigndone = \<const0> ;
  assign ch3_rxheader[5] = \<const0> ;
  assign ch3_rxheader[4] = \<const0> ;
  assign ch3_rxheader[3] = \<const0> ;
  assign ch3_rxheader[2] = \<const0> ;
  assign ch3_rxheader[1] = \<const0> ;
  assign ch3_rxheader[0] = \<const0> ;
  assign ch3_rxheadervalid[1] = \<const0> ;
  assign ch3_rxheadervalid[0] = \<const0> ;
  assign ch3_rxmstresetdone = \<const0> ;
  assign ch3_rxosintdone = \<const0> ;
  assign ch3_rxoutclk = \<const0> ;
  assign ch3_rxphaligndone = \<const0> ;
  assign ch3_rxphalignerr = \<const0> ;
  assign ch3_rxphdlyresetdone = \<const0> ;
  assign ch3_rxphsetinitdone = \<const0> ;
  assign ch3_rxphshift180done = \<const0> ;
  assign ch3_rxpkdet = \<const0> ;
  assign ch3_rxpmaresetdone = \<const0> ;
  assign ch3_rxprbserr = \<const0> ;
  assign ch3_rxprbslocked = \<const0> ;
  assign ch3_rxprogdivresetdone = \<const0> ;
  assign ch3_rxqpisenn = \<const0> ;
  assign ch3_rxqpisenp = \<const0> ;
  assign ch3_rxresetdone = \<const0> ;
  assign ch3_rxsimplexphystatus = \<const0> ;
  assign ch3_rxsliderdy = \<const0> ;
  assign ch3_rxslipdone = \<const0> ;
  assign ch3_rxstartofseq[1] = \<const0> ;
  assign ch3_rxstartofseq[0] = \<const0> ;
  assign ch3_rxstatus[2] = \<const0> ;
  assign ch3_rxstatus[1] = \<const0> ;
  assign ch3_rxstatus[0] = \<const0> ;
  assign ch3_rxsyncdone = \<const0> ;
  assign ch3_rxvalid = \<const0> ;
  assign ch3_tx10gstat = \<const0> ;
  assign ch3_txbufstatus[1] = \<const0> ;
  assign ch3_txbufstatus[0] = \<const0> ;
  assign ch3_txcomfinish = \<const0> ;
  assign ch3_txdapiresetdone = \<const0> ;
  assign ch3_txdccdone = \<const0> ;
  assign ch3_txdebugpcsout = \<const0> ;
  assign ch3_txdlyalignerr = \<const0> ;
  assign ch3_txdlyalignprog = \<const0> ;
  assign ch3_txmstresetdone = \<const0> ;
  assign ch3_txoutclk = \<const0> ;
  assign ch3_txphaligndone = \<const0> ;
  assign ch3_txphalignerr = \<const0> ;
  assign ch3_txphalignoutrsvd = \<const0> ;
  assign ch3_txphdlyresetdone = \<const0> ;
  assign ch3_txphsetinitdone = \<const0> ;
  assign ch3_txphshift180done = \<const0> ;
  assign ch3_txpmaresetdone = \<const0> ;
  assign ch3_txprogdivresetdone = \<const0> ;
  assign ch3_txqpisenn = \<const0> ;
  assign ch3_txqpisenp = \<const0> ;
  assign ch3_txresetdone = \<const0> ;
  assign ch3_txsimplexphystatus = \<const0> ;
  assign ch3_txswingouthigh = \<const0> ;
  assign ch3_txswingoutlow = \<const0> ;
  assign ch3_txsyncdone = \<const0> ;
  assign ch3_xpipe5_pipeline_en = \<const0> ;
  assign correcterr = \<const0> ;
  assign ctrlrsvdout[7] = \<const0> ;
  assign ctrlrsvdout[6] = \<const0> ;
  assign ctrlrsvdout[5] = \<const0> ;
  assign ctrlrsvdout[4] = \<const0> ;
  assign ctrlrsvdout[3] = \<const0> ;
  assign ctrlrsvdout[2] = \<const0> ;
  assign ctrlrsvdout[1] = \<const0> ;
  assign ctrlrsvdout[0] = \<const0> ;
  assign debugtracetdata[15] = \<const0> ;
  assign debugtracetdata[14] = \<const0> ;
  assign debugtracetdata[13] = \<const0> ;
  assign debugtracetdata[12] = \<const0> ;
  assign debugtracetdata[11] = \<const0> ;
  assign debugtracetdata[10] = \<const0> ;
  assign debugtracetdata[9] = \<const0> ;
  assign debugtracetdata[8] = \<const0> ;
  assign debugtracetdata[7] = \<const0> ;
  assign debugtracetdata[6] = \<const0> ;
  assign debugtracetdata[5] = \<const0> ;
  assign debugtracetdata[4] = \<const0> ;
  assign debugtracetdata[3] = \<const0> ;
  assign debugtracetdata[2] = \<const0> ;
  assign debugtracetdata[1] = \<const0> ;
  assign debugtracetdata[0] = \<const0> ;
  assign debugtracetvalid = \<const0> ;
  assign hsclk0_lcpllfbclklost = \<const0> ;
  assign hsclk0_lcpllrefclklost = \<const0> ;
  assign hsclk0_lcpllrefclkmonitor = \<const0> ;
  assign hsclk0_rpllfbclklost = \<const0> ;
  assign hsclk0_rplllock = \<const0> ;
  assign hsclk0_rpllrefclklost = \<const0> ;
  assign hsclk0_rpllrefclkmonitor = \<const0> ;
  assign hsclk0_rxrecclkout0 = \<const0> ;
  assign hsclk0_rxrecclkout1 = \<const0> ;
  assign hsclk0_rxrecclksel[1] = \<const0> ;
  assign hsclk0_rxrecclksel[0] = \<const0> ;
  assign hsclk1_lcpllfbclklost = \<const0> ;
  assign hsclk1_lcplllock = \<const0> ;
  assign hsclk1_lcpllrefclklost = \<const0> ;
  assign hsclk1_lcpllrefclkmonitor = \<const0> ;
  assign hsclk1_rpllfbclklost = \<const0> ;
  assign hsclk1_rplllock = \<const0> ;
  assign hsclk1_rpllrefclklost = \<const0> ;
  assign hsclk1_rpllrefclkmonitor = \<const0> ;
  assign hsclk1_rxrecclkout0 = \<const0> ;
  assign hsclk1_rxrecclkout1 = \<const0> ;
  assign hsclk1_rxrecclksel[1] = \<const0> ;
  assign hsclk1_rxrecclksel[0] = \<const0> ;
  assign pipenorthout[5] = \<const0> ;
  assign pipenorthout[4] = \<const0> ;
  assign pipenorthout[3] = \<const0> ;
  assign pipenorthout[2] = \<const0> ;
  assign pipenorthout[1] = \<const0> ;
  assign pipenorthout[0] = \<const0> ;
  assign pipesouthout[5] = \<const0> ;
  assign pipesouthout[4] = \<const0> ;
  assign pipesouthout[3] = \<const0> ;
  assign pipesouthout[2] = \<const0> ;
  assign pipesouthout[1] = \<const0> ;
  assign pipesouthout[0] = \<const0> ;
  assign refclk0_clktestsigint = \<const0> ;
  assign refclk0_gtrefclkpdint = \<const0> ;
  assign refclk1_clktestsigint = \<const0> ;
  assign refclk1_gtrefclkpdint = \<const0> ;
  assign resetdone_northout[1] = \<const0> ;
  assign resetdone_northout[0] = \<const0> ;
  assign resetdone_southout[1] = \<const0> ;
  assign resetdone_southout[0] = \<const0> ;
  assign rxmarginreqack = \<const0> ;
  assign rxmarginrescmd[3] = \<const0> ;
  assign rxmarginrescmd[2] = \<const0> ;
  assign rxmarginrescmd[1] = \<const0> ;
  assign rxmarginrescmd[0] = \<const0> ;
  assign rxmarginreslanenum[1] = \<const0> ;
  assign rxmarginreslanenum[0] = \<const0> ;
  assign rxmarginrespayld[7] = \<const0> ;
  assign rxmarginrespayld[6] = \<const0> ;
  assign rxmarginrespayld[5] = \<const0> ;
  assign rxmarginrespayld[4] = \<const0> ;
  assign rxmarginrespayld[3] = \<const0> ;
  assign rxmarginrespayld[2] = \<const0> ;
  assign rxmarginrespayld[1] = \<const0> ;
  assign rxmarginrespayld[0] = \<const0> ;
  assign rxmarginresreq = \<const0> ;
  assign rxpinorthout[3] = \<const0> ;
  assign rxpinorthout[2] = \<const0> ;
  assign rxpinorthout[1] = \<const0> ;
  assign rxpinorthout[0] = \<const0> ;
  assign rxpisouthout[3] = \<const0> ;
  assign rxpisouthout[2] = \<const0> ;
  assign rxpisouthout[1] = \<const0> ;
  assign rxpisouthout[0] = \<const0> ;
  assign trigackin0 = \<const0> ;
  assign trigout0 = \<const0> ;
  assign txpinorthout[3] = \<const0> ;
  assign txpinorthout[2] = \<const0> ;
  assign txpinorthout[1] = \<const0> ;
  assign txpinorthout[0] = \<const0> ;
  assign txpisouthout[3] = \<const0> ;
  assign txpisouthout[2] = \<const0> ;
  assign txpisouthout[1] = \<const0> ;
  assign txpisouthout[0] = \<const0> ;
  assign ubinterrupt = \<const0> ;
  assign ubtxuart = \<const0> ;
  assign uncorrecterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* A_CFG0 = "1856" *) 
  (* A_CFG1 = "1313754742" *) 
  (* A_CFG2 = "1610612736" *) 
  (* A_CFG3 = "-536870912" *) 
  (* A_CFG4 = "-536870912" *) 
  (* A_CFG5 = "-536870912" *) 
  (* CH0_ADAPT_APT_CFG = "0" *) 
  (* CH0_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH0_ADAPT_DFE_CFG = "64" *) 
  (* CH0_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH0_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH0_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH0_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH0_ADAPT_GEN_CFG0 = "1179648" *) 
  (* CH0_ADAPT_GEN_CFG1 = "0" *) 
  (* CH0_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH0_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH0_ADAPT_H01_CFG = "18875040" *) 
  (* CH0_ADAPT_H23_CFG = "27263392" *) 
  (* CH0_ADAPT_H45_CFG = "27263392" *) 
  (* CH0_ADAPT_H67_CFG = "27263392" *) 
  (* CH0_ADAPT_H89_CFG = "27263392" *) 
  (* CH0_ADAPT_HAB_CFG = "27263392" *) 
  (* CH0_ADAPT_HCD_CFG = "27263392" *) 
  (* CH0_ADAPT_HEF_CFG = "27263904" *) 
  (* CH0_ADAPT_KH_CFG0 = "537426239" *) 
  (* CH0_ADAPT_KH_CFG1 = "0" *) 
  (* CH0_ADAPT_KH_CFG2 = "17312" *) 
  (* CH0_ADAPT_KH_CFG3 = "0" *) 
  (* CH0_ADAPT_KH_CFG4 = "31648" *) 
  (* CH0_ADAPT_KH_CFG5 = "0" *) 
  (* CH0_ADAPT_KL_CFG0 = "32928" *) 
  (* CH0_ADAPT_KL_CFG1 = "17312" *) 
  (* CH0_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH0_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH0_ADAPT_LCK_CFG2 = "0" *) 
  (* CH0_ADAPT_LCK_CFG3 = "0" *) 
  (* CH0_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH0_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH0_CHCLK_ILO_CFG = "6553651" *) 
  (* CH0_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH0_CHCLK_RSV_CFG = "0" *) 
  (* CH0_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH0_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH0_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH0_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH0_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH0_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH0_CHL_RSV_CFG0 = "-964689911" *) 
  (* CH0_CHL_RSV_CFG1 = "1560" *) 
  (* CH0_CHL_RSV_CFG2 = "6227344" *) 
  (* CH0_CHL_RSV_CFG3 = "0" *) 
  (* CH0_CHL_RSV_CFG4 = "0" *) 
  (* CH0_DA_CFG = "655370" *) 
  (* CH0_EYESCAN_CFG0 = "2048" *) 
  (* CH0_EYESCAN_CFG1 = "0" *) 
  (* CH0_EYESCAN_CFG10 = "0" *) 
  (* CH0_EYESCAN_CFG11 = "0" *) 
  (* CH0_EYESCAN_CFG12 = "0" *) 
  (* CH0_EYESCAN_CFG13 = "0" *) 
  (* CH0_EYESCAN_CFG14 = "0" *) 
  (* CH0_EYESCAN_CFG15 = "0" *) 
  (* CH0_EYESCAN_CFG16 = "0" *) 
  (* CH0_EYESCAN_CFG2 = "0" *) 
  (* CH0_EYESCAN_CFG3 = "0" *) 
  (* CH0_EYESCAN_CFG4 = "0" *) 
  (* CH0_EYESCAN_CFG5 = "0" *) 
  (* CH0_EYESCAN_CFG6 = "0" *) 
  (* CH0_EYESCAN_CFG7 = "0" *) 
  (* CH0_EYESCAN_CFG8 = "0" *) 
  (* CH0_EYESCAN_CFG9 = "0" *) 
  (* CH0_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH0_FABRIC_INTF_CFG1 = "1024" *) 
  (* CH0_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH0_FABRIC_INTF_CFG3 = "0" *) 
  (* CH0_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH0_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH0_INSTANTIATED = "1" *) 
  (* CH0_MONITOR_CFG = "0" *) 
  (* CH0_PIPE_CTRL_CFG0 = "262240" *) 
  (* CH0_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH0_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH0_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH0_PIPE_CTRL_CFG3 = "77070639" *) 
  (* CH0_PIPE_CTRL_CFG4 = "4456448" *) 
  (* CH0_PIPE_CTRL_CFG5 = "-1610612736" *) 
  (* CH0_PIPE_CTRL_CFG6 = "1007681636" *) 
  (* CH0_PIPE_CTRL_CFG7 = "67149834" *) 
  (* CH0_PIPE_CTRL_CFG8 = "33677432" *) 
  (* CH0_PIPE_CTRL_CFG9 = "0" *) 
  (* CH0_PIPE_TX_EQ_CFG0 = "175467487" *) 
  (* CH0_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH0_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH0_PIPE_TX_EQ_CFG3 = "393618" *) 
  (* CH0_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH0_RESET_CFG = "135266357" *) 
  (* CH0_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH0_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH0_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH0_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH0_RESET_TIME_CFG0 = "34636801" *) 
  (* CH0_RESET_TIME_CFG1 = "34636833" *) 
  (* CH0_RESET_TIME_CFG2 = "34636833" *) 
  (* CH0_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH0_RXOUTCLK_FREQ = "150" *) 
  (* CH0_RXOUTCLK_REF_FREQ = "100" *) 
  (* CH0_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH0_RX_CDR_CFG0 = "-1409286078" *) 
  (* CH0_RX_CDR_CFG1 = "1610612992" *) 
  (* CH0_RX_CDR_CFG2 = "134236745" *) 
  (* CH0_RX_CDR_CFG3 = "744694" *) 
  (* CH0_RX_CDR_CFG4 = "607924224" *) 
  (* CH0_RX_CRC_CFG0 = "30848" *) 
  (* CH0_RX_CRC_CFG1 = "505290270" *) 
  (* CH0_RX_CRC_CFG2 = "505290270" *) 
  (* CH0_RX_CRC_CFG3 = "-1" *) 
  (* CH0_RX_CTLE_CFG0 = "31195392" *) 
  (* CH0_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH0_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH0_RX_DFE_CFG0 = "-805153784" *) 
  (* CH0_RX_ELASTIC_BUF_CFG0 = "4202594" *) 
  (* CH0_RX_ELASTIC_BUF_CFG1 = "533522418" *) 
  (* CH0_RX_ELASTIC_BUF_CFG2 = "-1073741697" *) 
  (* CH0_RX_ELASTIC_BUF_CFG3 = "-538968064" *) 
  (* CH0_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH0_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH0_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH0_RX_ELASTIC_BUF_CFG7 = "67108868" *) 
  (* CH0_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH0_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH0_RX_MISC_CFG0 = "1342177281" *) 
  (* CH0_RX_OOB_CFG0 = "609534468" *) 
  (* CH0_RX_OOB_CFG1 = "16925124" *) 
  (* CH0_RX_PAD_CFG0 = "0" *) 
  (* CH0_RX_PAD_CFG1 = "272910714" *) 
  (* CH0_RX_PCS_CFG0 = "-399118161" *) 
  (* CH0_RX_PCS_CFG1 = "605036671" *) 
  (* CH0_RX_PCS_CFG2 = "1074118912" *) 
  (* CH0_RX_PCS_CFG3 = "471666447" *) 
  (* CH0_RX_PCS_CFG4 = "-1031757822" *) 
  (* CH0_RX_PHALIGN_CFG0 = "3" *) 
  (* CH0_RX_PHALIGN_CFG1 = "8617984" *) 
  (* CH0_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH0_RX_PHALIGN_CFG3 = "229376" *) 
  (* CH0_RX_PHALIGN_CFG4 = "522" *) 
  (* CH0_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH0_SIM_MODE = "FAST" *) 
  (* CH0_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH0_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH0_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH0_TXOUTCLK_FREQ = "150" *) 
  (* CH0_TXOUTCLK_REF_FREQ = "100" *) 
  (* CH0_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH0_TX_10G_CFG0 = "0" *) 
  (* CH0_TX_10G_CFG1 = "1073741824" *) 
  (* CH0_TX_10G_CFG2 = "0" *) 
  (* CH0_TX_10G_CFG3 = "0" *) 
  (* CH0_TX_ANA_CFG0 = "208" *) 
  (* CH0_TX_CRC_CFG0 = "30720" *) 
  (* CH0_TX_CRC_CFG1 = "505290270" *) 
  (* CH0_TX_CRC_CFG2 = "505290270" *) 
  (* CH0_TX_CRC_CFG3 = "-1" *) 
  (* CH0_TX_DRV_CFG0 = "4194304" *) 
  (* CH0_TX_DRV_CFG1 = "6144" *) 
  (* CH0_TX_PCS_CFG0 = "559022336" *) 
  (* CH0_TX_PCS_CFG1 = "674583932" *) 
  (* CH0_TX_PCS_CFG2 = "357954218" *) 
  (* CH0_TX_PCS_CFG3 = "1747587" *) 
  (* CH0_TX_PHALIGN_CFG0 = "0" *) 
  (* CH0_TX_PHALIGN_CFG1 = "290816" *) 
  (* CH0_TX_PHALIGN_CFG2 = "229432" *) 
  (* CH0_TX_PHALIGN_CFG3 = "0" *) 
  (* CH0_TX_PHALIGN_CFG4 = "402653408" *) 
  (* CH0_TX_PHALIGN_CFG5 = "160" *) 
  (* CH0_TX_PIPPM_CFG = "33554432" *) 
  (* CH0_TX_SER_CFG0 = "0" *) 
  (* CH1_ADAPT_APT_CFG = "0" *) 
  (* CH1_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH1_ADAPT_DFE_CFG = "64" *) 
  (* CH1_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH1_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH1_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH1_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH1_ADAPT_GEN_CFG0 = "1179648" *) 
  (* CH1_ADAPT_GEN_CFG1 = "0" *) 
  (* CH1_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH1_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH1_ADAPT_H01_CFG = "18875040" *) 
  (* CH1_ADAPT_H23_CFG = "27263392" *) 
  (* CH1_ADAPT_H45_CFG = "27263392" *) 
  (* CH1_ADAPT_H67_CFG = "27263392" *) 
  (* CH1_ADAPT_H89_CFG = "27263392" *) 
  (* CH1_ADAPT_HAB_CFG = "27263392" *) 
  (* CH1_ADAPT_HCD_CFG = "27263392" *) 
  (* CH1_ADAPT_HEF_CFG = "27263904" *) 
  (* CH1_ADAPT_KH_CFG0 = "537426239" *) 
  (* CH1_ADAPT_KH_CFG1 = "0" *) 
  (* CH1_ADAPT_KH_CFG2 = "17312" *) 
  (* CH1_ADAPT_KH_CFG3 = "0" *) 
  (* CH1_ADAPT_KH_CFG4 = "31648" *) 
  (* CH1_ADAPT_KH_CFG5 = "0" *) 
  (* CH1_ADAPT_KL_CFG0 = "32928" *) 
  (* CH1_ADAPT_KL_CFG1 = "17312" *) 
  (* CH1_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH1_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH1_ADAPT_LCK_CFG2 = "0" *) 
  (* CH1_ADAPT_LCK_CFG3 = "0" *) 
  (* CH1_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH1_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH1_CHCLK_ILO_CFG = "6553651" *) 
  (* CH1_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH1_CHCLK_RSV_CFG = "0" *) 
  (* CH1_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH1_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH1_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH1_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH1_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH1_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH1_CHL_RSV_CFG0 = "-964689911" *) 
  (* CH1_CHL_RSV_CFG1 = "1560" *) 
  (* CH1_CHL_RSV_CFG2 = "6227344" *) 
  (* CH1_CHL_RSV_CFG3 = "0" *) 
  (* CH1_CHL_RSV_CFG4 = "0" *) 
  (* CH1_DA_CFG = "655370" *) 
  (* CH1_EYESCAN_CFG0 = "2048" *) 
  (* CH1_EYESCAN_CFG1 = "0" *) 
  (* CH1_EYESCAN_CFG10 = "0" *) 
  (* CH1_EYESCAN_CFG11 = "0" *) 
  (* CH1_EYESCAN_CFG12 = "0" *) 
  (* CH1_EYESCAN_CFG13 = "0" *) 
  (* CH1_EYESCAN_CFG14 = "0" *) 
  (* CH1_EYESCAN_CFG15 = "0" *) 
  (* CH1_EYESCAN_CFG16 = "0" *) 
  (* CH1_EYESCAN_CFG2 = "0" *) 
  (* CH1_EYESCAN_CFG3 = "0" *) 
  (* CH1_EYESCAN_CFG4 = "0" *) 
  (* CH1_EYESCAN_CFG5 = "0" *) 
  (* CH1_EYESCAN_CFG6 = "0" *) 
  (* CH1_EYESCAN_CFG7 = "0" *) 
  (* CH1_EYESCAN_CFG8 = "0" *) 
  (* CH1_EYESCAN_CFG9 = "0" *) 
  (* CH1_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH1_FABRIC_INTF_CFG1 = "197632" *) 
  (* CH1_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH1_FABRIC_INTF_CFG3 = "786432" *) 
  (* CH1_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH1_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH1_INSTANTIATED = "0" *) 
  (* CH1_MONITOR_CFG = "0" *) 
  (* CH1_PIPE_CTRL_CFG0 = "262240" *) 
  (* CH1_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH1_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH1_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH1_PIPE_CTRL_CFG3 = "1573167" *) 
  (* CH1_PIPE_CTRL_CFG4 = "1078198272" *) 
  (* CH1_PIPE_CTRL_CFG5 = "-1610612736" *) 
  (* CH1_PIPE_CTRL_CFG6 = "1007681636" *) 
  (* CH1_PIPE_CTRL_CFG7 = "67149834" *) 
  (* CH1_PIPE_CTRL_CFG8 = "33554432" *) 
  (* CH1_PIPE_CTRL_CFG9 = "0" *) 
  (* CH1_PIPE_TX_EQ_CFG0 = "175467487" *) 
  (* CH1_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH1_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH1_PIPE_TX_EQ_CFG3 = "393618" *) 
  (* CH1_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH1_RESET_CFG = "135266341" *) 
  (* CH1_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH1_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH1_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH1_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH1_RESET_TIME_CFG0 = "34636801" *) 
  (* CH1_RESET_TIME_CFG1 = "34636833" *) 
  (* CH1_RESET_TIME_CFG2 = "34636833" *) 
  (* CH1_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH1_RXOUTCLK_FREQ = "390.625000" *) 
  (* CH1_RXOUTCLK_REF_FREQ = "100" *) 
  (* CH1_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH1_RX_CDR_CFG0 = "-1275068350" *) 
  (* CH1_RX_CDR_CFG1 = "1610612992" *) 
  (* CH1_RX_CDR_CFG2 = "134236777" *) 
  (* CH1_RX_CDR_CFG3 = "744694" *) 
  (* CH1_RX_CDR_CFG4 = "607924224" *) 
  (* CH1_RX_CRC_CFG0 = "30848" *) 
  (* CH1_RX_CRC_CFG1 = "505290270" *) 
  (* CH1_RX_CRC_CFG2 = "505290270" *) 
  (* CH1_RX_CRC_CFG3 = "-1" *) 
  (* CH1_RX_CTLE_CFG0 = "31195392" *) 
  (* CH1_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH1_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH1_RX_DFE_CFG0 = "-805153784" *) 
  (* CH1_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) 
  (* CH1_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH1_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH1_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH1_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH1_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH1_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH1_RX_MISC_CFG0 = "1342177280" *) 
  (* CH1_RX_OOB_CFG0 = "609534468" *) 
  (* CH1_RX_OOB_CFG1 = "16925124" *) 
  (* CH1_RX_PAD_CFG0 = "0" *) 
  (* CH1_RX_PAD_CFG1 = "272910714" *) 
  (* CH1_RX_PCS_CFG0 = "674623792" *) 
  (* CH1_RX_PCS_CFG1 = "1812204543" *) 
  (* CH1_RX_PCS_CFG2 = "1073742049" *) 
  (* CH1_RX_PCS_CFG3 = "471666447" *) 
  (* CH1_RX_PCS_CFG4 = "1115725826" *) 
  (* CH1_RX_PHALIGN_CFG0 = "3" *) 
  (* CH1_RX_PHALIGN_CFG1 = "8617984" *) 
  (* CH1_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH1_RX_PHALIGN_CFG3 = "229376" *) 
  (* CH1_RX_PHALIGN_CFG4 = "522" *) 
  (* CH1_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH1_SIM_MODE = "FAST" *) 
  (* CH1_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH1_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH1_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH1_TXOUTCLK_FREQ = "390.625000" *) 
  (* CH1_TXOUTCLK_REF_FREQ = "100" *) 
  (* CH1_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH1_TX_10G_CFG0 = "0" *) 
  (* CH1_TX_10G_CFG1 = "1073741824" *) 
  (* CH1_TX_10G_CFG2 = "0" *) 
  (* CH1_TX_10G_CFG3 = "0" *) 
  (* CH1_TX_ANA_CFG0 = "208" *) 
  (* CH1_TX_CRC_CFG0 = "30720" *) 
  (* CH1_TX_CRC_CFG1 = "505290270" *) 
  (* CH1_TX_CRC_CFG2 = "505290270" *) 
  (* CH1_TX_CRC_CFG3 = "-1" *) 
  (* CH1_TX_DRV_CFG0 = "4194304" *) 
  (* CH1_TX_DRV_CFG1 = "6144" *) 
  (* CH1_TX_PCS_CFG0 = "-2107637471" *) 
  (* CH1_TX_PCS_CFG1 = "674583932" *) 
  (* CH1_TX_PCS_CFG2 = "357954218" *) 
  (* CH1_TX_PCS_CFG3 = "1747587" *) 
  (* CH1_TX_PHALIGN_CFG0 = "0" *) 
  (* CH1_TX_PHALIGN_CFG1 = "290816" *) 
  (* CH1_TX_PHALIGN_CFG2 = "229432" *) 
  (* CH1_TX_PHALIGN_CFG3 = "0" *) 
  (* CH1_TX_PHALIGN_CFG4 = "402653408" *) 
  (* CH1_TX_PHALIGN_CFG5 = "128" *) 
  (* CH1_TX_PIPPM_CFG = "33554432" *) 
  (* CH1_TX_SER_CFG0 = "0" *) 
  (* CH2_ADAPT_APT_CFG = "0" *) 
  (* CH2_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH2_ADAPT_DFE_CFG = "64" *) 
  (* CH2_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH2_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH2_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH2_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH2_ADAPT_GEN_CFG0 = "1179648" *) 
  (* CH2_ADAPT_GEN_CFG1 = "0" *) 
  (* CH2_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH2_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH2_ADAPT_H01_CFG = "18875040" *) 
  (* CH2_ADAPT_H23_CFG = "27263392" *) 
  (* CH2_ADAPT_H45_CFG = "27263392" *) 
  (* CH2_ADAPT_H67_CFG = "27263392" *) 
  (* CH2_ADAPT_H89_CFG = "27263392" *) 
  (* CH2_ADAPT_HAB_CFG = "27263392" *) 
  (* CH2_ADAPT_HCD_CFG = "27263392" *) 
  (* CH2_ADAPT_HEF_CFG = "27263904" *) 
  (* CH2_ADAPT_KH_CFG0 = "537426239" *) 
  (* CH2_ADAPT_KH_CFG1 = "0" *) 
  (* CH2_ADAPT_KH_CFG2 = "17312" *) 
  (* CH2_ADAPT_KH_CFG3 = "0" *) 
  (* CH2_ADAPT_KH_CFG4 = "31648" *) 
  (* CH2_ADAPT_KH_CFG5 = "0" *) 
  (* CH2_ADAPT_KL_CFG0 = "32928" *) 
  (* CH2_ADAPT_KL_CFG1 = "17312" *) 
  (* CH2_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH2_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH2_ADAPT_LCK_CFG2 = "0" *) 
  (* CH2_ADAPT_LCK_CFG3 = "0" *) 
  (* CH2_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH2_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH2_CHCLK_ILO_CFG = "6553651" *) 
  (* CH2_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH2_CHCLK_RSV_CFG = "0" *) 
  (* CH2_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH2_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH2_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH2_CHCLK_RXPI_CFG = "5244972" *) 
  (* CH2_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH2_CHCLK_TXPI_CFG0 = "4655151" *) 
  (* CH2_CHL_RSV_CFG0 = "-964689911" *) 
  (* CH2_CHL_RSV_CFG1 = "1560" *) 
  (* CH2_CHL_RSV_CFG2 = "6227344" *) 
  (* CH2_CHL_RSV_CFG3 = "0" *) 
  (* CH2_CHL_RSV_CFG4 = "0" *) 
  (* CH2_DA_CFG = "655370" *) 
  (* CH2_EYESCAN_CFG0 = "2048" *) 
  (* CH2_EYESCAN_CFG1 = "0" *) 
  (* CH2_EYESCAN_CFG10 = "0" *) 
  (* CH2_EYESCAN_CFG11 = "0" *) 
  (* CH2_EYESCAN_CFG12 = "0" *) 
  (* CH2_EYESCAN_CFG13 = "0" *) 
  (* CH2_EYESCAN_CFG14 = "0" *) 
  (* CH2_EYESCAN_CFG15 = "0" *) 
  (* CH2_EYESCAN_CFG16 = "0" *) 
  (* CH2_EYESCAN_CFG2 = "0" *) 
  (* CH2_EYESCAN_CFG3 = "0" *) 
  (* CH2_EYESCAN_CFG4 = "0" *) 
  (* CH2_EYESCAN_CFG5 = "0" *) 
  (* CH2_EYESCAN_CFG6 = "0" *) 
  (* CH2_EYESCAN_CFG7 = "0" *) 
  (* CH2_EYESCAN_CFG8 = "0" *) 
  (* CH2_EYESCAN_CFG9 = "0" *) 
  (* CH2_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH2_FABRIC_INTF_CFG1 = "197632" *) 
  (* CH2_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH2_FABRIC_INTF_CFG3 = "786432" *) 
  (* CH2_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH2_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH2_INSTANTIATED = "0" *) 
  (* CH2_MONITOR_CFG = "0" *) 
  (* CH2_PIPE_CTRL_CFG0 = "262240" *) 
  (* CH2_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH2_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH2_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH2_PIPE_CTRL_CFG3 = "1573167" *) 
  (* CH2_PIPE_CTRL_CFG4 = "1078198272" *) 
  (* CH2_PIPE_CTRL_CFG5 = "-1610612736" *) 
  (* CH2_PIPE_CTRL_CFG6 = "1007681636" *) 
  (* CH2_PIPE_CTRL_CFG7 = "67149834" *) 
  (* CH2_PIPE_CTRL_CFG8 = "33554432" *) 
  (* CH2_PIPE_CTRL_CFG9 = "0" *) 
  (* CH2_PIPE_TX_EQ_CFG0 = "175467487" *) 
  (* CH2_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH2_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH2_PIPE_TX_EQ_CFG3 = "393618" *) 
  (* CH2_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH2_RESET_CFG = "135266341" *) 
  (* CH2_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH2_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH2_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH2_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH2_RESET_TIME_CFG0 = "34636801" *) 
  (* CH2_RESET_TIME_CFG1 = "34636833" *) 
  (* CH2_RESET_TIME_CFG2 = "34636833" *) 
  (* CH2_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH2_RXOUTCLK_FREQ = "390.625000" *) 
  (* CH2_RXOUTCLK_REF_FREQ = "125" *) 
  (* CH2_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH2_RX_CDR_CFG0 = "-1275068350" *) 
  (* CH2_RX_CDR_CFG1 = "1610612992" *) 
  (* CH2_RX_CDR_CFG2 = "134236777" *) 
  (* CH2_RX_CDR_CFG3 = "744694" *) 
  (* CH2_RX_CDR_CFG4 = "607924224" *) 
  (* CH2_RX_CRC_CFG0 = "30848" *) 
  (* CH2_RX_CRC_CFG1 = "505290270" *) 
  (* CH2_RX_CRC_CFG2 = "505290270" *) 
  (* CH2_RX_CRC_CFG3 = "-1" *) 
  (* CH2_RX_CTLE_CFG0 = "31195392" *) 
  (* CH2_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH2_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH2_RX_DFE_CFG0 = "-805153784" *) 
  (* CH2_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) 
  (* CH2_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH2_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH2_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH2_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH2_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH2_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH2_RX_MISC_CFG0 = "1342177280" *) 
  (* CH2_RX_OOB_CFG0 = "609534468" *) 
  (* CH2_RX_OOB_CFG1 = "16925124" *) 
  (* CH2_RX_PAD_CFG0 = "0" *) 
  (* CH2_RX_PAD_CFG1 = "272910714" *) 
  (* CH2_RX_PCS_CFG0 = "674623792" *) 
  (* CH2_RX_PCS_CFG1 = "1812204543" *) 
  (* CH2_RX_PCS_CFG2 = "1073742049" *) 
  (* CH2_RX_PCS_CFG3 = "471666447" *) 
  (* CH2_RX_PCS_CFG4 = "1115725826" *) 
  (* CH2_RX_PHALIGN_CFG0 = "3" *) 
  (* CH2_RX_PHALIGN_CFG1 = "8617984" *) 
  (* CH2_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH2_RX_PHALIGN_CFG3 = "229376" *) 
  (* CH2_RX_PHALIGN_CFG4 = "522" *) 
  (* CH2_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH2_SIM_MODE = "FAST" *) 
  (* CH2_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH2_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH2_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH2_TXOUTCLK_FREQ = "390.625000" *) 
  (* CH2_TXOUTCLK_REF_FREQ = "125" *) 
  (* CH2_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH2_TX_10G_CFG0 = "0" *) 
  (* CH2_TX_10G_CFG1 = "1073741824" *) 
  (* CH2_TX_10G_CFG2 = "0" *) 
  (* CH2_TX_10G_CFG3 = "0" *) 
  (* CH2_TX_ANA_CFG0 = "208" *) 
  (* CH2_TX_CRC_CFG0 = "30720" *) 
  (* CH2_TX_CRC_CFG1 = "505290270" *) 
  (* CH2_TX_CRC_CFG2 = "505290270" *) 
  (* CH2_TX_CRC_CFG3 = "-1" *) 
  (* CH2_TX_DRV_CFG0 = "4194304" *) 
  (* CH2_TX_DRV_CFG1 = "6144" *) 
  (* CH2_TX_PCS_CFG0 = "-2107637471" *) 
  (* CH2_TX_PCS_CFG1 = "674583932" *) 
  (* CH2_TX_PCS_CFG2 = "357954218" *) 
  (* CH2_TX_PCS_CFG3 = "1747587" *) 
  (* CH2_TX_PHALIGN_CFG0 = "0" *) 
  (* CH2_TX_PHALIGN_CFG1 = "290816" *) 
  (* CH2_TX_PHALIGN_CFG2 = "229432" *) 
  (* CH2_TX_PHALIGN_CFG3 = "0" *) 
  (* CH2_TX_PHALIGN_CFG4 = "402653408" *) 
  (* CH2_TX_PHALIGN_CFG5 = "128" *) 
  (* CH2_TX_PIPPM_CFG = "33554432" *) 
  (* CH2_TX_SER_CFG0 = "0" *) 
  (* CH3_ADAPT_APT_CFG = "0" *) 
  (* CH3_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH3_ADAPT_DFE_CFG = "64" *) 
  (* CH3_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH3_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH3_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH3_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH3_ADAPT_GEN_CFG0 = "1179648" *) 
  (* CH3_ADAPT_GEN_CFG1 = "0" *) 
  (* CH3_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH3_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH3_ADAPT_H01_CFG = "18875040" *) 
  (* CH3_ADAPT_H23_CFG = "27263392" *) 
  (* CH3_ADAPT_H45_CFG = "27263392" *) 
  (* CH3_ADAPT_H67_CFG = "27263392" *) 
  (* CH3_ADAPT_H89_CFG = "27263392" *) 
  (* CH3_ADAPT_HAB_CFG = "27263392" *) 
  (* CH3_ADAPT_HCD_CFG = "27263392" *) 
  (* CH3_ADAPT_HEF_CFG = "27263904" *) 
  (* CH3_ADAPT_KH_CFG0 = "537426239" *) 
  (* CH3_ADAPT_KH_CFG1 = "0" *) 
  (* CH3_ADAPT_KH_CFG2 = "17312" *) 
  (* CH3_ADAPT_KH_CFG3 = "0" *) 
  (* CH3_ADAPT_KH_CFG4 = "31648" *) 
  (* CH3_ADAPT_KH_CFG5 = "0" *) 
  (* CH3_ADAPT_KL_CFG0 = "32928" *) 
  (* CH3_ADAPT_KL_CFG1 = "17312" *) 
  (* CH3_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH3_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH3_ADAPT_LCK_CFG2 = "0" *) 
  (* CH3_ADAPT_LCK_CFG3 = "0" *) 
  (* CH3_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH3_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH3_CHCLK_ILO_CFG = "6553651" *) 
  (* CH3_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH3_CHCLK_RSV_CFG = "0" *) 
  (* CH3_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH3_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH3_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH3_CHCLK_RXPI_CFG = "5244972" *) 
  (* CH3_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH3_CHCLK_TXPI_CFG0 = "4655151" *) 
  (* CH3_CHL_RSV_CFG0 = "-964689911" *) 
  (* CH3_CHL_RSV_CFG1 = "1560" *) 
  (* CH3_CHL_RSV_CFG2 = "6227344" *) 
  (* CH3_CHL_RSV_CFG3 = "0" *) 
  (* CH3_CHL_RSV_CFG4 = "0" *) 
  (* CH3_DA_CFG = "655370" *) 
  (* CH3_EYESCAN_CFG0 = "2048" *) 
  (* CH3_EYESCAN_CFG1 = "0" *) 
  (* CH3_EYESCAN_CFG10 = "0" *) 
  (* CH3_EYESCAN_CFG11 = "0" *) 
  (* CH3_EYESCAN_CFG12 = "0" *) 
  (* CH3_EYESCAN_CFG13 = "0" *) 
  (* CH3_EYESCAN_CFG14 = "0" *) 
  (* CH3_EYESCAN_CFG15 = "0" *) 
  (* CH3_EYESCAN_CFG16 = "0" *) 
  (* CH3_EYESCAN_CFG2 = "0" *) 
  (* CH3_EYESCAN_CFG3 = "0" *) 
  (* CH3_EYESCAN_CFG4 = "0" *) 
  (* CH3_EYESCAN_CFG5 = "0" *) 
  (* CH3_EYESCAN_CFG6 = "0" *) 
  (* CH3_EYESCAN_CFG7 = "0" *) 
  (* CH3_EYESCAN_CFG8 = "0" *) 
  (* CH3_EYESCAN_CFG9 = "0" *) 
  (* CH3_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH3_FABRIC_INTF_CFG1 = "197632" *) 
  (* CH3_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH3_FABRIC_INTF_CFG3 = "786432" *) 
  (* CH3_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH3_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH3_INSTANTIATED = "0" *) 
  (* CH3_MONITOR_CFG = "0" *) 
  (* CH3_PIPE_CTRL_CFG0 = "262240" *) 
  (* CH3_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH3_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH3_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH3_PIPE_CTRL_CFG3 = "1573167" *) 
  (* CH3_PIPE_CTRL_CFG4 = "1078198272" *) 
  (* CH3_PIPE_CTRL_CFG5 = "-1610612736" *) 
  (* CH3_PIPE_CTRL_CFG6 = "1007681636" *) 
  (* CH3_PIPE_CTRL_CFG7 = "67149834" *) 
  (* CH3_PIPE_CTRL_CFG8 = "33554432" *) 
  (* CH3_PIPE_CTRL_CFG9 = "0" *) 
  (* CH3_PIPE_TX_EQ_CFG0 = "175467487" *) 
  (* CH3_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH3_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH3_PIPE_TX_EQ_CFG3 = "393618" *) 
  (* CH3_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH3_RESET_CFG = "135266341" *) 
  (* CH3_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH3_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH3_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH3_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH3_RESET_TIME_CFG0 = "34636801" *) 
  (* CH3_RESET_TIME_CFG1 = "34636833" *) 
  (* CH3_RESET_TIME_CFG2 = "34636833" *) 
  (* CH3_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH3_RXOUTCLK_FREQ = "390.625000" *) 
  (* CH3_RXOUTCLK_REF_FREQ = "125" *) 
  (* CH3_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH3_RX_CDR_CFG0 = "-1275068350" *) 
  (* CH3_RX_CDR_CFG1 = "1610612992" *) 
  (* CH3_RX_CDR_CFG2 = "134236777" *) 
  (* CH3_RX_CDR_CFG3 = "744694" *) 
  (* CH3_RX_CDR_CFG4 = "607924224" *) 
  (* CH3_RX_CRC_CFG0 = "30848" *) 
  (* CH3_RX_CRC_CFG1 = "505290270" *) 
  (* CH3_RX_CRC_CFG2 = "505290270" *) 
  (* CH3_RX_CRC_CFG3 = "-1" *) 
  (* CH3_RX_CTLE_CFG0 = "31195392" *) 
  (* CH3_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH3_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH3_RX_DFE_CFG0 = "-805153784" *) 
  (* CH3_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) 
  (* CH3_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH3_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH3_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH3_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH3_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH3_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH3_RX_MISC_CFG0 = "1342177280" *) 
  (* CH3_RX_OOB_CFG0 = "609534468" *) 
  (* CH3_RX_OOB_CFG1 = "16925124" *) 
  (* CH3_RX_PAD_CFG0 = "0" *) 
  (* CH3_RX_PAD_CFG1 = "272910714" *) 
  (* CH3_RX_PCS_CFG0 = "674623792" *) 
  (* CH3_RX_PCS_CFG1 = "1812204543" *) 
  (* CH3_RX_PCS_CFG2 = "1073742049" *) 
  (* CH3_RX_PCS_CFG3 = "471666447" *) 
  (* CH3_RX_PCS_CFG4 = "1115725826" *) 
  (* CH3_RX_PHALIGN_CFG0 = "3" *) 
  (* CH3_RX_PHALIGN_CFG1 = "8617984" *) 
  (* CH3_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH3_RX_PHALIGN_CFG3 = "229376" *) 
  (* CH3_RX_PHALIGN_CFG4 = "522" *) 
  (* CH3_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH3_SIM_MODE = "FAST" *) 
  (* CH3_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH3_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH3_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH3_TXOUTCLK_FREQ = "390.625000" *) 
  (* CH3_TXOUTCLK_REF_FREQ = "125" *) 
  (* CH3_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH3_TX_10G_CFG0 = "0" *) 
  (* CH3_TX_10G_CFG1 = "1073741824" *) 
  (* CH3_TX_10G_CFG2 = "0" *) 
  (* CH3_TX_10G_CFG3 = "0" *) 
  (* CH3_TX_ANA_CFG0 = "208" *) 
  (* CH3_TX_CRC_CFG0 = "30720" *) 
  (* CH3_TX_CRC_CFG1 = "505290270" *) 
  (* CH3_TX_CRC_CFG2 = "505290270" *) 
  (* CH3_TX_CRC_CFG3 = "-1" *) 
  (* CH3_TX_DRV_CFG0 = "4194304" *) 
  (* CH3_TX_DRV_CFG1 = "6144" *) 
  (* CH3_TX_PCS_CFG0 = "-2107637471" *) 
  (* CH3_TX_PCS_CFG1 = "674583932" *) 
  (* CH3_TX_PCS_CFG2 = "357954218" *) 
  (* CH3_TX_PCS_CFG3 = "1747587" *) 
  (* CH3_TX_PHALIGN_CFG0 = "0" *) 
  (* CH3_TX_PHALIGN_CFG1 = "290816" *) 
  (* CH3_TX_PHALIGN_CFG2 = "229432" *) 
  (* CH3_TX_PHALIGN_CFG3 = "0" *) 
  (* CH3_TX_PHALIGN_CFG4 = "402653408" *) 
  (* CH3_TX_PHALIGN_CFG5 = "128" *) 
  (* CH3_TX_PIPPM_CFG = "33554432" *) 
  (* CH3_TX_SER_CFG0 = "0" *) 
  (* CHANNEL_BONDING_EN = "" *) 
  (* CTRL_RSV_CFG0 = "30744" *) 
  (* CTRL_RSV_CFG1 = "0" *) 
  (* EGW_CHANNEL_ORDERING = " " *) 
  (* EGW_COMP_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0" *) 
  (* EGW_IS_QUAD = "1" *) 
  (* EGW_REFCLK_LIST = "1_2_3" *) 
  (* ENABLE_APB3 = "1'b1" *) 
  (* GT_REFCLK_INFO = "refclk_PROT0_R0_100_MHz_unique1" *) 
  (* HS0_LCPLL_IPS_PIN_EN = "0" *) 
  (* HS0_LCPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS0_LCPLL_REFCLK_MAP0 = "0" *) 
  (* HS0_LCPLL_REFCLK_MAP1 = "1" *) 
  (* HS0_LCPLL_REFCLK_MAP2 = "2" *) 
  (* HS0_LCPLL_REFCLK_MAP3 = "3" *) 
  (* HS0_LCPLL_REFCLK_MAP4 = "4" *) 
  (* HS0_LCPLL_REFCLK_MAP5 = "5" *) 
  (* HS0_LCPLL_REFCLK_MAP6 = "6" *) 
  (* HS0_LCPLL_REFCLK_MAP7 = "7" *) 
  (* HS0_RPLL_IPS_PIN_EN = "0" *) 
  (* HS0_RPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS0_RPLL_REFCLK_MAP0 = "0" *) 
  (* HS0_RPLL_REFCLK_MAP1 = "1" *) 
  (* HS0_RPLL_REFCLK_MAP2 = "2" *) 
  (* HS0_RPLL_REFCLK_MAP3 = "3" *) 
  (* HS0_RPLL_REFCLK_MAP4 = "4" *) 
  (* HS0_RPLL_REFCLK_MAP5 = "5" *) 
  (* HS0_RPLL_REFCLK_MAP6 = "6" *) 
  (* HS0_RPLL_REFCLK_MAP7 = "7" *) 
  (* HS1_LCPLL_IPS_PIN_EN = "0" *) 
  (* HS1_LCPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS1_LCPLL_REFCLK_MAP0 = "0" *) 
  (* HS1_LCPLL_REFCLK_MAP1 = "2" *) 
  (* HS1_LCPLL_REFCLK_MAP2 = "1" *) 
  (* HS1_LCPLL_REFCLK_MAP3 = "3" *) 
  (* HS1_LCPLL_REFCLK_MAP4 = "4" *) 
  (* HS1_LCPLL_REFCLK_MAP5 = "5" *) 
  (* HS1_LCPLL_REFCLK_MAP6 = "6" *) 
  (* HS1_LCPLL_REFCLK_MAP7 = "7" *) 
  (* HS1_RPLL_IPS_PIN_EN = "0" *) 
  (* HS1_RPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS1_RPLL_REFCLK_MAP0 = "0" *) 
  (* HS1_RPLL_REFCLK_MAP1 = "2" *) 
  (* HS1_RPLL_REFCLK_MAP2 = "1" *) 
  (* HS1_RPLL_REFCLK_MAP3 = "3" *) 
  (* HS1_RPLL_REFCLK_MAP4 = "4" *) 
  (* HS1_RPLL_REFCLK_MAP5 = "5" *) 
  (* HS1_RPLL_REFCLK_MAP6 = "6" *) 
  (* HS1_RPLL_REFCLK_MAP7 = "7" *) 
  (* HSCLK0_HSDIST_CFG = "65566" *) 
  (* HSCLK0_INSTANTIATED = "1" *) 
  (* HSCLK0_LCPLL_CFG0 = "4210436" *) 
  (* HSCLK0_LCPLL_CFG1 = "68701952" *) 
  (* HSCLK0_LCPLL_CFG2 = "-2109996536" *) 
  (* HSCLK0_LCPLL_LGC_CFG0 = "-439055600" *) 
  (* HSCLK0_LCPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK0_LCPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK0_RPLL_CFG0 = "-2147450940" *) 
  (* HSCLK0_RPLL_CFG1 = "132267816" *) 
  (* HSCLK0_RPLL_CFG2 = "11740105" *) 
  (* HSCLK0_RPLL_LGC_CFG0 = "-439054960" *) 
  (* HSCLK0_RPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK0_RPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK1_HSDIST_CFG = "30" *) 
  (* HSCLK1_INSTANTIATED = "0" *) 
  (* HSCLK1_LCPLL_CFG0 = "4210436" *) 
  (* HSCLK1_LCPLL_CFG1 = "68701952" *) 
  (* HSCLK1_LCPLL_CFG2 = "-2109537784" *) 
  (* HSCLK1_LCPLL_LGC_CFG0 = "-439055600" *) 
  (* HSCLK1_LCPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK1_LCPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK1_RPLL_CFG0 = "-2147450940" *) 
  (* HSCLK1_RPLL_CFG1 = "132267816" *) 
  (* HSCLK1_RPLL_CFG2 = "11740105" *) 
  (* HSCLK1_RPLL_LGC_CFG0 = "-439054960" *) 
  (* HSCLK1_RPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK1_RPLL_LGC_CFG2 = "1114385" *) 
  (* IDLE = "2'b00" *) 
  (* IS_GTYE5 = "1'b0" *) 
  (* IS_GTYP = "1'b1" *) 
  (* IS_KSB = "1'b0" *) 
  (* LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}" *) 
  (* LANE_SATISFIED = "1 {}" *) 
  (* LANE_SEL_DICT = "PROT0 {RX0 TX0} unconnected {RX1 RX2 RX3 TX1 TX2 TX3}" *) 
  (* MEMORY_INIT_FILE = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0.mem" *) 
  (* MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) 
  (* MST_RESET_CFG = "441619457" *) 
  (* PIN_CFG0 = "8929817" *) 
  (* POR_CFG = "285440" *) 
  (* PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT1_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT2_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT3_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT4_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT5_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT6_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT7_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROTO_IS_FABRIC_BRAMN_NEEDED = "1'b0" *) 
  (* PROT_DUAL_OCCUPIED = "PROT0 DUAL0" *) 
  (* PWR_RX0_SETTINGS = "{LR0_SETTING {rx_data_rate=6,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=40,rx_data_encoding=8B10B,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
  (* PWR_RX1_SETTINGS = "{}" *) 
  (* PWR_RX2_SETTINGS = "{}" *) 
  (* PWR_RX3_SETTINGS = "{}" *) 
  (* PWR_RX_DEF_SETTINGS = "{LR0_SETTING {rx_data_rate=10.3125,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=32,rx_data_encoding=RAW,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}}" *) 
  (* PWR_TX0_SETTINGS = "{LR0_SETTING {tx_data_rate=6,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=40,tx_data_encoding=8B10B,tx_pam_sel=NRZ,}                }" *) 
  (* PWR_TX1_SETTINGS = "{}" *) 
  (* PWR_TX2_SETTINGS = "{}" *) 
  (* PWR_TX3_SETTINGS = "{}" *) 
  (* PWR_TX_DEF_SETTINGS = "{LR0_SETTING {tx_data_rate=10.3125,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=32,tx_data_encoding=RAW,tx_pam_sel=NRZ,}}" *) 
  (* QUAD_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}}" *) 
  (* QUAD_INSTANTIATED = "1" *) 
  (* QUAD_PACK = "" *) 
  (* QUAD_SIM_MODE = "FAST" *) 
  (* QUAD_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* QUAD_USAGE = "TX_QUAD_CH {TXQuad_0_/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 {/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 PROT0.IP_CH0,undef,undef,undef MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}} RX_QUAD_CH {RXQuad_0_/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 {/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 PROT0.IP_CH0,undef,undef,undef MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}}" *) 
  (* RCALBG0_CFG0 = "976" *) 
  (* RCALBG0_CFG1 = "64" *) 
  (* RCALBG0_CFG2 = "0" *) 
  (* RCALBG0_CFG3 = "-2147483646" *) 
  (* RCALBG0_CFG4 = "279" *) 
  (* RCALBG0_CFG5 = "691" *) 
  (* RCALBG1_CFG0 = "976" *) 
  (* RCALBG1_CFG1 = "64" *) 
  (* RCALBG1_CFG2 = "0" *) 
  (* RCALBG1_CFG3 = "-2147483646" *) 
  (* RCALBG1_CFG4 = "279" *) 
  (* RCALBG1_CFG5 = "691" *) 
  (* REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1" *) 
  (* RXRSTDONE_DIST_SEL = "0" *) 
  (* SIM_DEVICE = "" *) 
  (* SIM_VERSION = "2" *) 
  (* STAT_NPI_REG_LIST = "3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A0,31B0:31D8,31E0:31E8,31F0:3228,3230:3264,326C:3274,3280,3294:329C,32A8,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A0,35B0:35D8,35E0:35E8,35F0:3628,3630:3664,366C:3674,3680,3694:369C,36A8,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A0,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A64,3A6C:3A74,3A80,3A94:3A9C,3AA8,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA0,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E64,3E6C:3E74,3E80,3E94:3E9C,3EA8,3EBC:3EE4" *) 
  (* TERMPROG_CFG = "0" *) 
  (* TLAST = "2'b10" *) 
  (* TREADY = "2'b01" *) 
  (* TXRSTDONE_DIST_SEL = "0" *) 
  (* UB_CFG0 = "1933574144" *) 
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst inst
       (.GT_REFCLK0(GT_REFCLK0),
        .altclk(1'b0),
        .apb3clk(apb3clk),
        .apb3paddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .apb3penable(1'b0),
        .apb3prdata(NLW_inst_apb3prdata_UNCONNECTED[31:0]),
        .apb3pready(NLW_inst_apb3pready_UNCONNECTED),
        .apb3presetn(1'b1),
        .apb3psel(1'b0),
        .apb3pslverr(NLW_inst_apb3pslverr_UNCONNECTED),
        .apb3pwdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .apb3pwrite(1'b0),
        .bgbypassb(1'b0),
        .bgmonitorenb(1'b0),
        .bgpdb(1'b0),
        .bgrcalovrd({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .bgrcalovrdenb(1'b0),
        .ch0_bufgtce(NLW_inst_ch0_bufgtce_UNCONNECTED),
        .ch0_bufgtcemask(NLW_inst_ch0_bufgtcemask_UNCONNECTED[3:0]),
        .ch0_bufgtdiv(NLW_inst_ch0_bufgtdiv_UNCONNECTED[11:0]),
        .ch0_bufgtrst(NLW_inst_ch0_bufgtrst_UNCONNECTED),
        .ch0_bufgtrstmask(NLW_inst_ch0_bufgtrstmask_UNCONNECTED[3:0]),
        .ch0_cdrbmcdrreq(ch0_cdrbmcdrreq),
        .ch0_cdrfreqos(ch0_cdrfreqos),
        .ch0_cdrincpctrl(ch0_cdrincpctrl),
        .ch0_cdrstepdir(ch0_cdrstepdir),
        .ch0_cdrstepsq(ch0_cdrstepsq),
        .ch0_cdrstepsx(ch0_cdrstepsx),
        .ch0_clkrsvd0(1'b0),
        .ch0_clkrsvd1(1'b0),
        .ch0_dfehold(ch0_dfehold),
        .ch0_dfeovrd(ch0_dfeovrd),
        .ch0_dmonfiforeset(1'b0),
        .ch0_dmonitorclk(1'b0),
        .ch0_dmonitorout(NLW_inst_ch0_dmonitorout_UNCONNECTED[31:0]),
        .ch0_dmonitoroutclk(NLW_inst_ch0_dmonitoroutclk_UNCONNECTED),
        .ch0_eyescandataerror(ch0_eyescandataerror),
        .ch0_eyescanreset(ch0_eyescanreset),
        .ch0_eyescantrigger(ch0_eyescantrigger),
        .ch0_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch0_gtrxreset(ch0_gtrxreset),
        .ch0_gttxreset(ch0_gttxreset),
        .ch0_hsdppcsreset(1'b0),
        .ch0_iloreset(1'b0),
        .ch0_iloresetdone(NLW_inst_ch0_iloresetdone_UNCONNECTED),
        .ch0_iloresetmask(1'b1),
        .ch0_loopback(ch0_loopback),
        .ch0_pcierstb(1'b1),
        .ch0_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch0_pcsrsvdout(NLW_inst_ch0_pcsrsvdout_UNCONNECTED[15:0]),
        .ch0_phyesmadaptsave(1'b0),
        .ch0_phyready(NLW_inst_ch0_phyready_UNCONNECTED),
        .ch0_phystatus(NLW_inst_ch0_phystatus_UNCONNECTED),
        .ch0_pinrsvdas(NLW_inst_ch0_pinrsvdas_UNCONNECTED[15:0]),
        .ch0_refdebugout(ch0_refdebugout),
        .ch0_resetexception(NLW_inst_ch0_resetexception_UNCONNECTED),
        .ch0_rx10gstat(ch0_rx10gstat),
        .ch0_rxbufstatus(ch0_rxbufstatus),
        .ch0_rxbyteisaligned(ch0_rxbyteisaligned),
        .ch0_rxbyterealign(ch0_rxbyterealign),
        .ch0_rxcdrhold(ch0_rxcdrhold),
        .ch0_rxcdrlock(ch0_rxcdrlock),
        .ch0_rxcdrovrden(ch0_rxcdrovrden),
        .ch0_rxcdrphdone(ch0_rxcdrphdone),
        .ch0_rxcdrreset(ch0_rxcdrreset),
        .ch0_rxchanbondseq(ch0_rxchanbondseq),
        .ch0_rxchanisaligned(ch0_rxchanisaligned),
        .ch0_rxchanrealign(ch0_rxchanrealign),
        .ch0_rxchbondi(ch0_rxchbondi),
        .ch0_rxchbondo(ch0_rxchbondo),
        .ch0_rxclkcorcnt(ch0_rxclkcorcnt),
        .ch0_rxcominitdet(ch0_rxcominitdet),
        .ch0_rxcommadet(ch0_rxcommadet),
        .ch0_rxcomsasdet(ch0_rxcomsasdet),
        .ch0_rxcomwakedet(ch0_rxcomwakedet),
        .ch0_rxctrl0(ch0_rxctrl0),
        .ch0_rxctrl1(ch0_rxctrl1),
        .ch0_rxctrl2(ch0_rxctrl2),
        .ch0_rxctrl3(ch0_rxctrl3),
        .ch0_rxdapicodeovrden(ch0_rxdapicodeovrden),
        .ch0_rxdapicodereset(ch0_rxdapicodereset),
        .ch0_rxdapireset(ch0_rxdapireset),
        .ch0_rxdapiresetdone(ch0_rxdapiresetdone),
        .ch0_rxdapiresetmask(ch0_rxdapiresetmask),
        .ch0_rxdata(ch0_rxdata),
        .ch0_rxdatavalid(ch0_rxdatavalid),
        .ch0_rxdebugpcsout(ch0_rxdebugpcsout),
        .ch0_rxdlyalignerr(ch0_rxdlyalignerr),
        .ch0_rxdlyalignprog(ch0_rxdlyalignprog),
        .ch0_rxdlyalignreq(ch0_rxdlyalignreq),
        .ch0_rxelecidle(ch0_rxelecidle),
        .ch0_rxeqtraining(ch0_rxeqtraining),
        .ch0_rxfinealigndone(ch0_rxfinealigndone),
        .ch0_rxgearboxslip(ch0_rxgearboxslip),
        .ch0_rxheader(ch0_rxheader),
        .ch0_rxheadervalid(ch0_rxheadervalid),
        .ch0_rxlatclk(ch0_rxlatclk),
        .ch0_rxlpmen(ch0_rxlpmen),
        .ch0_rxmldchaindone(ch0_rxmldchaindone),
        .ch0_rxmldchainreq(ch0_rxmldchainreq),
        .ch0_rxmlfinealignreq(ch0_rxmlfinealignreq),
        .ch0_rxmstdatapathreset(ch0_rxmstdatapathreset),
        .ch0_rxmstreset(ch0_rxmstreset),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .ch0_rxoobreset(ch0_rxoobreset),
        .ch0_rxosintdone(ch0_rxosintdone),
        .ch0_rxoutclk(ch0_rxoutclk),
        .ch0_rxpcsresetmask(ch0_rxpcsresetmask),
        .ch0_rxpd(ch0_rxpd),
        .ch0_rxphaligndone(ch0_rxphaligndone),
        .ch0_rxphalignerr(ch0_rxphalignerr),
        .ch0_rxphalignreq(ch0_rxphalignreq),
        .ch0_rxphalignresetmask(ch0_rxphalignresetmask),
        .ch0_rxphdlypd(ch0_rxphdlypd),
        .ch0_rxphdlyreset(ch0_rxphdlyreset),
        .ch0_rxphdlyresetdone(ch0_rxphdlyresetdone),
        .ch0_rxphsetinitdone(ch0_rxphsetinitdone),
        .ch0_rxphsetinitreq(ch0_rxphsetinitreq),
        .ch0_rxphshift180(ch0_rxphshift180),
        .ch0_rxphshift180done(ch0_rxphshift180done),
        .ch0_rxpkdet(ch0_rxpkdet),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .ch0_rxpmaresetmask(ch0_rxpmaresetmask),
        .ch0_rxpolarity(ch0_rxpolarity),
        .ch0_rxprbscntreset(ch0_rxprbscntreset),
        .ch0_rxprbserr(ch0_rxprbserr),
        .ch0_rxprbslocked(ch0_rxprbslocked),
        .ch0_rxprbssel(ch0_rxprbssel),
        .ch0_rxprogdivreset(ch0_rxprogdivreset),
        .ch0_rxprogdivresetdone(ch0_rxprogdivresetdone),
        .ch0_rxqpien(ch0_rxqpien),
        .ch0_rxqpisenn(ch0_rxqpisenn),
        .ch0_rxqpisenp(ch0_rxqpisenp),
        .ch0_rxrate(ch0_rxrate),
        .ch0_rxresetdone(ch0_rxresetdone),
        .ch0_rxresetmode(ch0_rxresetmode),
        .ch0_rxsimplexphystatus(ch0_rxsimplexphystatus),
        .ch0_rxslide(ch0_rxslide),
        .ch0_rxsliderdy(ch0_rxsliderdy),
        .ch0_rxslipdone(ch0_rxslipdone),
        .ch0_rxstartofseq(ch0_rxstartofseq),
        .ch0_rxstatus(ch0_rxstatus),
        .ch0_rxsyncallin(ch0_rxsyncallin),
        .ch0_rxsyncdone(ch0_rxsyncdone),
        .ch0_rxtermination(ch0_rxtermination),
        .ch0_rxuserrdy(ch0_rxuserrdy),
        .ch0_rxusrclk(ch0_rxusrclk),
        .ch0_rxvalid(ch0_rxvalid),
        .ch0_tx10gstat(ch0_tx10gstat),
        .ch0_txbufstatus(ch0_txbufstatus),
        .ch0_txcomfinish(ch0_txcomfinish),
        .ch0_txcominit(ch0_txcominit),
        .ch0_txcomsas(ch0_txcomsas),
        .ch0_txcomwake(ch0_txcomwake),
        .ch0_txctrl0(ch0_txctrl0),
        .ch0_txctrl1(ch0_txctrl1),
        .ch0_txctrl2(ch0_txctrl2),
        .ch0_txdapicodeovrden(ch0_txdapicodeovrden),
        .ch0_txdapicodereset(ch0_txdapicodereset),
        .ch0_txdapireset(ch0_txdapireset),
        .ch0_txdapiresetdone(ch0_txdapiresetdone),
        .ch0_txdapiresetmask(ch0_txdapiresetmask),
        .ch0_txdata(ch0_txdata),
        .ch0_txdccdone(ch0_txdccdone),
        .ch0_txdebugpcsout(ch0_txdebugpcsout),
        .ch0_txdeemph(ch0_txdeemph),
        .ch0_txdetectrx(ch0_txdetectrx),
        .ch0_txdiffctrl(ch0_txdiffctrl),
        .ch0_txdlyalignerr(ch0_txdlyalignerr),
        .ch0_txdlyalignprog(ch0_txdlyalignprog),
        .ch0_txdlyalignreq(ch0_txdlyalignreq),
        .ch0_txelecidle(ch0_txelecidle),
        .ch0_txheader(ch0_txheader),
        .ch0_txinhibit(ch0_txinhibit),
        .ch0_txlatclk(ch0_txlatclk),
        .ch0_txmaincursor(ch0_txmaincursor),
        .ch0_txmargin(ch0_txmargin),
        .ch0_txmldchaindone(ch0_txmldchaindone),
        .ch0_txmldchainreq(ch0_txmldchainreq),
        .ch0_txmstdatapathreset(ch0_txmstdatapathreset),
        .ch0_txmstreset(ch0_txmstreset),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .ch0_txoneszeros(ch0_txoneszeros),
        .ch0_txoutclk(ch0_txoutclk),
        .ch0_txpausedelayalign(ch0_txpausedelayalign),
        .ch0_txpcsresetmask(ch0_txpcsresetmask),
        .ch0_txpd(ch0_txpd),
        .ch0_txphaligndone(ch0_txphaligndone),
        .ch0_txphalignerr(ch0_txphalignerr),
        .ch0_txphalignoutrsvd(ch0_txphalignoutrsvd),
        .ch0_txphalignreq(ch0_txphalignreq),
        .ch0_txphalignresetmask(ch0_txphalignresetmask),
        .ch0_txphdlypd(ch0_txphdlypd),
        .ch0_txphdlyreset(ch0_txphdlyreset),
        .ch0_txphdlyresetdone(ch0_txphdlyresetdone),
        .ch0_txphdlytstclk(ch0_txphdlytstclk),
        .ch0_txphsetinitdone(ch0_txphsetinitdone),
        .ch0_txphsetinitreq(ch0_txphsetinitreq),
        .ch0_txphshift180(ch0_txphshift180),
        .ch0_txphshift180done(ch0_txphshift180done),
        .ch0_txpicodeovrden(ch0_txpicodeovrden),
        .ch0_txpicodereset(ch0_txpicodereset),
        .ch0_txpippmen(ch0_txpippmen),
        .ch0_txpippmstepsize(ch0_txpippmstepsize),
        .ch0_txpisopd(ch0_txpisopd),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .ch0_txpmaresetmask(ch0_txpmaresetmask),
        .ch0_txpolarity(ch0_txpolarity),
        .ch0_txpostcursor(ch0_txpostcursor),
        .ch0_txprbsforceerr(ch0_txprbsforceerr),
        .ch0_txprbssel(ch0_txprbssel),
        .ch0_txprecursor(ch0_txprecursor),
        .ch0_txprogdivreset(ch0_txprogdivreset),
        .ch0_txprogdivresetdone(ch0_txprogdivresetdone),
        .ch0_txqpibiasen(ch0_txqpibiasen),
        .ch0_txqpisenn(ch0_txqpisenn),
        .ch0_txqpisenp(ch0_txqpisenp),
        .ch0_txqpiweakpu(ch0_txqpiweakpu),
        .ch0_txrate(ch0_txrate),
        .ch0_txresetdone(ch0_txresetdone),
        .ch0_txresetmode(ch0_txresetmode),
        .ch0_txsequence(ch0_txsequence),
        .ch0_txsimplexphystatus(NLW_inst_ch0_txsimplexphystatus_UNCONNECTED),
        .ch0_txswing(ch0_txswing),
        .ch0_txswingouthigh(ch0_txswingouthigh),
        .ch0_txswingoutlow(ch0_txswingoutlow),
        .ch0_txsyncallin(ch0_txsyncallin),
        .ch0_txsyncdone(ch0_txsyncdone),
        .ch0_txuserrdy(ch0_txuserrdy),
        .ch0_txusrclk(ch0_txusrclk),
        .ch0_xpipe5_pipeline_en(NLW_inst_ch0_xpipe5_pipeline_en_UNCONNECTED),
        .ch1_bufgtce(NLW_inst_ch1_bufgtce_UNCONNECTED),
        .ch1_bufgtcemask(NLW_inst_ch1_bufgtcemask_UNCONNECTED[3:0]),
        .ch1_bufgtdiv(NLW_inst_ch1_bufgtdiv_UNCONNECTED[11:0]),
        .ch1_bufgtrst(NLW_inst_ch1_bufgtrst_UNCONNECTED),
        .ch1_bufgtrstmask(NLW_inst_ch1_bufgtrstmask_UNCONNECTED[3:0]),
        .ch1_cdrbmcdrreq(1'b0),
        .ch1_cdrfreqos(1'b0),
        .ch1_cdrincpctrl(1'b0),
        .ch1_cdrstepdir(1'b0),
        .ch1_cdrstepsq(1'b0),
        .ch1_cdrstepsx(1'b0),
        .ch1_clkrsvd0(1'b0),
        .ch1_clkrsvd1(1'b0),
        .ch1_dfehold(1'b0),
        .ch1_dfeovrd(1'b0),
        .ch1_dmonfiforeset(1'b0),
        .ch1_dmonitorclk(1'b0),
        .ch1_dmonitorout(NLW_inst_ch1_dmonitorout_UNCONNECTED[31:0]),
        .ch1_dmonitoroutclk(NLW_inst_ch1_dmonitoroutclk_UNCONNECTED),
        .ch1_eyescandataerror(NLW_inst_ch1_eyescandataerror_UNCONNECTED),
        .ch1_eyescanreset(1'b0),
        .ch1_eyescantrigger(1'b0),
        .ch1_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_gtrxreset(1'b0),
        .ch1_gttxreset(1'b0),
        .ch1_hsdppcsreset(1'b0),
        .ch1_iloreset(1'b0),
        .ch1_iloresetdone(NLW_inst_ch1_iloresetdone_UNCONNECTED),
        .ch1_iloresetmask(1'b1),
        .ch1_loopback({1'b0,1'b0,1'b0}),
        .ch1_pcierstb(1'b1),
        .ch1_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_pcsrsvdout(NLW_inst_ch1_pcsrsvdout_UNCONNECTED[15:0]),
        .ch1_phyesmadaptsave(1'b0),
        .ch1_phyready(NLW_inst_ch1_phyready_UNCONNECTED),
        .ch1_phystatus(NLW_inst_ch1_phystatus_UNCONNECTED),
        .ch1_pinrsvdas(NLW_inst_ch1_pinrsvdas_UNCONNECTED[15:0]),
        .ch1_refdebugout(NLW_inst_ch1_refdebugout_UNCONNECTED[1:0]),
        .ch1_resetexception(NLW_inst_ch1_resetexception_UNCONNECTED),
        .ch1_rx10gstat(NLW_inst_ch1_rx10gstat_UNCONNECTED[7:0]),
        .ch1_rxbufstatus(NLW_inst_ch1_rxbufstatus_UNCONNECTED[2:0]),
        .ch1_rxbyteisaligned(NLW_inst_ch1_rxbyteisaligned_UNCONNECTED),
        .ch1_rxbyterealign(NLW_inst_ch1_rxbyterealign_UNCONNECTED),
        .ch1_rxcdrhold(1'b0),
        .ch1_rxcdrlock(NLW_inst_ch1_rxcdrlock_UNCONNECTED),
        .ch1_rxcdrovrden(1'b0),
        .ch1_rxcdrphdone(NLW_inst_ch1_rxcdrphdone_UNCONNECTED),
        .ch1_rxcdrreset(1'b0),
        .ch1_rxchanbondseq(NLW_inst_ch1_rxchanbondseq_UNCONNECTED),
        .ch1_rxchanisaligned(NLW_inst_ch1_rxchanisaligned_UNCONNECTED),
        .ch1_rxchanrealign(NLW_inst_ch1_rxchanrealign_UNCONNECTED),
        .ch1_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxchbondo(NLW_inst_ch1_rxchbondo_UNCONNECTED[4:0]),
        .ch1_rxclkcorcnt(NLW_inst_ch1_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch1_rxcominitdet(NLW_inst_ch1_rxcominitdet_UNCONNECTED),
        .ch1_rxcommadet(NLW_inst_ch1_rxcommadet_UNCONNECTED),
        .ch1_rxcomsasdet(NLW_inst_ch1_rxcomsasdet_UNCONNECTED),
        .ch1_rxcomwakedet(NLW_inst_ch1_rxcomwakedet_UNCONNECTED),
        .ch1_rxctrl0(NLW_inst_ch1_rxctrl0_UNCONNECTED[15:0]),
        .ch1_rxctrl1(NLW_inst_ch1_rxctrl1_UNCONNECTED[15:0]),
        .ch1_rxctrl2(NLW_inst_ch1_rxctrl2_UNCONNECTED[7:0]),
        .ch1_rxctrl3(NLW_inst_ch1_rxctrl3_UNCONNECTED[7:0]),
        .ch1_rxdapicodeovrden(1'b0),
        .ch1_rxdapicodereset(1'b0),
        .ch1_rxdapireset(1'b0),
        .ch1_rxdapiresetdone(NLW_inst_ch1_rxdapiresetdone_UNCONNECTED),
        .ch1_rxdapiresetmask({1'b0,1'b0}),
        .ch1_rxdata(NLW_inst_ch1_rxdata_UNCONNECTED[127:0]),
        .ch1_rxdatavalid(NLW_inst_ch1_rxdatavalid_UNCONNECTED[1:0]),
        .ch1_rxdebugpcsout(NLW_inst_ch1_rxdebugpcsout_UNCONNECTED),
        .ch1_rxdlyalignerr(NLW_inst_ch1_rxdlyalignerr_UNCONNECTED),
        .ch1_rxdlyalignprog(NLW_inst_ch1_rxdlyalignprog_UNCONNECTED),
        .ch1_rxdlyalignreq(1'b0),
        .ch1_rxelecidle(NLW_inst_ch1_rxelecidle_UNCONNECTED),
        .ch1_rxeqtraining(1'b0),
        .ch1_rxfinealigndone(NLW_inst_ch1_rxfinealigndone_UNCONNECTED),
        .ch1_rxgearboxslip(1'b0),
        .ch1_rxheader(NLW_inst_ch1_rxheader_UNCONNECTED[5:0]),
        .ch1_rxheadervalid(NLW_inst_ch1_rxheadervalid_UNCONNECTED[1:0]),
        .ch1_rxlatclk(1'b0),
        .ch1_rxlpmen(1'b0),
        .ch1_rxmldchaindone(1'b0),
        .ch1_rxmldchainreq(1'b0),
        .ch1_rxmlfinealignreq(1'b0),
        .ch1_rxmstdatapathreset(1'b0),
        .ch1_rxmstreset(1'b0),
        .ch1_rxmstresetdone(NLW_inst_ch1_rxmstresetdone_UNCONNECTED),
        .ch1_rxoobreset(1'b0),
        .ch1_rxosintdone(NLW_inst_ch1_rxosintdone_UNCONNECTED),
        .ch1_rxoutclk(NLW_inst_ch1_rxoutclk_UNCONNECTED),
        .ch1_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch1_rxpd({1'b0,1'b0}),
        .ch1_rxphaligndone(NLW_inst_ch1_rxphaligndone_UNCONNECTED),
        .ch1_rxphalignerr(NLW_inst_ch1_rxphalignerr_UNCONNECTED),
        .ch1_rxphalignreq(1'b0),
        .ch1_rxphalignresetmask({1'b1,1'b1}),
        .ch1_rxphdlypd(1'b0),
        .ch1_rxphdlyreset(1'b0),
        .ch1_rxphdlyresetdone(NLW_inst_ch1_rxphdlyresetdone_UNCONNECTED),
        .ch1_rxphsetinitdone(NLW_inst_ch1_rxphsetinitdone_UNCONNECTED),
        .ch1_rxphsetinitreq(1'b0),
        .ch1_rxphshift180(1'b0),
        .ch1_rxphshift180done(NLW_inst_ch1_rxphshift180done_UNCONNECTED),
        .ch1_rxpkdet(NLW_inst_ch1_rxpkdet_UNCONNECTED),
        .ch1_rxpmaresetdone(NLW_inst_ch1_rxpmaresetdone_UNCONNECTED),
        .ch1_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch1_rxpolarity(1'b0),
        .ch1_rxprbscntreset(1'b0),
        .ch1_rxprbserr(NLW_inst_ch1_rxprbserr_UNCONNECTED),
        .ch1_rxprbslocked(NLW_inst_ch1_rxprbslocked_UNCONNECTED),
        .ch1_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxprogdivreset(1'b0),
        .ch1_rxprogdivresetdone(NLW_inst_ch1_rxprogdivresetdone_UNCONNECTED),
        .ch1_rxqpien(1'b0),
        .ch1_rxqpisenn(NLW_inst_ch1_rxqpisenn_UNCONNECTED),
        .ch1_rxqpisenp(NLW_inst_ch1_rxqpisenp_UNCONNECTED),
        .ch1_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxresetdone(NLW_inst_ch1_rxresetdone_UNCONNECTED),
        .ch1_rxresetmode({1'b0,1'b0}),
        .ch1_rxsimplexphystatus(NLW_inst_ch1_rxsimplexphystatus_UNCONNECTED),
        .ch1_rxslide(1'b0),
        .ch1_rxsliderdy(NLW_inst_ch1_rxsliderdy_UNCONNECTED),
        .ch1_rxslipdone(NLW_inst_ch1_rxslipdone_UNCONNECTED),
        .ch1_rxstartofseq(NLW_inst_ch1_rxstartofseq_UNCONNECTED[1:0]),
        .ch1_rxstatus(NLW_inst_ch1_rxstatus_UNCONNECTED[2:0]),
        .ch1_rxsyncallin(1'b0),
        .ch1_rxsyncdone(NLW_inst_ch1_rxsyncdone_UNCONNECTED),
        .ch1_rxtermination(1'b0),
        .ch1_rxuserrdy(1'b0),
        .ch1_rxusrclk(1'b0),
        .ch1_rxvalid(NLW_inst_ch1_rxvalid_UNCONNECTED),
        .ch1_tx10gstat(NLW_inst_ch1_tx10gstat_UNCONNECTED),
        .ch1_txbufstatus(NLW_inst_ch1_txbufstatus_UNCONNECTED[1:0]),
        .ch1_txcomfinish(NLW_inst_ch1_txcomfinish_UNCONNECTED),
        .ch1_txcominit(1'b0),
        .ch1_txcomsas(1'b0),
        .ch1_txcomwake(1'b0),
        .ch1_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txdapicodeovrden(1'b0),
        .ch1_txdapicodereset(1'b0),
        .ch1_txdapireset(1'b0),
        .ch1_txdapiresetdone(NLW_inst_ch1_txdapiresetdone_UNCONNECTED),
        .ch1_txdapiresetmask({1'b0,1'b0}),
        .ch1_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txdccdone(NLW_inst_ch1_txdccdone_UNCONNECTED),
        .ch1_txdebugpcsout(NLW_inst_ch1_txdebugpcsout_UNCONNECTED),
        .ch1_txdeemph({1'b0,1'b0}),
        .ch1_txdetectrx(1'b0),
        .ch1_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch1_txdlyalignerr(NLW_inst_ch1_txdlyalignerr_UNCONNECTED),
        .ch1_txdlyalignprog(NLW_inst_ch1_txdlyalignprog_UNCONNECTED),
        .ch1_txdlyalignreq(1'b0),
        .ch1_txelecidle(1'b0),
        .ch1_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txinhibit(1'b0),
        .ch1_txlatclk(1'b0),
        .ch1_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch1_txmargin({1'b0,1'b0,1'b0}),
        .ch1_txmldchaindone(1'b0),
        .ch1_txmldchainreq(1'b0),
        .ch1_txmstdatapathreset(1'b0),
        .ch1_txmstreset(1'b0),
        .ch1_txmstresetdone(NLW_inst_ch1_txmstresetdone_UNCONNECTED),
        .ch1_txoneszeros(1'b0),
        .ch1_txoutclk(NLW_inst_ch1_txoutclk_UNCONNECTED),
        .ch1_txpausedelayalign(1'b0),
        .ch1_txpcsresetmask(1'b1),
        .ch1_txpd({1'b0,1'b0}),
        .ch1_txphaligndone(NLW_inst_ch1_txphaligndone_UNCONNECTED),
        .ch1_txphalignerr(NLW_inst_ch1_txphalignerr_UNCONNECTED),
        .ch1_txphalignoutrsvd(NLW_inst_ch1_txphalignoutrsvd_UNCONNECTED),
        .ch1_txphalignreq(1'b0),
        .ch1_txphalignresetmask({1'b1,1'b1}),
        .ch1_txphdlypd(1'b0),
        .ch1_txphdlyreset(1'b0),
        .ch1_txphdlyresetdone(NLW_inst_ch1_txphdlyresetdone_UNCONNECTED),
        .ch1_txphdlytstclk(1'b0),
        .ch1_txphsetinitdone(NLW_inst_ch1_txphsetinitdone_UNCONNECTED),
        .ch1_txphsetinitreq(1'b0),
        .ch1_txphshift180(1'b0),
        .ch1_txphshift180done(NLW_inst_ch1_txphshift180done_UNCONNECTED),
        .ch1_txpicodeovrden(1'b0),
        .ch1_txpicodereset(1'b0),
        .ch1_txpippmen(1'b0),
        .ch1_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txpisopd(1'b0),
        .ch1_txpmaresetdone(NLW_inst_ch1_txpmaresetdone_UNCONNECTED),
        .ch1_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch1_txpolarity(1'b0),
        .ch1_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprbsforceerr(1'b0),
        .ch1_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprogdivreset(1'b0),
        .ch1_txprogdivresetdone(NLW_inst_ch1_txprogdivresetdone_UNCONNECTED),
        .ch1_txqpibiasen(1'b0),
        .ch1_txqpisenn(NLW_inst_ch1_txqpisenn_UNCONNECTED),
        .ch1_txqpisenp(NLW_inst_ch1_txqpisenp_UNCONNECTED),
        .ch1_txqpiweakpu(1'b0),
        .ch1_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txresetdone(NLW_inst_ch1_txresetdone_UNCONNECTED),
        .ch1_txresetmode({1'b0,1'b0}),
        .ch1_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txsimplexphystatus(NLW_inst_ch1_txsimplexphystatus_UNCONNECTED),
        .ch1_txswing(1'b0),
        .ch1_txswingouthigh(NLW_inst_ch1_txswingouthigh_UNCONNECTED),
        .ch1_txswingoutlow(NLW_inst_ch1_txswingoutlow_UNCONNECTED),
        .ch1_txsyncallin(1'b0),
        .ch1_txsyncdone(NLW_inst_ch1_txsyncdone_UNCONNECTED),
        .ch1_txuserrdy(1'b0),
        .ch1_txusrclk(1'b0),
        .ch1_xpipe5_pipeline_en(NLW_inst_ch1_xpipe5_pipeline_en_UNCONNECTED),
        .ch2_bufgtce(NLW_inst_ch2_bufgtce_UNCONNECTED),
        .ch2_bufgtcemask(NLW_inst_ch2_bufgtcemask_UNCONNECTED[3:0]),
        .ch2_bufgtdiv(NLW_inst_ch2_bufgtdiv_UNCONNECTED[11:0]),
        .ch2_bufgtrst(NLW_inst_ch2_bufgtrst_UNCONNECTED),
        .ch2_bufgtrstmask(NLW_inst_ch2_bufgtrstmask_UNCONNECTED[3:0]),
        .ch2_cdrbmcdrreq(1'b0),
        .ch2_cdrfreqos(1'b0),
        .ch2_cdrincpctrl(1'b0),
        .ch2_cdrstepdir(1'b0),
        .ch2_cdrstepsq(1'b0),
        .ch2_cdrstepsx(1'b0),
        .ch2_clkrsvd0(1'b0),
        .ch2_clkrsvd1(1'b0),
        .ch2_dfehold(1'b0),
        .ch2_dfeovrd(1'b0),
        .ch2_dmonfiforeset(1'b0),
        .ch2_dmonitorclk(1'b0),
        .ch2_dmonitorout(NLW_inst_ch2_dmonitorout_UNCONNECTED[31:0]),
        .ch2_dmonitoroutclk(NLW_inst_ch2_dmonitoroutclk_UNCONNECTED),
        .ch2_eyescandataerror(NLW_inst_ch2_eyescandataerror_UNCONNECTED),
        .ch2_eyescanreset(1'b0),
        .ch2_eyescantrigger(1'b0),
        .ch2_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_gtrxreset(1'b0),
        .ch2_gttxreset(1'b0),
        .ch2_hsdppcsreset(1'b0),
        .ch2_iloreset(1'b0),
        .ch2_iloresetdone(NLW_inst_ch2_iloresetdone_UNCONNECTED),
        .ch2_iloresetmask(1'b1),
        .ch2_loopback({1'b0,1'b0,1'b0}),
        .ch2_pcierstb(1'b1),
        .ch2_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_pcsrsvdout(NLW_inst_ch2_pcsrsvdout_UNCONNECTED[15:0]),
        .ch2_phyesmadaptsave(1'b0),
        .ch2_phyready(NLW_inst_ch2_phyready_UNCONNECTED),
        .ch2_phystatus(NLW_inst_ch2_phystatus_UNCONNECTED),
        .ch2_pinrsvdas(NLW_inst_ch2_pinrsvdas_UNCONNECTED[15:0]),
        .ch2_refdebugout(NLW_inst_ch2_refdebugout_UNCONNECTED[1:0]),
        .ch2_resetexception(NLW_inst_ch2_resetexception_UNCONNECTED),
        .ch2_rx10gstat(NLW_inst_ch2_rx10gstat_UNCONNECTED[7:0]),
        .ch2_rxbufstatus(NLW_inst_ch2_rxbufstatus_UNCONNECTED[2:0]),
        .ch2_rxbyteisaligned(NLW_inst_ch2_rxbyteisaligned_UNCONNECTED),
        .ch2_rxbyterealign(NLW_inst_ch2_rxbyterealign_UNCONNECTED),
        .ch2_rxcdrhold(1'b0),
        .ch2_rxcdrlock(NLW_inst_ch2_rxcdrlock_UNCONNECTED),
        .ch2_rxcdrovrden(1'b0),
        .ch2_rxcdrphdone(NLW_inst_ch2_rxcdrphdone_UNCONNECTED),
        .ch2_rxcdrreset(1'b0),
        .ch2_rxchanbondseq(NLW_inst_ch2_rxchanbondseq_UNCONNECTED),
        .ch2_rxchanisaligned(NLW_inst_ch2_rxchanisaligned_UNCONNECTED),
        .ch2_rxchanrealign(NLW_inst_ch2_rxchanrealign_UNCONNECTED),
        .ch2_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxchbondo(NLW_inst_ch2_rxchbondo_UNCONNECTED[4:0]),
        .ch2_rxclkcorcnt(NLW_inst_ch2_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch2_rxcominitdet(NLW_inst_ch2_rxcominitdet_UNCONNECTED),
        .ch2_rxcommadet(NLW_inst_ch2_rxcommadet_UNCONNECTED),
        .ch2_rxcomsasdet(NLW_inst_ch2_rxcomsasdet_UNCONNECTED),
        .ch2_rxcomwakedet(NLW_inst_ch2_rxcomwakedet_UNCONNECTED),
        .ch2_rxctrl0(NLW_inst_ch2_rxctrl0_UNCONNECTED[15:0]),
        .ch2_rxctrl1(NLW_inst_ch2_rxctrl1_UNCONNECTED[15:0]),
        .ch2_rxctrl2(NLW_inst_ch2_rxctrl2_UNCONNECTED[7:0]),
        .ch2_rxctrl3(NLW_inst_ch2_rxctrl3_UNCONNECTED[7:0]),
        .ch2_rxdapicodeovrden(1'b0),
        .ch2_rxdapicodereset(1'b0),
        .ch2_rxdapireset(1'b0),
        .ch2_rxdapiresetdone(NLW_inst_ch2_rxdapiresetdone_UNCONNECTED),
        .ch2_rxdapiresetmask({1'b0,1'b0}),
        .ch2_rxdata(NLW_inst_ch2_rxdata_UNCONNECTED[127:0]),
        .ch2_rxdatavalid(NLW_inst_ch2_rxdatavalid_UNCONNECTED[1:0]),
        .ch2_rxdebugpcsout(NLW_inst_ch2_rxdebugpcsout_UNCONNECTED),
        .ch2_rxdlyalignerr(NLW_inst_ch2_rxdlyalignerr_UNCONNECTED),
        .ch2_rxdlyalignprog(NLW_inst_ch2_rxdlyalignprog_UNCONNECTED),
        .ch2_rxdlyalignreq(1'b0),
        .ch2_rxelecidle(NLW_inst_ch2_rxelecidle_UNCONNECTED),
        .ch2_rxeqtraining(1'b0),
        .ch2_rxfinealigndone(NLW_inst_ch2_rxfinealigndone_UNCONNECTED),
        .ch2_rxgearboxslip(1'b0),
        .ch2_rxheader(NLW_inst_ch2_rxheader_UNCONNECTED[5:0]),
        .ch2_rxheadervalid(NLW_inst_ch2_rxheadervalid_UNCONNECTED[1:0]),
        .ch2_rxlatclk(1'b0),
        .ch2_rxlpmen(1'b0),
        .ch2_rxmldchaindone(1'b0),
        .ch2_rxmldchainreq(1'b0),
        .ch2_rxmlfinealignreq(1'b0),
        .ch2_rxmstdatapathreset(1'b0),
        .ch2_rxmstreset(1'b0),
        .ch2_rxmstresetdone(NLW_inst_ch2_rxmstresetdone_UNCONNECTED),
        .ch2_rxoobreset(1'b0),
        .ch2_rxosintdone(NLW_inst_ch2_rxosintdone_UNCONNECTED),
        .ch2_rxoutclk(NLW_inst_ch2_rxoutclk_UNCONNECTED),
        .ch2_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch2_rxpd({1'b0,1'b0}),
        .ch2_rxphaligndone(NLW_inst_ch2_rxphaligndone_UNCONNECTED),
        .ch2_rxphalignerr(NLW_inst_ch2_rxphalignerr_UNCONNECTED),
        .ch2_rxphalignreq(1'b0),
        .ch2_rxphalignresetmask({1'b1,1'b1}),
        .ch2_rxphdlypd(1'b0),
        .ch2_rxphdlyreset(1'b0),
        .ch2_rxphdlyresetdone(NLW_inst_ch2_rxphdlyresetdone_UNCONNECTED),
        .ch2_rxphsetinitdone(NLW_inst_ch2_rxphsetinitdone_UNCONNECTED),
        .ch2_rxphsetinitreq(1'b0),
        .ch2_rxphshift180(1'b0),
        .ch2_rxphshift180done(NLW_inst_ch2_rxphshift180done_UNCONNECTED),
        .ch2_rxpkdet(NLW_inst_ch2_rxpkdet_UNCONNECTED),
        .ch2_rxpmaresetdone(NLW_inst_ch2_rxpmaresetdone_UNCONNECTED),
        .ch2_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch2_rxpolarity(1'b0),
        .ch2_rxprbscntreset(1'b0),
        .ch2_rxprbserr(NLW_inst_ch2_rxprbserr_UNCONNECTED),
        .ch2_rxprbslocked(NLW_inst_ch2_rxprbslocked_UNCONNECTED),
        .ch2_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxprogdivreset(1'b0),
        .ch2_rxprogdivresetdone(NLW_inst_ch2_rxprogdivresetdone_UNCONNECTED),
        .ch2_rxqpien(1'b0),
        .ch2_rxqpisenn(NLW_inst_ch2_rxqpisenn_UNCONNECTED),
        .ch2_rxqpisenp(NLW_inst_ch2_rxqpisenp_UNCONNECTED),
        .ch2_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxresetdone(NLW_inst_ch2_rxresetdone_UNCONNECTED),
        .ch2_rxresetmode({1'b0,1'b0}),
        .ch2_rxsimplexphystatus(NLW_inst_ch2_rxsimplexphystatus_UNCONNECTED),
        .ch2_rxslide(1'b0),
        .ch2_rxsliderdy(NLW_inst_ch2_rxsliderdy_UNCONNECTED),
        .ch2_rxslipdone(NLW_inst_ch2_rxslipdone_UNCONNECTED),
        .ch2_rxstartofseq(NLW_inst_ch2_rxstartofseq_UNCONNECTED[1:0]),
        .ch2_rxstatus(NLW_inst_ch2_rxstatus_UNCONNECTED[2:0]),
        .ch2_rxsyncallin(1'b0),
        .ch2_rxsyncdone(NLW_inst_ch2_rxsyncdone_UNCONNECTED),
        .ch2_rxtermination(1'b0),
        .ch2_rxuserrdy(1'b0),
        .ch2_rxusrclk(1'b0),
        .ch2_rxvalid(NLW_inst_ch2_rxvalid_UNCONNECTED),
        .ch2_tx10gstat(NLW_inst_ch2_tx10gstat_UNCONNECTED),
        .ch2_txbufstatus(NLW_inst_ch2_txbufstatus_UNCONNECTED[1:0]),
        .ch2_txcomfinish(NLW_inst_ch2_txcomfinish_UNCONNECTED),
        .ch2_txcominit(1'b0),
        .ch2_txcomsas(1'b0),
        .ch2_txcomwake(1'b0),
        .ch2_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txdapicodeovrden(1'b0),
        .ch2_txdapicodereset(1'b0),
        .ch2_txdapireset(1'b0),
        .ch2_txdapiresetdone(NLW_inst_ch2_txdapiresetdone_UNCONNECTED),
        .ch2_txdapiresetmask({1'b0,1'b0}),
        .ch2_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txdccdone(NLW_inst_ch2_txdccdone_UNCONNECTED),
        .ch2_txdebugpcsout(NLW_inst_ch2_txdebugpcsout_UNCONNECTED),
        .ch2_txdeemph({1'b0,1'b0}),
        .ch2_txdetectrx(1'b0),
        .ch2_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch2_txdlyalignerr(NLW_inst_ch2_txdlyalignerr_UNCONNECTED),
        .ch2_txdlyalignprog(NLW_inst_ch2_txdlyalignprog_UNCONNECTED),
        .ch2_txdlyalignreq(1'b0),
        .ch2_txelecidle(1'b0),
        .ch2_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txinhibit(1'b0),
        .ch2_txlatclk(1'b0),
        .ch2_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch2_txmargin({1'b0,1'b0,1'b0}),
        .ch2_txmldchaindone(1'b0),
        .ch2_txmldchainreq(1'b0),
        .ch2_txmstdatapathreset(1'b0),
        .ch2_txmstreset(1'b0),
        .ch2_txmstresetdone(NLW_inst_ch2_txmstresetdone_UNCONNECTED),
        .ch2_txoneszeros(1'b0),
        .ch2_txoutclk(NLW_inst_ch2_txoutclk_UNCONNECTED),
        .ch2_txpausedelayalign(1'b0),
        .ch2_txpcsresetmask(1'b1),
        .ch2_txpd({1'b0,1'b0}),
        .ch2_txphaligndone(NLW_inst_ch2_txphaligndone_UNCONNECTED),
        .ch2_txphalignerr(NLW_inst_ch2_txphalignerr_UNCONNECTED),
        .ch2_txphalignoutrsvd(NLW_inst_ch2_txphalignoutrsvd_UNCONNECTED),
        .ch2_txphalignreq(1'b0),
        .ch2_txphalignresetmask({1'b1,1'b1}),
        .ch2_txphdlypd(1'b0),
        .ch2_txphdlyreset(1'b0),
        .ch2_txphdlyresetdone(NLW_inst_ch2_txphdlyresetdone_UNCONNECTED),
        .ch2_txphdlytstclk(1'b0),
        .ch2_txphsetinitdone(NLW_inst_ch2_txphsetinitdone_UNCONNECTED),
        .ch2_txphsetinitreq(1'b0),
        .ch2_txphshift180(1'b0),
        .ch2_txphshift180done(NLW_inst_ch2_txphshift180done_UNCONNECTED),
        .ch2_txpicodeovrden(1'b0),
        .ch2_txpicodereset(1'b0),
        .ch2_txpippmen(1'b0),
        .ch2_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txpisopd(1'b0),
        .ch2_txpmaresetdone(NLW_inst_ch2_txpmaresetdone_UNCONNECTED),
        .ch2_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch2_txpolarity(1'b0),
        .ch2_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprbsforceerr(1'b0),
        .ch2_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprogdivreset(1'b0),
        .ch2_txprogdivresetdone(NLW_inst_ch2_txprogdivresetdone_UNCONNECTED),
        .ch2_txqpibiasen(1'b0),
        .ch2_txqpisenn(NLW_inst_ch2_txqpisenn_UNCONNECTED),
        .ch2_txqpisenp(NLW_inst_ch2_txqpisenp_UNCONNECTED),
        .ch2_txqpiweakpu(1'b0),
        .ch2_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txresetdone(NLW_inst_ch2_txresetdone_UNCONNECTED),
        .ch2_txresetmode({1'b0,1'b0}),
        .ch2_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txsimplexphystatus(NLW_inst_ch2_txsimplexphystatus_UNCONNECTED),
        .ch2_txswing(1'b0),
        .ch2_txswingouthigh(NLW_inst_ch2_txswingouthigh_UNCONNECTED),
        .ch2_txswingoutlow(NLW_inst_ch2_txswingoutlow_UNCONNECTED),
        .ch2_txsyncallin(1'b0),
        .ch2_txsyncdone(NLW_inst_ch2_txsyncdone_UNCONNECTED),
        .ch2_txuserrdy(1'b0),
        .ch2_txusrclk(1'b0),
        .ch2_xpipe5_pipeline_en(NLW_inst_ch2_xpipe5_pipeline_en_UNCONNECTED),
        .ch3_bufgtce(NLW_inst_ch3_bufgtce_UNCONNECTED),
        .ch3_bufgtcemask(NLW_inst_ch3_bufgtcemask_UNCONNECTED[3:0]),
        .ch3_bufgtdiv(NLW_inst_ch3_bufgtdiv_UNCONNECTED[11:0]),
        .ch3_bufgtrst(NLW_inst_ch3_bufgtrst_UNCONNECTED),
        .ch3_bufgtrstmask(NLW_inst_ch3_bufgtrstmask_UNCONNECTED[3:0]),
        .ch3_cdrbmcdrreq(1'b0),
        .ch3_cdrfreqos(1'b0),
        .ch3_cdrincpctrl(1'b0),
        .ch3_cdrstepdir(1'b0),
        .ch3_cdrstepsq(1'b0),
        .ch3_cdrstepsx(1'b0),
        .ch3_clkrsvd0(1'b0),
        .ch3_clkrsvd1(1'b0),
        .ch3_dfehold(1'b0),
        .ch3_dfeovrd(1'b0),
        .ch3_dmonfiforeset(1'b0),
        .ch3_dmonitorclk(1'b0),
        .ch3_dmonitorout(NLW_inst_ch3_dmonitorout_UNCONNECTED[31:0]),
        .ch3_dmonitoroutclk(NLW_inst_ch3_dmonitoroutclk_UNCONNECTED),
        .ch3_eyescandataerror(NLW_inst_ch3_eyescandataerror_UNCONNECTED),
        .ch3_eyescanreset(1'b0),
        .ch3_eyescantrigger(1'b0),
        .ch3_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_gtrxreset(1'b0),
        .ch3_gttxreset(1'b0),
        .ch3_hsdppcsreset(1'b0),
        .ch3_iloreset(1'b0),
        .ch3_iloresetdone(NLW_inst_ch3_iloresetdone_UNCONNECTED),
        .ch3_iloresetmask(1'b1),
        .ch3_loopback({1'b0,1'b0,1'b0}),
        .ch3_pcierstb(1'b1),
        .ch3_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_pcsrsvdout(NLW_inst_ch3_pcsrsvdout_UNCONNECTED[15:0]),
        .ch3_phyesmadaptsave(1'b0),
        .ch3_phyready(NLW_inst_ch3_phyready_UNCONNECTED),
        .ch3_phystatus(NLW_inst_ch3_phystatus_UNCONNECTED),
        .ch3_pinrsvdas(NLW_inst_ch3_pinrsvdas_UNCONNECTED[15:0]),
        .ch3_refdebugout(NLW_inst_ch3_refdebugout_UNCONNECTED[1:0]),
        .ch3_resetexception(NLW_inst_ch3_resetexception_UNCONNECTED),
        .ch3_rx10gstat(NLW_inst_ch3_rx10gstat_UNCONNECTED[7:0]),
        .ch3_rxbufstatus(NLW_inst_ch3_rxbufstatus_UNCONNECTED[2:0]),
        .ch3_rxbyteisaligned(NLW_inst_ch3_rxbyteisaligned_UNCONNECTED),
        .ch3_rxbyterealign(NLW_inst_ch3_rxbyterealign_UNCONNECTED),
        .ch3_rxcdrhold(1'b0),
        .ch3_rxcdrlock(NLW_inst_ch3_rxcdrlock_UNCONNECTED),
        .ch3_rxcdrovrden(1'b0),
        .ch3_rxcdrphdone(NLW_inst_ch3_rxcdrphdone_UNCONNECTED),
        .ch3_rxcdrreset(1'b0),
        .ch3_rxchanbondseq(NLW_inst_ch3_rxchanbondseq_UNCONNECTED),
        .ch3_rxchanisaligned(NLW_inst_ch3_rxchanisaligned_UNCONNECTED),
        .ch3_rxchanrealign(NLW_inst_ch3_rxchanrealign_UNCONNECTED),
        .ch3_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxchbondo(NLW_inst_ch3_rxchbondo_UNCONNECTED[4:0]),
        .ch3_rxclkcorcnt(NLW_inst_ch3_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch3_rxcominitdet(NLW_inst_ch3_rxcominitdet_UNCONNECTED),
        .ch3_rxcommadet(NLW_inst_ch3_rxcommadet_UNCONNECTED),
        .ch3_rxcomsasdet(NLW_inst_ch3_rxcomsasdet_UNCONNECTED),
        .ch3_rxcomwakedet(NLW_inst_ch3_rxcomwakedet_UNCONNECTED),
        .ch3_rxctrl0(NLW_inst_ch3_rxctrl0_UNCONNECTED[15:0]),
        .ch3_rxctrl1(NLW_inst_ch3_rxctrl1_UNCONNECTED[15:0]),
        .ch3_rxctrl2(NLW_inst_ch3_rxctrl2_UNCONNECTED[7:0]),
        .ch3_rxctrl3(NLW_inst_ch3_rxctrl3_UNCONNECTED[7:0]),
        .ch3_rxdapicodeovrden(1'b0),
        .ch3_rxdapicodereset(1'b0),
        .ch3_rxdapireset(1'b0),
        .ch3_rxdapiresetdone(NLW_inst_ch3_rxdapiresetdone_UNCONNECTED),
        .ch3_rxdapiresetmask({1'b0,1'b0}),
        .ch3_rxdata(NLW_inst_ch3_rxdata_UNCONNECTED[127:0]),
        .ch3_rxdatavalid(NLW_inst_ch3_rxdatavalid_UNCONNECTED[1:0]),
        .ch3_rxdebugpcsout(NLW_inst_ch3_rxdebugpcsout_UNCONNECTED),
        .ch3_rxdlyalignerr(NLW_inst_ch3_rxdlyalignerr_UNCONNECTED),
        .ch3_rxdlyalignprog(NLW_inst_ch3_rxdlyalignprog_UNCONNECTED),
        .ch3_rxdlyalignreq(1'b0),
        .ch3_rxelecidle(NLW_inst_ch3_rxelecidle_UNCONNECTED),
        .ch3_rxeqtraining(1'b0),
        .ch3_rxfinealigndone(NLW_inst_ch3_rxfinealigndone_UNCONNECTED),
        .ch3_rxgearboxslip(1'b0),
        .ch3_rxheader(NLW_inst_ch3_rxheader_UNCONNECTED[5:0]),
        .ch3_rxheadervalid(NLW_inst_ch3_rxheadervalid_UNCONNECTED[1:0]),
        .ch3_rxlatclk(1'b0),
        .ch3_rxlpmen(1'b0),
        .ch3_rxmldchaindone(1'b0),
        .ch3_rxmldchainreq(1'b0),
        .ch3_rxmlfinealignreq(1'b0),
        .ch3_rxmstdatapathreset(1'b0),
        .ch3_rxmstreset(1'b0),
        .ch3_rxmstresetdone(NLW_inst_ch3_rxmstresetdone_UNCONNECTED),
        .ch3_rxoobreset(1'b0),
        .ch3_rxosintdone(NLW_inst_ch3_rxosintdone_UNCONNECTED),
        .ch3_rxoutclk(NLW_inst_ch3_rxoutclk_UNCONNECTED),
        .ch3_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch3_rxpd({1'b0,1'b0}),
        .ch3_rxphaligndone(NLW_inst_ch3_rxphaligndone_UNCONNECTED),
        .ch3_rxphalignerr(NLW_inst_ch3_rxphalignerr_UNCONNECTED),
        .ch3_rxphalignreq(1'b0),
        .ch3_rxphalignresetmask({1'b1,1'b1}),
        .ch3_rxphdlypd(1'b0),
        .ch3_rxphdlyreset(1'b0),
        .ch3_rxphdlyresetdone(NLW_inst_ch3_rxphdlyresetdone_UNCONNECTED),
        .ch3_rxphsetinitdone(NLW_inst_ch3_rxphsetinitdone_UNCONNECTED),
        .ch3_rxphsetinitreq(1'b0),
        .ch3_rxphshift180(1'b0),
        .ch3_rxphshift180done(NLW_inst_ch3_rxphshift180done_UNCONNECTED),
        .ch3_rxpkdet(NLW_inst_ch3_rxpkdet_UNCONNECTED),
        .ch3_rxpmaresetdone(NLW_inst_ch3_rxpmaresetdone_UNCONNECTED),
        .ch3_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch3_rxpolarity(1'b0),
        .ch3_rxprbscntreset(1'b0),
        .ch3_rxprbserr(NLW_inst_ch3_rxprbserr_UNCONNECTED),
        .ch3_rxprbslocked(NLW_inst_ch3_rxprbslocked_UNCONNECTED),
        .ch3_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxprogdivreset(1'b0),
        .ch3_rxprogdivresetdone(NLW_inst_ch3_rxprogdivresetdone_UNCONNECTED),
        .ch3_rxqpien(1'b0),
        .ch3_rxqpisenn(NLW_inst_ch3_rxqpisenn_UNCONNECTED),
        .ch3_rxqpisenp(NLW_inst_ch3_rxqpisenp_UNCONNECTED),
        .ch3_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxresetdone(NLW_inst_ch3_rxresetdone_UNCONNECTED),
        .ch3_rxresetmode({1'b0,1'b0}),
        .ch3_rxsimplexphystatus(NLW_inst_ch3_rxsimplexphystatus_UNCONNECTED),
        .ch3_rxslide(1'b0),
        .ch3_rxsliderdy(NLW_inst_ch3_rxsliderdy_UNCONNECTED),
        .ch3_rxslipdone(NLW_inst_ch3_rxslipdone_UNCONNECTED),
        .ch3_rxstartofseq(NLW_inst_ch3_rxstartofseq_UNCONNECTED[1:0]),
        .ch3_rxstatus(NLW_inst_ch3_rxstatus_UNCONNECTED[2:0]),
        .ch3_rxsyncallin(1'b0),
        .ch3_rxsyncdone(NLW_inst_ch3_rxsyncdone_UNCONNECTED),
        .ch3_rxtermination(1'b0),
        .ch3_rxuserrdy(1'b0),
        .ch3_rxusrclk(1'b0),
        .ch3_rxvalid(NLW_inst_ch3_rxvalid_UNCONNECTED),
        .ch3_tx10gstat(NLW_inst_ch3_tx10gstat_UNCONNECTED),
        .ch3_txbufstatus(NLW_inst_ch3_txbufstatus_UNCONNECTED[1:0]),
        .ch3_txcomfinish(NLW_inst_ch3_txcomfinish_UNCONNECTED),
        .ch3_txcominit(1'b0),
        .ch3_txcomsas(1'b0),
        .ch3_txcomwake(1'b0),
        .ch3_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txdapicodeovrden(1'b0),
        .ch3_txdapicodereset(1'b0),
        .ch3_txdapireset(1'b0),
        .ch3_txdapiresetdone(NLW_inst_ch3_txdapiresetdone_UNCONNECTED),
        .ch3_txdapiresetmask({1'b0,1'b0}),
        .ch3_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txdccdone(NLW_inst_ch3_txdccdone_UNCONNECTED),
        .ch3_txdebugpcsout(NLW_inst_ch3_txdebugpcsout_UNCONNECTED),
        .ch3_txdeemph({1'b0,1'b0}),
        .ch3_txdetectrx(1'b0),
        .ch3_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch3_txdlyalignerr(NLW_inst_ch3_txdlyalignerr_UNCONNECTED),
        .ch3_txdlyalignprog(NLW_inst_ch3_txdlyalignprog_UNCONNECTED),
        .ch3_txdlyalignreq(1'b0),
        .ch3_txelecidle(1'b0),
        .ch3_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txinhibit(1'b0),
        .ch3_txlatclk(1'b0),
        .ch3_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch3_txmargin({1'b0,1'b0,1'b0}),
        .ch3_txmldchaindone(1'b0),
        .ch3_txmldchainreq(1'b0),
        .ch3_txmstdatapathreset(1'b0),
        .ch3_txmstreset(1'b0),
        .ch3_txmstresetdone(NLW_inst_ch3_txmstresetdone_UNCONNECTED),
        .ch3_txoneszeros(1'b0),
        .ch3_txoutclk(NLW_inst_ch3_txoutclk_UNCONNECTED),
        .ch3_txpausedelayalign(1'b0),
        .ch3_txpcsresetmask(1'b1),
        .ch3_txpd({1'b0,1'b0}),
        .ch3_txphaligndone(NLW_inst_ch3_txphaligndone_UNCONNECTED),
        .ch3_txphalignerr(NLW_inst_ch3_txphalignerr_UNCONNECTED),
        .ch3_txphalignoutrsvd(NLW_inst_ch3_txphalignoutrsvd_UNCONNECTED),
        .ch3_txphalignreq(1'b0),
        .ch3_txphalignresetmask({1'b1,1'b1}),
        .ch3_txphdlypd(1'b0),
        .ch3_txphdlyreset(1'b0),
        .ch3_txphdlyresetdone(NLW_inst_ch3_txphdlyresetdone_UNCONNECTED),
        .ch3_txphdlytstclk(1'b0),
        .ch3_txphsetinitdone(NLW_inst_ch3_txphsetinitdone_UNCONNECTED),
        .ch3_txphsetinitreq(1'b0),
        .ch3_txphshift180(1'b0),
        .ch3_txphshift180done(NLW_inst_ch3_txphshift180done_UNCONNECTED),
        .ch3_txpicodeovrden(1'b0),
        .ch3_txpicodereset(1'b0),
        .ch3_txpippmen(1'b0),
        .ch3_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txpisopd(1'b0),
        .ch3_txpmaresetdone(NLW_inst_ch3_txpmaresetdone_UNCONNECTED),
        .ch3_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch3_txpolarity(1'b0),
        .ch3_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprbsforceerr(1'b0),
        .ch3_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprogdivreset(1'b0),
        .ch3_txprogdivresetdone(NLW_inst_ch3_txprogdivresetdone_UNCONNECTED),
        .ch3_txqpibiasen(1'b0),
        .ch3_txqpisenn(NLW_inst_ch3_txqpisenn_UNCONNECTED),
        .ch3_txqpisenp(NLW_inst_ch3_txqpisenp_UNCONNECTED),
        .ch3_txqpiweakpu(1'b0),
        .ch3_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txresetdone(NLW_inst_ch3_txresetdone_UNCONNECTED),
        .ch3_txresetmode({1'b0,1'b0}),
        .ch3_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txsimplexphystatus(NLW_inst_ch3_txsimplexphystatus_UNCONNECTED),
        .ch3_txswing(1'b0),
        .ch3_txswingouthigh(NLW_inst_ch3_txswingouthigh_UNCONNECTED),
        .ch3_txswingoutlow(NLW_inst_ch3_txswingoutlow_UNCONNECTED),
        .ch3_txsyncallin(1'b0),
        .ch3_txsyncdone(NLW_inst_ch3_txsyncdone_UNCONNECTED),
        .ch3_txuserrdy(1'b0),
        .ch3_txusrclk(1'b0),
        .ch3_xpipe5_pipeline_en(NLW_inst_ch3_xpipe5_pipeline_en_UNCONNECTED),
        .coestatusdebug(1'b0),
        .correcterr(NLW_inst_correcterr_UNCONNECTED),
        .ctrlrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ctrlrsvdout(NLW_inst_ctrlrsvdout_UNCONNECTED[7:0]),
        .debugtraceclk(1'b0),
        .debugtraceready(1'b0),
        .debugtracetdata(NLW_inst_debugtracetdata_UNCONNECTED[15:0]),
        .debugtracetvalid(NLW_inst_debugtracetvalid_UNCONNECTED),
        .gpi(gpi),
        .gpo(gpo),
        .gtpowergood(gtpowergood),
        .hsclk0_lcpllclkrsvd0(1'b0),
        .hsclk0_lcpllclkrsvd1(1'b0),
        .hsclk0_lcpllfbclklost(NLW_inst_hsclk0_lcpllfbclklost_UNCONNECTED),
        .hsclk0_lcpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_lcpllgtgrefclk(1'b0),
        .hsclk0_lcplllock(hsclk0_lcplllock),
        .hsclk0_lcpllpd(1'b0),
        .hsclk0_lcpllrefclklost(NLW_inst_hsclk0_lcpllrefclklost_UNCONNECTED),
        .hsclk0_lcpllrefclkmonitor(NLW_inst_hsclk0_lcpllrefclkmonitor_UNCONNECTED),
        .hsclk0_lcpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk0_lcpllreset(1'b0),
        .hsclk0_lcpllresetbypassmode(1'b0),
        .hsclk0_lcpllresetmask({1'b1,1'b1}),
        .hsclk0_lcpllrsvd0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_lcpllrsvd1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_lcpllrsvdout(NLW_inst_hsclk0_lcpllrsvdout_UNCONNECTED[7:0]),
        .hsclk0_lcpllsdmdata({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .hsclk0_lcpllsdmtoggle(1'b0),
        .hsclk0_rpllclkrsvd0(1'b0),
        .hsclk0_rpllclkrsvd1(1'b0),
        .hsclk0_rpllfbclklost(NLW_inst_hsclk0_rpllfbclklost_UNCONNECTED),
        .hsclk0_rpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rpllgtgrefclk(1'b0),
        .hsclk0_rplllock(NLW_inst_hsclk0_rplllock_UNCONNECTED),
        .hsclk0_rpllpd(1'b0),
        .hsclk0_rpllrefclklost(NLW_inst_hsclk0_rpllrefclklost_UNCONNECTED),
        .hsclk0_rpllrefclkmonitor(NLW_inst_hsclk0_rpllrefclkmonitor_UNCONNECTED),
        .hsclk0_rpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk0_rpllreset(1'b0),
        .hsclk0_rpllresetbypassmode(1'b0),
        .hsclk0_rpllresetmask({1'b1,1'b1}),
        .hsclk0_rpllrsvd0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rpllrsvd1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rpllrsvdout(NLW_inst_hsclk0_rpllrsvdout_UNCONNECTED[7:0]),
        .hsclk0_rpllsdmdata({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rpllsdmtoggle(1'b0),
        .hsclk0_rxrecclkout0(NLW_inst_hsclk0_rxrecclkout0_UNCONNECTED),
        .hsclk0_rxrecclkout1(NLW_inst_hsclk0_rxrecclkout1_UNCONNECTED),
        .hsclk0_rxrecclksel(NLW_inst_hsclk0_rxrecclksel_UNCONNECTED[1:0]),
        .hsclk1_lcpllclkrsvd0(1'b0),
        .hsclk1_lcpllclkrsvd1(1'b0),
        .hsclk1_lcpllfbclklost(NLW_inst_hsclk1_lcpllfbclklost_UNCONNECTED),
        .hsclk1_lcpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_lcpllgtgrefclk(1'b0),
        .hsclk1_lcplllock(NLW_inst_hsclk1_lcplllock_UNCONNECTED),
        .hsclk1_lcpllpd(1'b0),
        .hsclk1_lcpllrefclklost(NLW_inst_hsclk1_lcpllrefclklost_UNCONNECTED),
        .hsclk1_lcpllrefclkmonitor(NLW_inst_hsclk1_lcpllrefclkmonitor_UNCONNECTED),
        .hsclk1_lcpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk1_lcpllreset(1'b0),
        .hsclk1_lcpllresetbypassmode(1'b0),
        .hsclk1_lcpllresetmask({1'b1,1'b1}),
        .hsclk1_lcpllrsvd0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_lcpllrsvd1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_lcpllrsvdout(NLW_inst_hsclk1_lcpllrsvdout_UNCONNECTED[7:0]),
        .hsclk1_lcpllsdmdata({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .hsclk1_lcpllsdmtoggle(1'b0),
        .hsclk1_rpllclkrsvd0(1'b0),
        .hsclk1_rpllclkrsvd1(1'b0),
        .hsclk1_rpllfbclklost(NLW_inst_hsclk1_rpllfbclklost_UNCONNECTED),
        .hsclk1_rpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rpllgtgrefclk(1'b0),
        .hsclk1_rplllock(NLW_inst_hsclk1_rplllock_UNCONNECTED),
        .hsclk1_rpllpd(1'b0),
        .hsclk1_rpllrefclklost(NLW_inst_hsclk1_rpllrefclklost_UNCONNECTED),
        .hsclk1_rpllrefclkmonitor(NLW_inst_hsclk1_rpllrefclkmonitor_UNCONNECTED),
        .hsclk1_rpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk1_rpllreset(1'b0),
        .hsclk1_rpllresetbypassmode(1'b0),
        .hsclk1_rpllresetmask({1'b1,1'b1}),
        .hsclk1_rpllrsvd0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rpllrsvd1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rpllrsvdout(NLW_inst_hsclk1_rpllrsvdout_UNCONNECTED[7:0]),
        .hsclk1_rpllsdmdata({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rpllsdmtoggle(1'b0),
        .hsclk1_rxrecclkout0(NLW_inst_hsclk1_rxrecclkout0_UNCONNECTED),
        .hsclk1_rxrecclkout1(NLW_inst_hsclk1_rxrecclkout1_UNCONNECTED),
        .hsclk1_rxrecclksel(NLW_inst_hsclk1_rxrecclksel_UNCONNECTED[1:0]),
        .pcielinkreachtarget(1'b0),
        .pcieltssm({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipenorthin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipenorthout(NLW_inst_pipenorthout_UNCONNECTED[5:0]),
        .pipesouthin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipesouthout(NLW_inst_pipesouthout_UNCONNECTED[5:0]),
        .rcalenb(1'b0),
        .refclk0_clktestsig(1'b0),
        .refclk0_clktestsigint(NLW_inst_refclk0_clktestsigint_UNCONNECTED),
        .refclk0_gtrefclkpd(1'b0),
        .refclk0_gtrefclkpdint(NLW_inst_refclk0_gtrefclkpdint_UNCONNECTED),
        .refclk1_clktestsig(1'b0),
        .refclk1_clktestsigint(NLW_inst_refclk1_clktestsigint_UNCONNECTED),
        .refclk1_gtrefclkpd(1'b0),
        .refclk1_gtrefclkpdint(NLW_inst_refclk1_gtrefclkpdint_UNCONNECTED),
        .resetdone_northin({1'b0,1'b0}),
        .resetdone_northout(NLW_inst_resetdone_northout_UNCONNECTED[1:0]),
        .resetdone_southin({1'b0,1'b0}),
        .resetdone_southout(NLW_inst_resetdone_southout_UNCONNECTED[1:0]),
        .rxmarginclk(1'b0),
        .rxmarginreqack(NLW_inst_rxmarginreqack_UNCONNECTED),
        .rxmarginreqcmd({1'b0,1'b0,1'b0,1'b0}),
        .rxmarginreqlanenum({1'b0,1'b0}),
        .rxmarginreqpayld({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rxmarginreqreq(1'b0),
        .rxmarginresack(1'b0),
        .rxmarginrescmd(NLW_inst_rxmarginrescmd_UNCONNECTED[3:0]),
        .rxmarginreslanenum(NLW_inst_rxmarginreslanenum_UNCONNECTED[1:0]),
        .rxmarginrespayld(NLW_inst_rxmarginrespayld_UNCONNECTED[7:0]),
        .rxmarginresreq(NLW_inst_rxmarginresreq_UNCONNECTED),
        .rxn(rxn),
        .rxp(rxp),
        .rxpinorthin({1'b0,1'b0,1'b0,1'b0}),
        .rxpinorthout(NLW_inst_rxpinorthout_UNCONNECTED[3:0]),
        .rxpisouthin({1'b0,1'b0,1'b0,1'b0}),
        .rxpisouthout(NLW_inst_rxpisouthout_UNCONNECTED[3:0]),
        .s_axi_lite_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_arready(NLW_inst_s_axi_lite_arready_UNCONNECTED),
        .s_axi_lite_arvalid(1'b0),
        .s_axi_lite_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_awready(NLW_inst_s_axi_lite_awready_UNCONNECTED),
        .s_axi_lite_awvalid(1'b0),
        .s_axi_lite_bready(1'b0),
        .s_axi_lite_bresp(NLW_inst_s_axi_lite_bresp_UNCONNECTED[1:0]),
        .s_axi_lite_bvalid(NLW_inst_s_axi_lite_bvalid_UNCONNECTED),
        .s_axi_lite_clk(1'b0),
        .s_axi_lite_rdata(NLW_inst_s_axi_lite_rdata_UNCONNECTED[31:0]),
        .s_axi_lite_resetn(1'b0),
        .s_axi_lite_rready(1'b0),
        .s_axi_lite_rresp(NLW_inst_s_axi_lite_rresp_UNCONNECTED[1:0]),
        .s_axi_lite_rvalid(NLW_inst_s_axi_lite_rvalid_UNCONNECTED),
        .s_axi_lite_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_wready(NLW_inst_s_axi_lite_wready_UNCONNECTED),
        .s_axi_lite_wvalid(1'b0),
        .trigackin0(NLW_inst_trigackin0_UNCONNECTED),
        .trigackout0(1'b0),
        .trigin0(1'b0),
        .trigout0(NLW_inst_trigout0_UNCONNECTED),
        .txn(txn),
        .txp(txp),
        .txpinorthin({1'b0,1'b0,1'b0,1'b0}),
        .txpinorthout(NLW_inst_txpinorthout_UNCONNECTED[3:0]),
        .txpisouthin({1'b0,1'b0,1'b0,1'b0}),
        .txpisouthout(NLW_inst_txpisouthout_UNCONNECTED[3:0]),
        .ubenable(1'b1),
        .ubinterrupt(NLW_inst_ubinterrupt_UNCONNECTED),
        .ubintr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ubiolmbrst(1'b0),
        .ubmbrst(1'b0),
        .ubrxuart(1'b0),
        .ubtxuart(NLW_inst_ubtxuart_UNCONNECTED),
        .uncorrecterr(NLW_inst_uncorrecterr_UNCONNECTED));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone
   (ch3_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch3_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch3_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__1
   (ch0_txpmaresetdone,
    src_in,
    apb3clk);
  output ch0_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__32 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__10
   (ch1_txresetdone,
    src_in,
    apb3clk);
  output ch1_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__41 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__11
   (ch2_txresetdone,
    src_in,
    apb3clk);
  output ch2_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__42 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__12
   (ch3_txresetdone,
    src_in,
    apb3clk);
  output ch3_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__43 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__13
   (ch0_rxresetdone,
    src_in,
    apb3clk);
  output ch0_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__44 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__14
   (ch1_rxresetdone,
    src_in,
    apb3clk);
  output ch1_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__45 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__15
   (ch2_rxresetdone,
    src_in,
    apb3clk);
  output ch2_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__46 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__16
   (ch3_rxresetdone,
    src_in,
    apb3clk);
  output ch3_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__47 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__17
   (ch0_txmstresetdone,
    src_in,
    apb3clk);
  output ch0_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__48 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__18
   (ch1_txmstresetdone,
    src_in,
    apb3clk);
  output ch1_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__49 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__19
   (ch2_txmstresetdone,
    src_in,
    apb3clk);
  output ch2_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__50 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__2
   (ch1_txpmaresetdone,
    src_in,
    apb3clk);
  output ch1_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__33 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__20
   (ch3_txmstresetdone,
    src_in,
    apb3clk);
  output ch3_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__51 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__21
   (ch0_rxmstresetdone,
    src_in,
    apb3clk);
  output ch0_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__52 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__22
   (ch1_rxmstresetdone,
    src_in,
    apb3clk);
  output ch1_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__53 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__23
   (ch2_rxmstresetdone,
    src_in,
    apb3clk);
  output ch2_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__54 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__24
   (ch3_rxmstresetdone,
    src_in,
    apb3clk);
  output ch3_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__55 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__25
   (ch0_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch0_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch0_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__56 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__26
   (ch1_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch1_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch1_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__57 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__27
   (ch2_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch2_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch2_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__58 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__28
   (ch3_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch3_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch3_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__59 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__29
   (ch0_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch0_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch0_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__60 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__3
   (ch2_txpmaresetdone,
    src_in,
    apb3clk);
  output ch2_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__34 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__30
   (ch1_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch1_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch1_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__61 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__31
   (ch2_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch2_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch2_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__62 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__4
   (ch3_txpmaresetdone,
    src_in,
    apb3clk);
  output ch3_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__35 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__5
   (ch0_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch0_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__36 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__6
   (ch1_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch1_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__37 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__7
   (ch2_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch2_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__38 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__8
   (ch3_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch3_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__39 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__9
   (ch0_txresetdone,
    src_in,
    apb3clk);
  output ch0_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__40 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* A_CFG0 = "1856" *) (* A_CFG1 = "1313754742" *) (* A_CFG2 = "1610612736" *) 
(* A_CFG3 = "-536870912" *) (* A_CFG4 = "-536870912" *) (* A_CFG5 = "-536870912" *) 
(* CH0_ADAPT_APT_CFG = "0" *) (* CH0_ADAPT_CAL_CFG = "-2115083264" *) (* CH0_ADAPT_DFE_CFG = "64" *) 
(* CH0_ADAPT_GC_CFG0 = "9441392" *) (* CH0_ADAPT_GC_CFG1 = "178259936" *) (* CH0_ADAPT_GC_CFG2 = "2097384" *) 
(* CH0_ADAPT_GC_CFG3 = "178258912" *) (* CH0_ADAPT_GEN_CFG0 = "1179648" *) (* CH0_ADAPT_GEN_CFG1 = "0" *) 
(* CH0_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH0_ADAPT_GEN_CFG3 = "268435456" *) (* CH0_ADAPT_H01_CFG = "18875040" *) 
(* CH0_ADAPT_H23_CFG = "27263392" *) (* CH0_ADAPT_H45_CFG = "27263392" *) (* CH0_ADAPT_H67_CFG = "27263392" *) 
(* CH0_ADAPT_H89_CFG = "27263392" *) (* CH0_ADAPT_HAB_CFG = "27263392" *) (* CH0_ADAPT_HCD_CFG = "27263392" *) 
(* CH0_ADAPT_HEF_CFG = "27263904" *) (* CH0_ADAPT_KH_CFG0 = "537426239" *) (* CH0_ADAPT_KH_CFG1 = "0" *) 
(* CH0_ADAPT_KH_CFG2 = "17312" *) (* CH0_ADAPT_KH_CFG3 = "0" *) (* CH0_ADAPT_KH_CFG4 = "31648" *) 
(* CH0_ADAPT_KH_CFG5 = "0" *) (* CH0_ADAPT_KL_CFG0 = "32928" *) (* CH0_ADAPT_KL_CFG1 = "17312" *) 
(* CH0_ADAPT_LCK_CFG0 = "16384" *) (* CH0_ADAPT_LCK_CFG1 = "16384" *) (* CH0_ADAPT_LCK_CFG2 = "0" *) 
(* CH0_ADAPT_LCK_CFG3 = "0" *) (* CH0_ADAPT_LOP_CFG = "-301988256" *) (* CH0_ADAPT_OS_CFG = "-2147483360" *) 
(* CH0_CHCLK_ILO_CFG = "6553651" *) (* CH0_CHCLK_MISC_CFG = "-125706465" *) (* CH0_CHCLK_RSV_CFG = "0" *) 
(* CH0_CHCLK_RXCAL_CFG = "138166272" *) (* CH0_CHCLK_RXCAL_CFG1 = "0" *) (* CH0_CHCLK_RXCAL_CFG2 = "0" *) 
(* CH0_CHCLK_RXPI_CFG = "5244940" *) (* CH0_CHCLK_TXCAL_CFG = "4194336" *) (* CH0_CHCLK_TXPI_CFG0 = "4655119" *) 
(* CH0_CHL_RSV_CFG0 = "-964689911" *) (* CH0_CHL_RSV_CFG1 = "1560" *) (* CH0_CHL_RSV_CFG2 = "6227344" *) 
(* CH0_CHL_RSV_CFG3 = "0" *) (* CH0_CHL_RSV_CFG4 = "0" *) (* CH0_DA_CFG = "655370" *) 
(* CH0_EYESCAN_CFG0 = "2048" *) (* CH0_EYESCAN_CFG1 = "0" *) (* CH0_EYESCAN_CFG10 = "0" *) 
(* CH0_EYESCAN_CFG11 = "0" *) (* CH0_EYESCAN_CFG12 = "0" *) (* CH0_EYESCAN_CFG13 = "0" *) 
(* CH0_EYESCAN_CFG14 = "0" *) (* CH0_EYESCAN_CFG15 = "0" *) (* CH0_EYESCAN_CFG16 = "0" *) 
(* CH0_EYESCAN_CFG2 = "0" *) (* CH0_EYESCAN_CFG3 = "0" *) (* CH0_EYESCAN_CFG4 = "0" *) 
(* CH0_EYESCAN_CFG5 = "0" *) (* CH0_EYESCAN_CFG6 = "0" *) (* CH0_EYESCAN_CFG7 = "0" *) 
(* CH0_EYESCAN_CFG8 = "0" *) (* CH0_EYESCAN_CFG9 = "0" *) (* CH0_FABRIC_INTF_CFG0 = "-20973573" *) 
(* CH0_FABRIC_INTF_CFG1 = "1024" *) (* CH0_FABRIC_INTF_CFG2 = "537919472" *) (* CH0_FABRIC_INTF_CFG3 = "0" *) 
(* CH0_FABRIC_INTF_CFG4 = "20480" *) (* CH0_FABRIC_INTF_CFG5 = "25602" *) (* CH0_INSTANTIATED = "1" *) 
(* CH0_MONITOR_CFG = "0" *) (* CH0_PIPE_CTRL_CFG0 = "262240" *) (* CH0_PIPE_CTRL_CFG1 = "2097811" *) 
(* CH0_PIPE_CTRL_CFG10 = "85983215" *) (* CH0_PIPE_CTRL_CFG2 = "9950092" *) (* CH0_PIPE_CTRL_CFG3 = "77070639" *) 
(* CH0_PIPE_CTRL_CFG4 = "4456448" *) (* CH0_PIPE_CTRL_CFG5 = "-1610612736" *) (* CH0_PIPE_CTRL_CFG6 = "1007681636" *) 
(* CH0_PIPE_CTRL_CFG7 = "67149834" *) (* CH0_PIPE_CTRL_CFG8 = "33677432" *) (* CH0_PIPE_CTRL_CFG9 = "0" *) 
(* CH0_PIPE_TX_EQ_CFG0 = "175467487" *) (* CH0_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH0_PIPE_TX_EQ_CFG2 = "8258" *) 
(* CH0_PIPE_TX_EQ_CFG3 = "393618" *) (* CH0_RESET_BYP_HDSHK_CFG = "0" *) (* CH0_RESET_CFG = "135266357" *) 
(* CH0_RESET_LOOPER_ID_CFG = "2113632" *) (* CH0_RESET_LOOP_ID_CFG0 = "528" *) (* CH0_RESET_LOOP_ID_CFG1 = "106181136" *) 
(* CH0_RESET_LOOP_ID_CFG2 = "17185" *) (* CH0_RESET_TIME_CFG0 = "34636801" *) (* CH0_RESET_TIME_CFG1 = "34636833" *) 
(* CH0_RESET_TIME_CFG2 = "34636833" *) (* CH0_RESET_TIME_CFG3 = "-2063064031" *) (* CH0_RXOUTCLK_FREQ = "150" *) 
(* CH0_RXOUTCLK_REF_FREQ = "100" *) (* CH0_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH0_RX_CDR_CFG0 = "-1409286078" *) 
(* CH0_RX_CDR_CFG1 = "1610612992" *) (* CH0_RX_CDR_CFG2 = "134236745" *) (* CH0_RX_CDR_CFG3 = "744694" *) 
(* CH0_RX_CDR_CFG4 = "607924224" *) (* CH0_RX_CRC_CFG0 = "30848" *) (* CH0_RX_CRC_CFG1 = "505290270" *) 
(* CH0_RX_CRC_CFG2 = "505290270" *) (* CH0_RX_CRC_CFG3 = "-1" *) (* CH0_RX_CTLE_CFG0 = "31195392" *) 
(* CH0_RX_CTLE_CFG1 = "1073741824" *) (* CH0_RX_DACI2V_CFG0 = "67145418" *) (* CH0_RX_DFE_CFG0 = "-805153784" *) 
(* CH0_RX_ELASTIC_BUF_CFG0 = "4202594" *) (* CH0_RX_ELASTIC_BUF_CFG1 = "533522418" *) (* CH0_RX_ELASTIC_BUF_CFG2 = "-1073741697" *) 
(* CH0_RX_ELASTIC_BUF_CFG3 = "-538968064" *) (* CH0_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH0_RX_ELASTIC_BUF_CFG5 = "0" *) 
(* CH0_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH0_RX_ELASTIC_BUF_CFG7 = "67108868" *) (* CH0_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
(* CH0_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH0_RX_MISC_CFG0 = "1342177281" *) (* CH0_RX_OOB_CFG0 = "609534468" *) 
(* CH0_RX_OOB_CFG1 = "16925124" *) (* CH0_RX_PAD_CFG0 = "0" *) (* CH0_RX_PAD_CFG1 = "272910714" *) 
(* CH0_RX_PCS_CFG0 = "-399118161" *) (* CH0_RX_PCS_CFG1 = "605036671" *) (* CH0_RX_PCS_CFG2 = "1074118912" *) 
(* CH0_RX_PCS_CFG3 = "471666447" *) (* CH0_RX_PCS_CFG4 = "-1031757822" *) (* CH0_RX_PHALIGN_CFG0 = "3" *) 
(* CH0_RX_PHALIGN_CFG1 = "8617984" *) (* CH0_RX_PHALIGN_CFG2 = "117248" *) (* CH0_RX_PHALIGN_CFG3 = "229376" *) 
(* CH0_RX_PHALIGN_CFG4 = "522" *) (* CH0_RX_PHALIGN_CFG5 = "50462720" *) (* CH0_SIM_MODE = "FAST" *) 
(* CH0_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH0_SIM_RESET_SPEEDUP = "TRUE" *) (* CH0_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
(* CH0_TXOUTCLK_FREQ = "150" *) (* CH0_TXOUTCLK_REF_FREQ = "100" *) (* CH0_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
(* CH0_TX_10G_CFG0 = "0" *) (* CH0_TX_10G_CFG1 = "1073741824" *) (* CH0_TX_10G_CFG2 = "0" *) 
(* CH0_TX_10G_CFG3 = "0" *) (* CH0_TX_ANA_CFG0 = "208" *) (* CH0_TX_CRC_CFG0 = "30720" *) 
(* CH0_TX_CRC_CFG1 = "505290270" *) (* CH0_TX_CRC_CFG2 = "505290270" *) (* CH0_TX_CRC_CFG3 = "-1" *) 
(* CH0_TX_DRV_CFG0 = "4194304" *) (* CH0_TX_DRV_CFG1 = "6144" *) (* CH0_TX_PCS_CFG0 = "559022336" *) 
(* CH0_TX_PCS_CFG1 = "674583932" *) (* CH0_TX_PCS_CFG2 = "357954218" *) (* CH0_TX_PCS_CFG3 = "1747587" *) 
(* CH0_TX_PHALIGN_CFG0 = "0" *) (* CH0_TX_PHALIGN_CFG1 = "290816" *) (* CH0_TX_PHALIGN_CFG2 = "229432" *) 
(* CH0_TX_PHALIGN_CFG3 = "0" *) (* CH0_TX_PHALIGN_CFG4 = "402653408" *) (* CH0_TX_PHALIGN_CFG5 = "160" *) 
(* CH0_TX_PIPPM_CFG = "33554432" *) (* CH0_TX_SER_CFG0 = "0" *) (* CH1_ADAPT_APT_CFG = "0" *) 
(* CH1_ADAPT_CAL_CFG = "-2115083264" *) (* CH1_ADAPT_DFE_CFG = "64" *) (* CH1_ADAPT_GC_CFG0 = "9441392" *) 
(* CH1_ADAPT_GC_CFG1 = "178259936" *) (* CH1_ADAPT_GC_CFG2 = "2097384" *) (* CH1_ADAPT_GC_CFG3 = "178258912" *) 
(* CH1_ADAPT_GEN_CFG0 = "1179648" *) (* CH1_ADAPT_GEN_CFG1 = "0" *) (* CH1_ADAPT_GEN_CFG2 = "-2013265921" *) 
(* CH1_ADAPT_GEN_CFG3 = "268435456" *) (* CH1_ADAPT_H01_CFG = "18875040" *) (* CH1_ADAPT_H23_CFG = "27263392" *) 
(* CH1_ADAPT_H45_CFG = "27263392" *) (* CH1_ADAPT_H67_CFG = "27263392" *) (* CH1_ADAPT_H89_CFG = "27263392" *) 
(* CH1_ADAPT_HAB_CFG = "27263392" *) (* CH1_ADAPT_HCD_CFG = "27263392" *) (* CH1_ADAPT_HEF_CFG = "27263904" *) 
(* CH1_ADAPT_KH_CFG0 = "537426239" *) (* CH1_ADAPT_KH_CFG1 = "0" *) (* CH1_ADAPT_KH_CFG2 = "17312" *) 
(* CH1_ADAPT_KH_CFG3 = "0" *) (* CH1_ADAPT_KH_CFG4 = "31648" *) (* CH1_ADAPT_KH_CFG5 = "0" *) 
(* CH1_ADAPT_KL_CFG0 = "32928" *) (* CH1_ADAPT_KL_CFG1 = "17312" *) (* CH1_ADAPT_LCK_CFG0 = "16384" *) 
(* CH1_ADAPT_LCK_CFG1 = "16384" *) (* CH1_ADAPT_LCK_CFG2 = "0" *) (* CH1_ADAPT_LCK_CFG3 = "0" *) 
(* CH1_ADAPT_LOP_CFG = "-301988256" *) (* CH1_ADAPT_OS_CFG = "-2147483360" *) (* CH1_CHCLK_ILO_CFG = "6553651" *) 
(* CH1_CHCLK_MISC_CFG = "-125706465" *) (* CH1_CHCLK_RSV_CFG = "0" *) (* CH1_CHCLK_RXCAL_CFG = "138166272" *) 
(* CH1_CHCLK_RXCAL_CFG1 = "0" *) (* CH1_CHCLK_RXCAL_CFG2 = "0" *) (* CH1_CHCLK_RXPI_CFG = "5244940" *) 
(* CH1_CHCLK_TXCAL_CFG = "4194336" *) (* CH1_CHCLK_TXPI_CFG0 = "4655119" *) (* CH1_CHL_RSV_CFG0 = "-964689911" *) 
(* CH1_CHL_RSV_CFG1 = "1560" *) (* CH1_CHL_RSV_CFG2 = "6227344" *) (* CH1_CHL_RSV_CFG3 = "0" *) 
(* CH1_CHL_RSV_CFG4 = "0" *) (* CH1_DA_CFG = "655370" *) (* CH1_EYESCAN_CFG0 = "2048" *) 
(* CH1_EYESCAN_CFG1 = "0" *) (* CH1_EYESCAN_CFG10 = "0" *) (* CH1_EYESCAN_CFG11 = "0" *) 
(* CH1_EYESCAN_CFG12 = "0" *) (* CH1_EYESCAN_CFG13 = "0" *) (* CH1_EYESCAN_CFG14 = "0" *) 
(* CH1_EYESCAN_CFG15 = "0" *) (* CH1_EYESCAN_CFG16 = "0" *) (* CH1_EYESCAN_CFG2 = "0" *) 
(* CH1_EYESCAN_CFG3 = "0" *) (* CH1_EYESCAN_CFG4 = "0" *) (* CH1_EYESCAN_CFG5 = "0" *) 
(* CH1_EYESCAN_CFG6 = "0" *) (* CH1_EYESCAN_CFG7 = "0" *) (* CH1_EYESCAN_CFG8 = "0" *) 
(* CH1_EYESCAN_CFG9 = "0" *) (* CH1_FABRIC_INTF_CFG0 = "-20973573" *) (* CH1_FABRIC_INTF_CFG1 = "197632" *) 
(* CH1_FABRIC_INTF_CFG2 = "537919472" *) (* CH1_FABRIC_INTF_CFG3 = "786432" *) (* CH1_FABRIC_INTF_CFG4 = "20480" *) 
(* CH1_FABRIC_INTF_CFG5 = "25602" *) (* CH1_INSTANTIATED = "0" *) (* CH1_MONITOR_CFG = "0" *) 
(* CH1_PIPE_CTRL_CFG0 = "262240" *) (* CH1_PIPE_CTRL_CFG1 = "2097811" *) (* CH1_PIPE_CTRL_CFG10 = "85983215" *) 
(* CH1_PIPE_CTRL_CFG2 = "9950092" *) (* CH1_PIPE_CTRL_CFG3 = "1573167" *) (* CH1_PIPE_CTRL_CFG4 = "1078198272" *) 
(* CH1_PIPE_CTRL_CFG5 = "-1610612736" *) (* CH1_PIPE_CTRL_CFG6 = "1007681636" *) (* CH1_PIPE_CTRL_CFG7 = "67149834" *) 
(* CH1_PIPE_CTRL_CFG8 = "33554432" *) (* CH1_PIPE_CTRL_CFG9 = "0" *) (* CH1_PIPE_TX_EQ_CFG0 = "175467487" *) 
(* CH1_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH1_PIPE_TX_EQ_CFG2 = "8258" *) (* CH1_PIPE_TX_EQ_CFG3 = "393618" *) 
(* CH1_RESET_BYP_HDSHK_CFG = "0" *) (* CH1_RESET_CFG = "135266341" *) (* CH1_RESET_LOOPER_ID_CFG = "2113632" *) 
(* CH1_RESET_LOOP_ID_CFG0 = "528" *) (* CH1_RESET_LOOP_ID_CFG1 = "106181136" *) (* CH1_RESET_LOOP_ID_CFG2 = "17185" *) 
(* CH1_RESET_TIME_CFG0 = "34636801" *) (* CH1_RESET_TIME_CFG1 = "34636833" *) (* CH1_RESET_TIME_CFG2 = "34636833" *) 
(* CH1_RESET_TIME_CFG3 = "-2063064031" *) (* CH1_RXOUTCLK_FREQ = "390.625000" *) (* CH1_RXOUTCLK_REF_FREQ = "100" *) 
(* CH1_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH1_RX_CDR_CFG0 = "-1275068350" *) (* CH1_RX_CDR_CFG1 = "1610612992" *) 
(* CH1_RX_CDR_CFG2 = "134236777" *) (* CH1_RX_CDR_CFG3 = "744694" *) (* CH1_RX_CDR_CFG4 = "607924224" *) 
(* CH1_RX_CRC_CFG0 = "30848" *) (* CH1_RX_CRC_CFG1 = "505290270" *) (* CH1_RX_CRC_CFG2 = "505290270" *) 
(* CH1_RX_CRC_CFG3 = "-1" *) (* CH1_RX_CTLE_CFG0 = "31195392" *) (* CH1_RX_CTLE_CFG1 = "1073741824" *) 
(* CH1_RX_DACI2V_CFG0 = "67145418" *) (* CH1_RX_DFE_CFG0 = "-805153784" *) (* CH1_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) 
(* CH1_RX_ELASTIC_BUF_CFG1 = "2" *) (* CH1_RX_ELASTIC_BUF_CFG2 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
(* CH1_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG5 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
(* CH1_RX_ELASTIC_BUF_CFG7 = "67108869" *) (* CH1_RX_ELASTIC_BUF_CFG8 = "2033040" *) (* CH1_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
(* CH1_RX_MISC_CFG0 = "1342177280" *) (* CH1_RX_OOB_CFG0 = "609534468" *) (* CH1_RX_OOB_CFG1 = "16925124" *) 
(* CH1_RX_PAD_CFG0 = "0" *) (* CH1_RX_PAD_CFG1 = "272910714" *) (* CH1_RX_PCS_CFG0 = "674623792" *) 
(* CH1_RX_PCS_CFG1 = "1812204543" *) (* CH1_RX_PCS_CFG2 = "1073742049" *) (* CH1_RX_PCS_CFG3 = "471666447" *) 
(* CH1_RX_PCS_CFG4 = "1115725826" *) (* CH1_RX_PHALIGN_CFG0 = "3" *) (* CH1_RX_PHALIGN_CFG1 = "8617984" *) 
(* CH1_RX_PHALIGN_CFG2 = "117248" *) (* CH1_RX_PHALIGN_CFG3 = "229376" *) (* CH1_RX_PHALIGN_CFG4 = "522" *) 
(* CH1_RX_PHALIGN_CFG5 = "50462720" *) (* CH1_SIM_MODE = "FAST" *) (* CH1_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
(* CH1_SIM_RESET_SPEEDUP = "TRUE" *) (* CH1_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) (* CH1_TXOUTCLK_FREQ = "390.625000" *) 
(* CH1_TXOUTCLK_REF_FREQ = "100" *) (* CH1_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH1_TX_10G_CFG0 = "0" *) 
(* CH1_TX_10G_CFG1 = "1073741824" *) (* CH1_TX_10G_CFG2 = "0" *) (* CH1_TX_10G_CFG3 = "0" *) 
(* CH1_TX_ANA_CFG0 = "208" *) (* CH1_TX_CRC_CFG0 = "30720" *) (* CH1_TX_CRC_CFG1 = "505290270" *) 
(* CH1_TX_CRC_CFG2 = "505290270" *) (* CH1_TX_CRC_CFG3 = "-1" *) (* CH1_TX_DRV_CFG0 = "4194304" *) 
(* CH1_TX_DRV_CFG1 = "6144" *) (* CH1_TX_PCS_CFG0 = "-2107637471" *) (* CH1_TX_PCS_CFG1 = "674583932" *) 
(* CH1_TX_PCS_CFG2 = "357954218" *) (* CH1_TX_PCS_CFG3 = "1747587" *) (* CH1_TX_PHALIGN_CFG0 = "0" *) 
(* CH1_TX_PHALIGN_CFG1 = "290816" *) (* CH1_TX_PHALIGN_CFG2 = "229432" *) (* CH1_TX_PHALIGN_CFG3 = "0" *) 
(* CH1_TX_PHALIGN_CFG4 = "402653408" *) (* CH1_TX_PHALIGN_CFG5 = "128" *) (* CH1_TX_PIPPM_CFG = "33554432" *) 
(* CH1_TX_SER_CFG0 = "0" *) (* CH2_ADAPT_APT_CFG = "0" *) (* CH2_ADAPT_CAL_CFG = "-2115083264" *) 
(* CH2_ADAPT_DFE_CFG = "64" *) (* CH2_ADAPT_GC_CFG0 = "9441392" *) (* CH2_ADAPT_GC_CFG1 = "178259936" *) 
(* CH2_ADAPT_GC_CFG2 = "2097384" *) (* CH2_ADAPT_GC_CFG3 = "178258912" *) (* CH2_ADAPT_GEN_CFG0 = "1179648" *) 
(* CH2_ADAPT_GEN_CFG1 = "0" *) (* CH2_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH2_ADAPT_GEN_CFG3 = "268435456" *) 
(* CH2_ADAPT_H01_CFG = "18875040" *) (* CH2_ADAPT_H23_CFG = "27263392" *) (* CH2_ADAPT_H45_CFG = "27263392" *) 
(* CH2_ADAPT_H67_CFG = "27263392" *) (* CH2_ADAPT_H89_CFG = "27263392" *) (* CH2_ADAPT_HAB_CFG = "27263392" *) 
(* CH2_ADAPT_HCD_CFG = "27263392" *) (* CH2_ADAPT_HEF_CFG = "27263904" *) (* CH2_ADAPT_KH_CFG0 = "537426239" *) 
(* CH2_ADAPT_KH_CFG1 = "0" *) (* CH2_ADAPT_KH_CFG2 = "17312" *) (* CH2_ADAPT_KH_CFG3 = "0" *) 
(* CH2_ADAPT_KH_CFG4 = "31648" *) (* CH2_ADAPT_KH_CFG5 = "0" *) (* CH2_ADAPT_KL_CFG0 = "32928" *) 
(* CH2_ADAPT_KL_CFG1 = "17312" *) (* CH2_ADAPT_LCK_CFG0 = "16384" *) (* CH2_ADAPT_LCK_CFG1 = "16384" *) 
(* CH2_ADAPT_LCK_CFG2 = "0" *) (* CH2_ADAPT_LCK_CFG3 = "0" *) (* CH2_ADAPT_LOP_CFG = "-301988256" *) 
(* CH2_ADAPT_OS_CFG = "-2147483360" *) (* CH2_CHCLK_ILO_CFG = "6553651" *) (* CH2_CHCLK_MISC_CFG = "-125706465" *) 
(* CH2_CHCLK_RSV_CFG = "0" *) (* CH2_CHCLK_RXCAL_CFG = "138166272" *) (* CH2_CHCLK_RXCAL_CFG1 = "0" *) 
(* CH2_CHCLK_RXCAL_CFG2 = "0" *) (* CH2_CHCLK_RXPI_CFG = "5244972" *) (* CH2_CHCLK_TXCAL_CFG = "4194336" *) 
(* CH2_CHCLK_TXPI_CFG0 = "4655151" *) (* CH2_CHL_RSV_CFG0 = "-964689911" *) (* CH2_CHL_RSV_CFG1 = "1560" *) 
(* CH2_CHL_RSV_CFG2 = "6227344" *) (* CH2_CHL_RSV_CFG3 = "0" *) (* CH2_CHL_RSV_CFG4 = "0" *) 
(* CH2_DA_CFG = "655370" *) (* CH2_EYESCAN_CFG0 = "2048" *) (* CH2_EYESCAN_CFG1 = "0" *) 
(* CH2_EYESCAN_CFG10 = "0" *) (* CH2_EYESCAN_CFG11 = "0" *) (* CH2_EYESCAN_CFG12 = "0" *) 
(* CH2_EYESCAN_CFG13 = "0" *) (* CH2_EYESCAN_CFG14 = "0" *) (* CH2_EYESCAN_CFG15 = "0" *) 
(* CH2_EYESCAN_CFG16 = "0" *) (* CH2_EYESCAN_CFG2 = "0" *) (* CH2_EYESCAN_CFG3 = "0" *) 
(* CH2_EYESCAN_CFG4 = "0" *) (* CH2_EYESCAN_CFG5 = "0" *) (* CH2_EYESCAN_CFG6 = "0" *) 
(* CH2_EYESCAN_CFG7 = "0" *) (* CH2_EYESCAN_CFG8 = "0" *) (* CH2_EYESCAN_CFG9 = "0" *) 
(* CH2_FABRIC_INTF_CFG0 = "-20973573" *) (* CH2_FABRIC_INTF_CFG1 = "197632" *) (* CH2_FABRIC_INTF_CFG2 = "537919472" *) 
(* CH2_FABRIC_INTF_CFG3 = "786432" *) (* CH2_FABRIC_INTF_CFG4 = "20480" *) (* CH2_FABRIC_INTF_CFG5 = "25602" *) 
(* CH2_INSTANTIATED = "0" *) (* CH2_MONITOR_CFG = "0" *) (* CH2_PIPE_CTRL_CFG0 = "262240" *) 
(* CH2_PIPE_CTRL_CFG1 = "2097811" *) (* CH2_PIPE_CTRL_CFG10 = "85983215" *) (* CH2_PIPE_CTRL_CFG2 = "9950092" *) 
(* CH2_PIPE_CTRL_CFG3 = "1573167" *) (* CH2_PIPE_CTRL_CFG4 = "1078198272" *) (* CH2_PIPE_CTRL_CFG5 = "-1610612736" *) 
(* CH2_PIPE_CTRL_CFG6 = "1007681636" *) (* CH2_PIPE_CTRL_CFG7 = "67149834" *) (* CH2_PIPE_CTRL_CFG8 = "33554432" *) 
(* CH2_PIPE_CTRL_CFG9 = "0" *) (* CH2_PIPE_TX_EQ_CFG0 = "175467487" *) (* CH2_PIPE_TX_EQ_CFG1 = "152233553" *) 
(* CH2_PIPE_TX_EQ_CFG2 = "8258" *) (* CH2_PIPE_TX_EQ_CFG3 = "393618" *) (* CH2_RESET_BYP_HDSHK_CFG = "0" *) 
(* CH2_RESET_CFG = "135266341" *) (* CH2_RESET_LOOPER_ID_CFG = "2113632" *) (* CH2_RESET_LOOP_ID_CFG0 = "528" *) 
(* CH2_RESET_LOOP_ID_CFG1 = "106181136" *) (* CH2_RESET_LOOP_ID_CFG2 = "17185" *) (* CH2_RESET_TIME_CFG0 = "34636801" *) 
(* CH2_RESET_TIME_CFG1 = "34636833" *) (* CH2_RESET_TIME_CFG2 = "34636833" *) (* CH2_RESET_TIME_CFG3 = "-2063064031" *) 
(* CH2_RXOUTCLK_FREQ = "390.625000" *) (* CH2_RXOUTCLK_REF_FREQ = "125" *) (* CH2_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
(* CH2_RX_CDR_CFG0 = "-1275068350" *) (* CH2_RX_CDR_CFG1 = "1610612992" *) (* CH2_RX_CDR_CFG2 = "134236777" *) 
(* CH2_RX_CDR_CFG3 = "744694" *) (* CH2_RX_CDR_CFG4 = "607924224" *) (* CH2_RX_CRC_CFG0 = "30848" *) 
(* CH2_RX_CRC_CFG1 = "505290270" *) (* CH2_RX_CRC_CFG2 = "505290270" *) (* CH2_RX_CRC_CFG3 = "-1" *) 
(* CH2_RX_CTLE_CFG0 = "31195392" *) (* CH2_RX_CTLE_CFG1 = "1073741824" *) (* CH2_RX_DACI2V_CFG0 = "67145418" *) 
(* CH2_RX_DFE_CFG0 = "-805153784" *) (* CH2_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) (* CH2_RX_ELASTIC_BUF_CFG1 = "2" *) 
(* CH2_RX_ELASTIC_BUF_CFG2 = "0" *) (* CH2_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) (* CH2_RX_ELASTIC_BUF_CFG4 = "0" *) 
(* CH2_RX_ELASTIC_BUF_CFG5 = "0" *) (* CH2_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH2_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
(* CH2_RX_ELASTIC_BUF_CFG8 = "2033040" *) (* CH2_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH2_RX_MISC_CFG0 = "1342177280" *) 
(* CH2_RX_OOB_CFG0 = "609534468" *) (* CH2_RX_OOB_CFG1 = "16925124" *) (* CH2_RX_PAD_CFG0 = "0" *) 
(* CH2_RX_PAD_CFG1 = "272910714" *) (* CH2_RX_PCS_CFG0 = "674623792" *) (* CH2_RX_PCS_CFG1 = "1812204543" *) 
(* CH2_RX_PCS_CFG2 = "1073742049" *) (* CH2_RX_PCS_CFG3 = "471666447" *) (* CH2_RX_PCS_CFG4 = "1115725826" *) 
(* CH2_RX_PHALIGN_CFG0 = "3" *) (* CH2_RX_PHALIGN_CFG1 = "8617984" *) (* CH2_RX_PHALIGN_CFG2 = "117248" *) 
(* CH2_RX_PHALIGN_CFG3 = "229376" *) (* CH2_RX_PHALIGN_CFG4 = "522" *) (* CH2_RX_PHALIGN_CFG5 = "50462720" *) 
(* CH2_SIM_MODE = "FAST" *) (* CH2_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH2_SIM_RESET_SPEEDUP = "TRUE" *) 
(* CH2_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) (* CH2_TXOUTCLK_FREQ = "390.625000" *) (* CH2_TXOUTCLK_REF_FREQ = "125" *) 
(* CH2_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) (* CH2_TX_10G_CFG0 = "0" *) (* CH2_TX_10G_CFG1 = "1073741824" *) 
(* CH2_TX_10G_CFG2 = "0" *) (* CH2_TX_10G_CFG3 = "0" *) (* CH2_TX_ANA_CFG0 = "208" *) 
(* CH2_TX_CRC_CFG0 = "30720" *) (* CH2_TX_CRC_CFG1 = "505290270" *) (* CH2_TX_CRC_CFG2 = "505290270" *) 
(* CH2_TX_CRC_CFG3 = "-1" *) (* CH2_TX_DRV_CFG0 = "4194304" *) (* CH2_TX_DRV_CFG1 = "6144" *) 
(* CH2_TX_PCS_CFG0 = "-2107637471" *) (* CH2_TX_PCS_CFG1 = "674583932" *) (* CH2_TX_PCS_CFG2 = "357954218" *) 
(* CH2_TX_PCS_CFG3 = "1747587" *) (* CH2_TX_PHALIGN_CFG0 = "0" *) (* CH2_TX_PHALIGN_CFG1 = "290816" *) 
(* CH2_TX_PHALIGN_CFG2 = "229432" *) (* CH2_TX_PHALIGN_CFG3 = "0" *) (* CH2_TX_PHALIGN_CFG4 = "402653408" *) 
(* CH2_TX_PHALIGN_CFG5 = "128" *) (* CH2_TX_PIPPM_CFG = "33554432" *) (* CH2_TX_SER_CFG0 = "0" *) 
(* CH3_ADAPT_APT_CFG = "0" *) (* CH3_ADAPT_CAL_CFG = "-2115083264" *) (* CH3_ADAPT_DFE_CFG = "64" *) 
(* CH3_ADAPT_GC_CFG0 = "9441392" *) (* CH3_ADAPT_GC_CFG1 = "178259936" *) (* CH3_ADAPT_GC_CFG2 = "2097384" *) 
(* CH3_ADAPT_GC_CFG3 = "178258912" *) (* CH3_ADAPT_GEN_CFG0 = "1179648" *) (* CH3_ADAPT_GEN_CFG1 = "0" *) 
(* CH3_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH3_ADAPT_GEN_CFG3 = "268435456" *) (* CH3_ADAPT_H01_CFG = "18875040" *) 
(* CH3_ADAPT_H23_CFG = "27263392" *) (* CH3_ADAPT_H45_CFG = "27263392" *) (* CH3_ADAPT_H67_CFG = "27263392" *) 
(* CH3_ADAPT_H89_CFG = "27263392" *) (* CH3_ADAPT_HAB_CFG = "27263392" *) (* CH3_ADAPT_HCD_CFG = "27263392" *) 
(* CH3_ADAPT_HEF_CFG = "27263904" *) (* CH3_ADAPT_KH_CFG0 = "537426239" *) (* CH3_ADAPT_KH_CFG1 = "0" *) 
(* CH3_ADAPT_KH_CFG2 = "17312" *) (* CH3_ADAPT_KH_CFG3 = "0" *) (* CH3_ADAPT_KH_CFG4 = "31648" *) 
(* CH3_ADAPT_KH_CFG5 = "0" *) (* CH3_ADAPT_KL_CFG0 = "32928" *) (* CH3_ADAPT_KL_CFG1 = "17312" *) 
(* CH3_ADAPT_LCK_CFG0 = "16384" *) (* CH3_ADAPT_LCK_CFG1 = "16384" *) (* CH3_ADAPT_LCK_CFG2 = "0" *) 
(* CH3_ADAPT_LCK_CFG3 = "0" *) (* CH3_ADAPT_LOP_CFG = "-301988256" *) (* CH3_ADAPT_OS_CFG = "-2147483360" *) 
(* CH3_CHCLK_ILO_CFG = "6553651" *) (* CH3_CHCLK_MISC_CFG = "-125706465" *) (* CH3_CHCLK_RSV_CFG = "0" *) 
(* CH3_CHCLK_RXCAL_CFG = "138166272" *) (* CH3_CHCLK_RXCAL_CFG1 = "0" *) (* CH3_CHCLK_RXCAL_CFG2 = "0" *) 
(* CH3_CHCLK_RXPI_CFG = "5244972" *) (* CH3_CHCLK_TXCAL_CFG = "4194336" *) (* CH3_CHCLK_TXPI_CFG0 = "4655151" *) 
(* CH3_CHL_RSV_CFG0 = "-964689911" *) (* CH3_CHL_RSV_CFG1 = "1560" *) (* CH3_CHL_RSV_CFG2 = "6227344" *) 
(* CH3_CHL_RSV_CFG3 = "0" *) (* CH3_CHL_RSV_CFG4 = "0" *) (* CH3_DA_CFG = "655370" *) 
(* CH3_EYESCAN_CFG0 = "2048" *) (* CH3_EYESCAN_CFG1 = "0" *) (* CH3_EYESCAN_CFG10 = "0" *) 
(* CH3_EYESCAN_CFG11 = "0" *) (* CH3_EYESCAN_CFG12 = "0" *) (* CH3_EYESCAN_CFG13 = "0" *) 
(* CH3_EYESCAN_CFG14 = "0" *) (* CH3_EYESCAN_CFG15 = "0" *) (* CH3_EYESCAN_CFG16 = "0" *) 
(* CH3_EYESCAN_CFG2 = "0" *) (* CH3_EYESCAN_CFG3 = "0" *) (* CH3_EYESCAN_CFG4 = "0" *) 
(* CH3_EYESCAN_CFG5 = "0" *) (* CH3_EYESCAN_CFG6 = "0" *) (* CH3_EYESCAN_CFG7 = "0" *) 
(* CH3_EYESCAN_CFG8 = "0" *) (* CH3_EYESCAN_CFG9 = "0" *) (* CH3_FABRIC_INTF_CFG0 = "-20973573" *) 
(* CH3_FABRIC_INTF_CFG1 = "197632" *) (* CH3_FABRIC_INTF_CFG2 = "537919472" *) (* CH3_FABRIC_INTF_CFG3 = "786432" *) 
(* CH3_FABRIC_INTF_CFG4 = "20480" *) (* CH3_FABRIC_INTF_CFG5 = "25602" *) (* CH3_INSTANTIATED = "0" *) 
(* CH3_MONITOR_CFG = "0" *) (* CH3_PIPE_CTRL_CFG0 = "262240" *) (* CH3_PIPE_CTRL_CFG1 = "2097811" *) 
(* CH3_PIPE_CTRL_CFG10 = "85983215" *) (* CH3_PIPE_CTRL_CFG2 = "9950092" *) (* CH3_PIPE_CTRL_CFG3 = "1573167" *) 
(* CH3_PIPE_CTRL_CFG4 = "1078198272" *) (* CH3_PIPE_CTRL_CFG5 = "-1610612736" *) (* CH3_PIPE_CTRL_CFG6 = "1007681636" *) 
(* CH3_PIPE_CTRL_CFG7 = "67149834" *) (* CH3_PIPE_CTRL_CFG8 = "33554432" *) (* CH3_PIPE_CTRL_CFG9 = "0" *) 
(* CH3_PIPE_TX_EQ_CFG0 = "175467487" *) (* CH3_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH3_PIPE_TX_EQ_CFG2 = "8258" *) 
(* CH3_PIPE_TX_EQ_CFG3 = "393618" *) (* CH3_RESET_BYP_HDSHK_CFG = "0" *) (* CH3_RESET_CFG = "135266341" *) 
(* CH3_RESET_LOOPER_ID_CFG = "2113632" *) (* CH3_RESET_LOOP_ID_CFG0 = "528" *) (* CH3_RESET_LOOP_ID_CFG1 = "106181136" *) 
(* CH3_RESET_LOOP_ID_CFG2 = "17185" *) (* CH3_RESET_TIME_CFG0 = "34636801" *) (* CH3_RESET_TIME_CFG1 = "34636833" *) 
(* CH3_RESET_TIME_CFG2 = "34636833" *) (* CH3_RESET_TIME_CFG3 = "-2063064031" *) (* CH3_RXOUTCLK_FREQ = "390.625000" *) 
(* CH3_RXOUTCLK_REF_FREQ = "125" *) (* CH3_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) (* CH3_RX_CDR_CFG0 = "-1275068350" *) 
(* CH3_RX_CDR_CFG1 = "1610612992" *) (* CH3_RX_CDR_CFG2 = "134236777" *) (* CH3_RX_CDR_CFG3 = "744694" *) 
(* CH3_RX_CDR_CFG4 = "607924224" *) (* CH3_RX_CRC_CFG0 = "30848" *) (* CH3_RX_CRC_CFG1 = "505290270" *) 
(* CH3_RX_CRC_CFG2 = "505290270" *) (* CH3_RX_CRC_CFG3 = "-1" *) (* CH3_RX_CTLE_CFG0 = "31195392" *) 
(* CH3_RX_CTLE_CFG1 = "1073741824" *) (* CH3_RX_DACI2V_CFG0 = "67145418" *) (* CH3_RX_DFE_CFG0 = "-805153784" *) 
(* CH3_RX_ELASTIC_BUF_CFG0 = "-2139334592" *) (* CH3_RX_ELASTIC_BUF_CFG1 = "2" *) (* CH3_RX_ELASTIC_BUF_CFG2 = "0" *) 
(* CH3_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) (* CH3_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH3_RX_ELASTIC_BUF_CFG5 = "0" *) 
(* CH3_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH3_RX_ELASTIC_BUF_CFG7 = "67108869" *) (* CH3_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
(* CH3_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH3_RX_MISC_CFG0 = "1342177280" *) (* CH3_RX_OOB_CFG0 = "609534468" *) 
(* CH3_RX_OOB_CFG1 = "16925124" *) (* CH3_RX_PAD_CFG0 = "0" *) (* CH3_RX_PAD_CFG1 = "272910714" *) 
(* CH3_RX_PCS_CFG0 = "674623792" *) (* CH3_RX_PCS_CFG1 = "1812204543" *) (* CH3_RX_PCS_CFG2 = "1073742049" *) 
(* CH3_RX_PCS_CFG3 = "471666447" *) (* CH3_RX_PCS_CFG4 = "1115725826" *) (* CH3_RX_PHALIGN_CFG0 = "3" *) 
(* CH3_RX_PHALIGN_CFG1 = "8617984" *) (* CH3_RX_PHALIGN_CFG2 = "117248" *) (* CH3_RX_PHALIGN_CFG3 = "229376" *) 
(* CH3_RX_PHALIGN_CFG4 = "522" *) (* CH3_RX_PHALIGN_CFG5 = "50462720" *) (* CH3_SIM_MODE = "FAST" *) 
(* CH3_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH3_SIM_RESET_SPEEDUP = "TRUE" *) (* CH3_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
(* CH3_TXOUTCLK_FREQ = "390.625000" *) (* CH3_TXOUTCLK_REF_FREQ = "125" *) (* CH3_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
(* CH3_TX_10G_CFG0 = "0" *) (* CH3_TX_10G_CFG1 = "1073741824" *) (* CH3_TX_10G_CFG2 = "0" *) 
(* CH3_TX_10G_CFG3 = "0" *) (* CH3_TX_ANA_CFG0 = "208" *) (* CH3_TX_CRC_CFG0 = "30720" *) 
(* CH3_TX_CRC_CFG1 = "505290270" *) (* CH3_TX_CRC_CFG2 = "505290270" *) (* CH3_TX_CRC_CFG3 = "-1" *) 
(* CH3_TX_DRV_CFG0 = "4194304" *) (* CH3_TX_DRV_CFG1 = "6144" *) (* CH3_TX_PCS_CFG0 = "-2107637471" *) 
(* CH3_TX_PCS_CFG1 = "674583932" *) (* CH3_TX_PCS_CFG2 = "357954218" *) (* CH3_TX_PCS_CFG3 = "1747587" *) 
(* CH3_TX_PHALIGN_CFG0 = "0" *) (* CH3_TX_PHALIGN_CFG1 = "290816" *) (* CH3_TX_PHALIGN_CFG2 = "229432" *) 
(* CH3_TX_PHALIGN_CFG3 = "0" *) (* CH3_TX_PHALIGN_CFG4 = "402653408" *) (* CH3_TX_PHALIGN_CFG5 = "128" *) 
(* CH3_TX_PIPPM_CFG = "33554432" *) (* CH3_TX_SER_CFG0 = "0" *) (* CHANNEL_BONDING_EN = "" *) 
(* CTRL_RSV_CFG0 = "30744" *) (* CTRL_RSV_CFG1 = "0" *) (* EGW_CHANNEL_ORDERING = " " *) 
(* EGW_COMP_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0" *) (* EGW_IS_QUAD = "1" *) (* EGW_REFCLK_LIST = "1_2_3" *) 
(* ENABLE_APB3 = "1'b1" *) (* GT_REFCLK_INFO = "refclk_PROT0_R0_100_MHz_unique1" *) (* HS0_LCPLL_IPS_PIN_EN = "0" *) 
(* HS0_LCPLL_IPS_REFCLK_SEL = "1" *) (* HS0_LCPLL_REFCLK_MAP0 = "0" *) (* HS0_LCPLL_REFCLK_MAP1 = "1" *) 
(* HS0_LCPLL_REFCLK_MAP2 = "2" *) (* HS0_LCPLL_REFCLK_MAP3 = "3" *) (* HS0_LCPLL_REFCLK_MAP4 = "4" *) 
(* HS0_LCPLL_REFCLK_MAP5 = "5" *) (* HS0_LCPLL_REFCLK_MAP6 = "6" *) (* HS0_LCPLL_REFCLK_MAP7 = "7" *) 
(* HS0_RPLL_IPS_PIN_EN = "0" *) (* HS0_RPLL_IPS_REFCLK_SEL = "1" *) (* HS0_RPLL_REFCLK_MAP0 = "0" *) 
(* HS0_RPLL_REFCLK_MAP1 = "1" *) (* HS0_RPLL_REFCLK_MAP2 = "2" *) (* HS0_RPLL_REFCLK_MAP3 = "3" *) 
(* HS0_RPLL_REFCLK_MAP4 = "4" *) (* HS0_RPLL_REFCLK_MAP5 = "5" *) (* HS0_RPLL_REFCLK_MAP6 = "6" *) 
(* HS0_RPLL_REFCLK_MAP7 = "7" *) (* HS1_LCPLL_IPS_PIN_EN = "0" *) (* HS1_LCPLL_IPS_REFCLK_SEL = "1" *) 
(* HS1_LCPLL_REFCLK_MAP0 = "0" *) (* HS1_LCPLL_REFCLK_MAP1 = "2" *) (* HS1_LCPLL_REFCLK_MAP2 = "1" *) 
(* HS1_LCPLL_REFCLK_MAP3 = "3" *) (* HS1_LCPLL_REFCLK_MAP4 = "4" *) (* HS1_LCPLL_REFCLK_MAP5 = "5" *) 
(* HS1_LCPLL_REFCLK_MAP6 = "6" *) (* HS1_LCPLL_REFCLK_MAP7 = "7" *) (* HS1_RPLL_IPS_PIN_EN = "0" *) 
(* HS1_RPLL_IPS_REFCLK_SEL = "1" *) (* HS1_RPLL_REFCLK_MAP0 = "0" *) (* HS1_RPLL_REFCLK_MAP1 = "2" *) 
(* HS1_RPLL_REFCLK_MAP2 = "1" *) (* HS1_RPLL_REFCLK_MAP3 = "3" *) (* HS1_RPLL_REFCLK_MAP4 = "4" *) 
(* HS1_RPLL_REFCLK_MAP5 = "5" *) (* HS1_RPLL_REFCLK_MAP6 = "6" *) (* HS1_RPLL_REFCLK_MAP7 = "7" *) 
(* HSCLK0_HSDIST_CFG = "65566" *) (* HSCLK0_INSTANTIATED = "1" *) (* HSCLK0_LCPLL_CFG0 = "4210436" *) 
(* HSCLK0_LCPLL_CFG1 = "68701952" *) (* HSCLK0_LCPLL_CFG2 = "-2109996536" *) (* HSCLK0_LCPLL_LGC_CFG0 = "-439055600" *) 
(* HSCLK0_LCPLL_LGC_CFG1 = "-1810753408" *) (* HSCLK0_LCPLL_LGC_CFG2 = "1114385" *) (* HSCLK0_RPLL_CFG0 = "-2147450940" *) 
(* HSCLK0_RPLL_CFG1 = "132267816" *) (* HSCLK0_RPLL_CFG2 = "11740105" *) (* HSCLK0_RPLL_LGC_CFG0 = "-439054960" *) 
(* HSCLK0_RPLL_LGC_CFG1 = "-1810753408" *) (* HSCLK0_RPLL_LGC_CFG2 = "1114385" *) (* HSCLK1_HSDIST_CFG = "30" *) 
(* HSCLK1_INSTANTIATED = "0" *) (* HSCLK1_LCPLL_CFG0 = "4210436" *) (* HSCLK1_LCPLL_CFG1 = "68701952" *) 
(* HSCLK1_LCPLL_CFG2 = "-2109537784" *) (* HSCLK1_LCPLL_LGC_CFG0 = "-439055600" *) (* HSCLK1_LCPLL_LGC_CFG1 = "-1810753408" *) 
(* HSCLK1_LCPLL_LGC_CFG2 = "1114385" *) (* HSCLK1_RPLL_CFG0 = "-2147450940" *) (* HSCLK1_RPLL_CFG1 = "132267816" *) 
(* HSCLK1_RPLL_CFG2 = "11740105" *) (* HSCLK1_RPLL_LGC_CFG0 = "-439054960" *) (* HSCLK1_RPLL_LGC_CFG1 = "-1810753408" *) 
(* HSCLK1_RPLL_LGC_CFG2 = "1114385" *) (* IDLE = "2'b00" *) (* IS_GTYE5 = "1'b0" *) 
(* IS_GTYP = "1'b1" *) (* IS_KSB = "1'b0" *) (* LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}" *) 
(* LANE_SATISFIED = "1 {}" *) (* LANE_SEL_DICT = "PROT0 {RX0 TX0} unconnected {RX1 RX2 RX3 TX1 TX2 TX3}" *) (* MEMORY_INIT_FILE = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0.mem" *) 
(* MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) (* MST_RESET_CFG = "441619457" *) (* PIN_CFG0 = "8929817" *) 
(* POR_CFG = "285440" *) (* PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT1_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROT2_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT3_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT4_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROT5_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT6_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT7_SETTINGS = "LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ TX_PAM_SEL NRZ TX_HD_EN 0 RX_HD_EN 0 RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY GT_DIRECTION DUPLEX TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_ENABLED false TX_FRACN_OVRD false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROTO_IS_FABRIC_BRAMN_NEEDED = "1'b0" *) (* PROT_DUAL_OCCUPIED = "PROT0 DUAL0" *) (* PWR_RX0_SETTINGS = "{LR0_SETTING {rx_data_rate=6,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=40,rx_data_encoding=8B10B,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
(* PWR_RX1_SETTINGS = "{}" *) (* PWR_RX2_SETTINGS = "{}" *) (* PWR_RX3_SETTINGS = "{}" *) 
(* PWR_RX_DEF_SETTINGS = "{LR0_SETTING {rx_data_rate=10.3125,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=32,rx_data_encoding=RAW,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}}" *) (* PWR_TX0_SETTINGS = "{LR0_SETTING {tx_data_rate=6,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=40,tx_data_encoding=8B10B,tx_pam_sel=NRZ,}                }" *) (* PWR_TX1_SETTINGS = "{}" *) 
(* PWR_TX2_SETTINGS = "{}" *) (* PWR_TX3_SETTINGS = "{}" *) (* PWR_TX_DEF_SETTINGS = "{LR0_SETTING {tx_data_rate=10.3125,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=32,tx_data_encoding=RAW,tx_pam_sel=NRZ,}}" *) 
(* QUAD_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}}" *) (* QUAD_INSTANTIATED = "1" *) (* QUAD_PACK = "" *) 
(* QUAD_SIM_MODE = "FAST" *) (* QUAD_SIM_RESET_SPEEDUP = "TRUE" *) (* QUAD_USAGE = "TX_QUAD_CH {TXQuad_0_/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 {/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 PROT0.IP_CH0,undef,undef,undef MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}} RX_QUAD_CH {RXQuad_0_/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 {/extended_phy_layer_gtwiz_versal_0_0/extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 PROT0.IP_CH0,undef,undef,undef MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}}" *) 
(* RCALBG0_CFG0 = "976" *) (* RCALBG0_CFG1 = "64" *) (* RCALBG0_CFG2 = "0" *) 
(* RCALBG0_CFG3 = "-2147483646" *) (* RCALBG0_CFG4 = "279" *) (* RCALBG0_CFG5 = "691" *) 
(* RCALBG1_CFG0 = "976" *) (* RCALBG1_CFG1 = "64" *) (* RCALBG1_CFG2 = "0" *) 
(* RCALBG1_CFG3 = "-2147483646" *) (* RCALBG1_CFG4 = "279" *) (* RCALBG1_CFG5 = "691" *) 
(* REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1" *) (* RXRSTDONE_DIST_SEL = "0" *) (* SIM_DEVICE = "" *) 
(* SIM_VERSION = "2" *) (* STAT_NPI_REG_LIST = "3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A0,31B0:31D8,31E0:31E8,31F0:3228,3230:3264,326C:3274,3280,3294:329C,32A8,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A0,35B0:35D8,35E0:35E8,35F0:3628,3630:3664,366C:3674,3680,3694:369C,36A8,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A0,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A64,3A6C:3A74,3A80,3A94:3A9C,3AA8,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA0,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E64,3E6C:3E74,3E80,3E94:3E9C,3EA8,3EBC:3EE4" *) (* TERMPROG_CFG = "0" *) 
(* TLAST = "2'b10" *) (* TREADY = "2'b01" *) (* TXRSTDONE_DIST_SEL = "0" *) 
(* UB_CFG0 = "1933574144" *) (* keep_hierarchy = "soft" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst
   (apb3prdata,
    apb3pready,
    apb3pslverr,
    s_axi_lite_arready,
    s_axi_lite_rdata,
    s_axi_lite_rvalid,
    s_axi_lite_awready,
    s_axi_lite_wready,
    s_axi_lite_rresp,
    s_axi_lite_bresp,
    s_axi_lite_bvalid,
    ch0_bufgtce,
    ch0_bufgtcemask,
    ch0_bufgtdiv,
    ch0_bufgtrst,
    ch0_bufgtrstmask,
    ch0_dmonitorout,
    ch0_dmonitoroutclk,
    ch0_eyescandataerror,
    ch0_iloresetdone,
    ch0_pcsrsvdout,
    ch0_phyready,
    ch0_phystatus,
    ch0_pinrsvdas,
    ch0_refdebugout,
    ch0_resetexception,
    ch0_rx10gstat,
    ch0_rxbufstatus,
    ch0_rxbyteisaligned,
    ch0_rxbyterealign,
    ch0_rxcdrlock,
    ch0_rxcdrphdone,
    ch0_rxchanbondseq,
    ch0_rxchanisaligned,
    ch0_rxchanrealign,
    ch0_rxchbondo,
    ch0_rxclkcorcnt,
    ch0_rxcominitdet,
    ch0_rxcommadet,
    ch0_rxcomsasdet,
    ch0_rxcomwakedet,
    ch0_rxctrl0,
    ch0_rxctrl1,
    ch0_rxctrl2,
    ch0_rxctrl3,
    ch0_rxdapiresetdone,
    ch0_rxdata,
    ch0_rxdatavalid,
    ch0_rxdebugpcsout,
    ch0_rxdlyalignerr,
    ch0_rxdlyalignprog,
    ch0_rxelecidle,
    ch0_rxfinealigndone,
    ch0_rxheader,
    ch0_rxheadervalid,
    ch0_rxosintdone,
    ch0_rxoutclk,
    ch0_rxphaligndone,
    ch0_rxphalignerr,
    ch0_rxphdlyresetdone,
    ch0_rxphsetinitdone,
    ch0_rxphshift180done,
    ch0_rxpkdet,
    ch0_rxpmaresetdone,
    ch0_rxprbserr,
    ch0_rxprbslocked,
    ch0_rxprogdivresetdone,
    ch0_rxqpisenn,
    ch0_rxqpisenp,
    ch0_rxresetdone,
    ch0_rxsimplexphystatus,
    ch0_rxsliderdy,
    ch0_rxslipdone,
    ch0_rxstartofseq,
    ch0_rxstatus,
    ch0_rxsyncdone,
    ch0_rxvalid,
    ch0_tx10gstat,
    ch0_txbufstatus,
    ch0_txcomfinish,
    ch0_txdapiresetdone,
    ch0_txdccdone,
    ch0_txdebugpcsout,
    ch0_txdlyalignerr,
    ch0_txdlyalignprog,
    ch0_txoutclk,
    ch0_txphaligndone,
    ch0_txphalignerr,
    ch0_txphalignoutrsvd,
    ch0_txphdlyresetdone,
    ch0_txphsetinitdone,
    ch0_txphshift180done,
    ch0_txpmaresetdone,
    ch0_txprogdivresetdone,
    ch0_txqpisenn,
    ch0_txqpisenp,
    ch0_txresetdone,
    ch0_txsimplexphystatus,
    ch0_txswingouthigh,
    ch0_txswingoutlow,
    ch0_txsyncdone,
    ch0_xpipe5_pipeline_en,
    ch1_bufgtce,
    ch1_bufgtcemask,
    ch1_bufgtdiv,
    ch1_bufgtrst,
    ch1_bufgtrstmask,
    ch1_dmonitorout,
    ch1_dmonitoroutclk,
    ch1_eyescandataerror,
    ch1_iloresetdone,
    ch1_pcsrsvdout,
    ch1_phyready,
    ch1_phystatus,
    ch1_pinrsvdas,
    ch1_refdebugout,
    ch1_resetexception,
    ch1_rx10gstat,
    ch1_rxbufstatus,
    ch1_rxbyteisaligned,
    ch1_rxbyterealign,
    ch1_rxcdrlock,
    ch1_rxcdrphdone,
    ch1_rxchanbondseq,
    ch1_rxchanisaligned,
    ch1_rxchanrealign,
    ch1_rxchbondo,
    ch1_rxclkcorcnt,
    ch1_rxcominitdet,
    ch1_rxcommadet,
    ch1_rxcomsasdet,
    ch1_rxcomwakedet,
    ch1_rxctrl0,
    ch1_rxctrl1,
    ch1_rxctrl2,
    ch1_rxctrl3,
    ch1_rxdapiresetdone,
    ch1_rxdata,
    ch1_rxdatavalid,
    ch1_rxdebugpcsout,
    ch1_rxdlyalignerr,
    ch1_rxdlyalignprog,
    ch1_rxelecidle,
    ch1_rxfinealigndone,
    ch1_rxheader,
    ch1_rxheadervalid,
    ch1_rxosintdone,
    ch1_rxoutclk,
    ch1_rxphaligndone,
    ch1_rxphalignerr,
    ch1_rxphdlyresetdone,
    ch1_rxphsetinitdone,
    ch1_rxphshift180done,
    ch1_rxpkdet,
    ch1_rxpmaresetdone,
    ch1_rxprbserr,
    ch1_rxprbslocked,
    ch1_rxprogdivresetdone,
    ch1_rxqpisenn,
    ch1_rxqpisenp,
    ch1_rxresetdone,
    ch1_rxsimplexphystatus,
    ch1_rxsliderdy,
    ch1_rxslipdone,
    ch1_rxstartofseq,
    ch1_rxstatus,
    ch1_rxsyncdone,
    ch1_rxvalid,
    ch1_tx10gstat,
    ch1_txbufstatus,
    ch1_txcomfinish,
    ch1_txdapiresetdone,
    ch1_txdccdone,
    ch1_txdebugpcsout,
    ch1_txdlyalignerr,
    ch1_txdlyalignprog,
    ch1_txoutclk,
    ch1_txphaligndone,
    ch1_txphalignerr,
    ch1_txphalignoutrsvd,
    ch1_txphdlyresetdone,
    ch1_txphsetinitdone,
    ch1_txphshift180done,
    ch1_txpmaresetdone,
    ch1_txprogdivresetdone,
    ch1_txqpisenn,
    ch1_txqpisenp,
    ch1_txresetdone,
    ch1_txsimplexphystatus,
    ch1_txswingouthigh,
    ch1_txswingoutlow,
    ch1_txsyncdone,
    ch1_xpipe5_pipeline_en,
    ch2_bufgtce,
    ch2_bufgtcemask,
    ch2_bufgtdiv,
    ch2_bufgtrst,
    ch2_bufgtrstmask,
    ch2_dmonitorout,
    ch2_dmonitoroutclk,
    ch2_eyescandataerror,
    ch2_iloresetdone,
    ch2_pcsrsvdout,
    ch2_phyready,
    ch2_phystatus,
    ch2_pinrsvdas,
    ch2_refdebugout,
    ch2_resetexception,
    ch2_rx10gstat,
    ch2_rxbufstatus,
    ch2_rxbyteisaligned,
    ch2_rxbyterealign,
    ch2_rxcdrlock,
    ch2_rxcdrphdone,
    ch2_rxchanbondseq,
    ch2_rxchanisaligned,
    ch2_rxchanrealign,
    ch2_rxchbondo,
    ch2_rxclkcorcnt,
    ch2_rxcominitdet,
    ch2_rxcommadet,
    ch2_rxcomsasdet,
    ch2_rxcomwakedet,
    ch2_rxctrl0,
    ch2_rxctrl1,
    ch2_rxctrl2,
    ch2_rxctrl3,
    ch2_rxdapiresetdone,
    ch2_rxdata,
    ch2_rxdatavalid,
    ch2_rxdebugpcsout,
    ch2_rxdlyalignerr,
    ch2_rxdlyalignprog,
    ch2_rxelecidle,
    ch2_rxfinealigndone,
    ch2_rxheader,
    ch2_rxheadervalid,
    ch2_rxosintdone,
    ch2_rxoutclk,
    ch2_rxphaligndone,
    ch2_rxphalignerr,
    ch2_rxphdlyresetdone,
    ch2_rxphsetinitdone,
    ch2_rxphshift180done,
    ch2_rxpkdet,
    ch2_rxpmaresetdone,
    ch2_rxprbserr,
    ch2_rxprbslocked,
    ch2_rxprogdivresetdone,
    ch2_rxqpisenn,
    ch2_rxqpisenp,
    ch2_rxresetdone,
    ch2_rxsimplexphystatus,
    ch2_rxsliderdy,
    ch2_rxslipdone,
    ch2_rxstartofseq,
    ch2_rxstatus,
    ch2_rxsyncdone,
    ch2_rxvalid,
    ch2_tx10gstat,
    ch2_txbufstatus,
    ch2_txcomfinish,
    ch2_txdapiresetdone,
    ch2_txdccdone,
    ch2_txdebugpcsout,
    ch2_txdlyalignerr,
    ch2_txdlyalignprog,
    ch2_txoutclk,
    ch2_txphaligndone,
    ch2_txphalignerr,
    ch2_txphalignoutrsvd,
    ch2_txphdlyresetdone,
    ch2_txphsetinitdone,
    ch2_txphshift180done,
    ch2_txpmaresetdone,
    ch2_txprogdivresetdone,
    ch2_txqpisenn,
    ch2_txqpisenp,
    ch2_txresetdone,
    ch2_txsimplexphystatus,
    ch2_txswingouthigh,
    ch2_txswingoutlow,
    ch2_txsyncdone,
    ch2_xpipe5_pipeline_en,
    ch3_bufgtce,
    ch3_bufgtcemask,
    ch3_bufgtdiv,
    ch3_bufgtrst,
    ch3_bufgtrstmask,
    ch3_dmonitorout,
    ch3_dmonitoroutclk,
    ch3_eyescandataerror,
    ch3_iloresetdone,
    ch3_pcsrsvdout,
    ch3_phyready,
    ch3_phystatus,
    ch3_pinrsvdas,
    ch3_refdebugout,
    ch3_resetexception,
    ch3_rx10gstat,
    ch3_rxbufstatus,
    ch3_rxbyteisaligned,
    ch3_rxbyterealign,
    ch3_rxcdrlock,
    ch3_rxcdrphdone,
    ch3_rxchanbondseq,
    ch3_rxchanisaligned,
    ch3_rxchanrealign,
    ch3_rxchbondo,
    ch3_rxclkcorcnt,
    ch3_rxcominitdet,
    ch3_rxcommadet,
    ch3_rxcomsasdet,
    ch3_rxcomwakedet,
    ch3_rxctrl0,
    ch3_rxctrl1,
    ch3_rxctrl2,
    ch3_rxctrl3,
    ch3_rxdapiresetdone,
    ch3_rxdata,
    ch3_rxdatavalid,
    ch3_rxdebugpcsout,
    ch3_rxdlyalignerr,
    ch3_rxdlyalignprog,
    ch3_rxelecidle,
    ch3_rxfinealigndone,
    ch3_rxheader,
    ch3_rxheadervalid,
    ch3_rxosintdone,
    ch3_rxoutclk,
    ch3_rxphaligndone,
    ch3_rxphalignerr,
    ch3_rxphdlyresetdone,
    ch3_rxphsetinitdone,
    ch3_rxphshift180done,
    ch3_rxpkdet,
    ch3_rxpmaresetdone,
    ch3_rxprbserr,
    ch3_rxprbslocked,
    ch3_rxprogdivresetdone,
    ch3_rxqpisenn,
    ch3_rxqpisenp,
    ch3_rxresetdone,
    ch3_rxsimplexphystatus,
    ch3_rxsliderdy,
    ch3_rxslipdone,
    ch3_rxstartofseq,
    ch3_rxstatus,
    ch3_rxsyncdone,
    ch3_rxvalid,
    ch3_tx10gstat,
    ch3_txbufstatus,
    ch3_txcomfinish,
    ch3_txdapiresetdone,
    ch3_txdccdone,
    ch3_txdebugpcsout,
    ch3_txdlyalignerr,
    ch3_txdlyalignprog,
    ch3_txoutclk,
    ch3_txphaligndone,
    ch3_txphalignerr,
    ch3_txphalignoutrsvd,
    ch3_txphdlyresetdone,
    ch3_txphsetinitdone,
    ch3_txphshift180done,
    ch3_txpmaresetdone,
    ch3_txprogdivresetdone,
    ch3_txqpisenn,
    ch3_txqpisenp,
    ch3_txresetdone,
    ch3_txsimplexphystatus,
    ch3_txswingouthigh,
    ch3_txswingoutlow,
    ch3_txsyncdone,
    ch3_xpipe5_pipeline_en,
    correcterr,
    ctrlrsvdout,
    debugtracetdata,
    debugtracetvalid,
    gpo,
    gtpowergood,
    hsclk0_lcpllfbclklost,
    hsclk0_lcplllock,
    hsclk0_lcpllrefclklost,
    hsclk0_lcpllrefclkmonitor,
    hsclk0_lcpllrsvdout,
    hsclk0_rpllfbclklost,
    hsclk0_rplllock,
    hsclk0_rpllrefclklost,
    hsclk0_rpllrefclkmonitor,
    hsclk0_rpllrsvdout,
    hsclk0_rxrecclkout0,
    hsclk0_rxrecclkout1,
    hsclk0_rxrecclksel,
    hsclk1_lcpllfbclklost,
    hsclk1_lcplllock,
    hsclk1_lcpllrefclklost,
    hsclk1_lcpllrefclkmonitor,
    hsclk1_lcpllrsvdout,
    hsclk1_rpllfbclklost,
    hsclk1_rplllock,
    hsclk1_rpllrefclklost,
    hsclk1_rpllrefclkmonitor,
    hsclk1_rpllrsvdout,
    hsclk1_rxrecclkout0,
    hsclk1_rxrecclkout1,
    hsclk1_rxrecclksel,
    pipenorthout,
    pipesouthout,
    refclk0_clktestsigint,
    refclk0_gtrefclkpdint,
    refclk1_clktestsigint,
    refclk1_gtrefclkpdint,
    resetdone_northout,
    resetdone_southout,
    rxmarginreqack,
    rxmarginrescmd,
    rxmarginreslanenum,
    rxmarginrespayld,
    rxmarginresreq,
    rxpinorthout,
    rxpisouthout,
    trigackin0,
    trigout0,
    txpinorthout,
    txpisouthout,
    ubinterrupt,
    ubtxuart,
    uncorrecterr,
    altclk,
    apb3clk,
    apb3paddr,
    apb3penable,
    apb3presetn,
    apb3psel,
    apb3pwdata,
    apb3pwrite,
    s_axi_lite_clk,
    s_axi_lite_resetn,
    s_axi_lite_araddr,
    s_axi_lite_arvalid,
    s_axi_lite_rready,
    s_axi_lite_awaddr,
    s_axi_lite_awvalid,
    s_axi_lite_wdata,
    s_axi_lite_wvalid,
    s_axi_lite_bready,
    bgbypassb,
    bgmonitorenb,
    bgpdb,
    bgrcalovrd,
    bgrcalovrdenb,
    ch0_cdrbmcdrreq,
    ch0_cdrfreqos,
    ch0_cdrincpctrl,
    ch0_cdrstepdir,
    ch0_cdrstepsq,
    ch0_cdrstepsx,
    ch0_clkrsvd0,
    ch0_clkrsvd1,
    ch0_dfehold,
    ch0_dfeovrd,
    ch0_dmonfiforeset,
    ch0_dmonitorclk,
    ch0_eyescanreset,
    ch0_eyescantrigger,
    ch0_gtrsvd,
    ch0_gtrxreset,
    ch0_gttxreset,
    ch0_hsdppcsreset,
    ch0_iloreset,
    ch0_iloresetmask,
    ch0_loopback,
    ch0_pcierstb,
    ch0_phyesmadaptsave,
    ch0_rxcdrhold,
    ch0_rxcdrovrden,
    ch0_rxcdrreset,
    ch0_rxchbondi,
    ch0_rxdapicodeovrden,
    ch0_rxdapicodereset,
    ch0_rxdapireset,
    ch0_rxdapiresetmask,
    ch0_rxdlyalignreq,
    ch0_rxeqtraining,
    ch0_rxgearboxslip,
    ch0_rxlatclk,
    ch0_rxlpmen,
    ch0_rxmldchaindone,
    ch0_rxmldchainreq,
    ch0_rxmlfinealignreq,
    ch0_rxoobreset,
    ch0_rxpcsresetmask,
    ch0_rxpd,
    ch0_rxphalignreq,
    ch0_rxphalignresetmask,
    ch0_rxphdlypd,
    ch0_rxphdlyreset,
    ch0_rxphsetinitreq,
    ch0_rxphshift180,
    ch0_rxpmaresetmask,
    ch0_rxpolarity,
    ch0_rxprbscntreset,
    ch0_rxprbssel,
    ch0_rxprogdivreset,
    ch0_rxqpien,
    ch0_rxrate,
    ch0_rxresetmode,
    ch0_rxslide,
    ch0_rxsyncallin,
    ch0_rxtermination,
    ch0_rxuserrdy,
    ch0_rxusrclk,
    ch0_txcominit,
    ch0_txcomsas,
    ch0_txcomwake,
    ch0_txctrl0,
    ch0_txctrl1,
    ch0_txctrl2,
    ch0_txdapicodeovrden,
    ch0_txdapicodereset,
    ch0_txdapireset,
    ch0_txdapiresetmask,
    ch0_txdata,
    ch0_txdeemph,
    ch0_txdetectrx,
    ch0_txdiffctrl,
    ch0_txdlyalignreq,
    ch0_txelecidle,
    ch0_txheader,
    ch0_txinhibit,
    ch0_txlatclk,
    ch0_txmaincursor,
    ch0_txmargin,
    ch0_txmldchaindone,
    ch0_txmldchainreq,
    ch0_txoneszeros,
    ch0_txpausedelayalign,
    ch0_txpcsresetmask,
    ch0_txpd,
    ch0_txphalignreq,
    ch0_txphalignresetmask,
    ch0_txphdlypd,
    ch0_txphdlyreset,
    ch0_txphdlytstclk,
    ch0_txphsetinitreq,
    ch0_txphshift180,
    ch0_txpicodeovrden,
    ch0_txpicodereset,
    ch0_txpippmen,
    ch0_txpippmstepsize,
    ch0_txpisopd,
    ch0_txpmaresetmask,
    ch0_txpolarity,
    ch0_txpostcursor,
    ch0_txprbsforceerr,
    ch0_txprbssel,
    ch0_txprecursor,
    ch0_txprogdivreset,
    ch0_txqpibiasen,
    ch0_txqpiweakpu,
    ch0_txrate,
    ch0_txresetmode,
    ch0_txsequence,
    ch0_txswing,
    ch0_txsyncallin,
    ch0_txuserrdy,
    ch0_txusrclk,
    ch1_cdrbmcdrreq,
    ch1_cdrfreqos,
    ch1_cdrincpctrl,
    ch1_cdrstepdir,
    ch1_cdrstepsq,
    ch1_cdrstepsx,
    ch1_clkrsvd0,
    ch1_clkrsvd1,
    ch1_dfehold,
    ch1_dfeovrd,
    ch1_dmonfiforeset,
    ch1_dmonitorclk,
    ch1_eyescanreset,
    ch1_eyescantrigger,
    ch1_gtrsvd,
    ch1_gtrxreset,
    ch1_gttxreset,
    ch1_hsdppcsreset,
    ch1_iloreset,
    ch1_iloresetmask,
    ch1_loopback,
    ch1_pcierstb,
    ch1_phyesmadaptsave,
    ch1_rxcdrhold,
    ch1_rxcdrovrden,
    ch1_rxcdrreset,
    ch1_rxchbondi,
    ch1_rxdapicodeovrden,
    ch1_rxdapicodereset,
    ch1_rxdapireset,
    ch1_rxdapiresetmask,
    ch1_rxdlyalignreq,
    ch1_rxeqtraining,
    ch1_rxgearboxslip,
    ch1_rxlatclk,
    ch1_rxlpmen,
    ch1_rxmldchaindone,
    ch1_rxmldchainreq,
    ch1_rxmlfinealignreq,
    ch1_rxoobreset,
    ch1_rxpcsresetmask,
    ch1_rxpd,
    ch1_rxphalignreq,
    ch1_rxphalignresetmask,
    ch1_rxphdlypd,
    ch1_rxphdlyreset,
    ch1_rxphsetinitreq,
    ch1_rxphshift180,
    ch1_rxpmaresetmask,
    ch1_rxpolarity,
    ch1_rxprbscntreset,
    ch1_rxprbssel,
    ch1_rxprogdivreset,
    ch1_rxqpien,
    ch1_rxrate,
    ch1_rxresetmode,
    ch1_rxslide,
    ch1_rxsyncallin,
    ch1_rxtermination,
    ch1_rxuserrdy,
    ch1_rxusrclk,
    ch1_txcominit,
    ch1_txcomsas,
    ch1_txcomwake,
    ch1_txctrl0,
    ch1_txctrl1,
    ch1_txctrl2,
    ch1_txdapicodeovrden,
    ch1_txdapicodereset,
    ch1_txdapireset,
    ch1_txdapiresetmask,
    ch1_txdata,
    ch1_txdeemph,
    ch1_txdetectrx,
    ch1_txdiffctrl,
    ch1_txdlyalignreq,
    ch1_txelecidle,
    ch1_txheader,
    ch1_txinhibit,
    ch1_txlatclk,
    ch1_txmaincursor,
    ch1_txmargin,
    ch1_txmldchaindone,
    ch1_txmldchainreq,
    ch1_txoneszeros,
    ch1_txpausedelayalign,
    ch1_txpcsresetmask,
    ch1_txpd,
    ch1_txphalignreq,
    ch1_txphalignresetmask,
    ch1_txphdlypd,
    ch1_txphdlyreset,
    ch1_txphdlytstclk,
    ch1_txphsetinitreq,
    ch1_txphshift180,
    ch1_txpicodeovrden,
    ch1_txpicodereset,
    ch1_txpippmen,
    ch1_txpippmstepsize,
    ch1_txpisopd,
    ch1_txpmaresetmask,
    ch1_txpolarity,
    ch1_txpostcursor,
    ch1_txprbsforceerr,
    ch1_txprbssel,
    ch1_txprecursor,
    ch1_txprogdivreset,
    ch1_txqpibiasen,
    ch1_txqpiweakpu,
    ch1_txrate,
    ch1_txresetmode,
    ch1_txsequence,
    ch1_txswing,
    ch1_txsyncallin,
    ch1_txuserrdy,
    ch1_txusrclk,
    ch2_cdrbmcdrreq,
    ch2_cdrfreqos,
    ch2_cdrincpctrl,
    ch2_cdrstepdir,
    ch2_cdrstepsq,
    ch2_cdrstepsx,
    ch2_clkrsvd0,
    ch2_clkrsvd1,
    ch2_dfehold,
    ch2_dfeovrd,
    ch2_dmonfiforeset,
    ch2_dmonitorclk,
    ch2_eyescanreset,
    ch2_eyescantrigger,
    ch2_gtrsvd,
    ch2_gtrxreset,
    ch2_gttxreset,
    ch2_hsdppcsreset,
    ch2_iloreset,
    ch2_iloresetmask,
    ch2_loopback,
    ch2_pcierstb,
    ch2_phyesmadaptsave,
    ch2_rxcdrhold,
    ch2_rxcdrovrden,
    ch2_rxcdrreset,
    ch2_rxchbondi,
    ch2_rxdapicodeovrden,
    ch2_rxdapicodereset,
    ch2_rxdapireset,
    ch2_rxdapiresetmask,
    ch2_rxdlyalignreq,
    ch2_rxeqtraining,
    ch2_rxgearboxslip,
    ch2_rxlatclk,
    ch2_rxlpmen,
    ch2_rxmldchaindone,
    ch2_rxmldchainreq,
    ch2_rxmlfinealignreq,
    ch2_rxoobreset,
    ch2_rxpcsresetmask,
    ch2_rxpd,
    ch2_rxphalignreq,
    ch2_rxphalignresetmask,
    ch2_rxphdlypd,
    ch2_rxphdlyreset,
    ch2_rxphsetinitreq,
    ch2_rxphshift180,
    ch2_rxpmaresetmask,
    ch2_rxpolarity,
    ch2_rxprbscntreset,
    ch2_rxprbssel,
    ch2_rxprogdivreset,
    ch2_rxqpien,
    ch2_rxrate,
    ch2_rxresetmode,
    ch2_rxslide,
    ch2_rxsyncallin,
    ch2_rxtermination,
    ch2_rxuserrdy,
    ch2_rxusrclk,
    ch2_txcominit,
    ch2_txcomsas,
    ch2_txcomwake,
    ch2_txctrl0,
    ch2_txctrl1,
    ch2_txctrl2,
    ch2_txdapicodeovrden,
    ch2_txdapicodereset,
    ch2_txdapireset,
    ch2_txdapiresetmask,
    ch2_txdata,
    ch2_txdeemph,
    ch2_txdetectrx,
    ch2_txdiffctrl,
    ch2_txdlyalignreq,
    ch2_txelecidle,
    ch2_txheader,
    ch2_txinhibit,
    ch2_txlatclk,
    ch2_txmaincursor,
    ch2_txmargin,
    ch2_txmldchaindone,
    ch2_txmldchainreq,
    ch2_txoneszeros,
    ch2_txpausedelayalign,
    ch2_txpcsresetmask,
    ch2_txpd,
    ch2_txphalignreq,
    ch2_txphalignresetmask,
    ch2_txphdlypd,
    ch2_txphdlyreset,
    ch2_txphdlytstclk,
    ch2_txphsetinitreq,
    ch2_txphshift180,
    ch2_txpicodeovrden,
    ch2_txpicodereset,
    ch2_txpippmen,
    ch2_txpippmstepsize,
    ch2_txpisopd,
    ch2_txpmaresetmask,
    ch2_txpolarity,
    ch2_txpostcursor,
    ch2_txprbsforceerr,
    ch2_txprbssel,
    ch2_txprecursor,
    ch2_txprogdivreset,
    ch2_txqpibiasen,
    ch2_txqpiweakpu,
    ch2_txrate,
    ch2_txresetmode,
    ch2_txsequence,
    ch2_txswing,
    ch2_txsyncallin,
    ch2_txuserrdy,
    ch2_txusrclk,
    ch3_cdrbmcdrreq,
    ch3_cdrfreqos,
    ch3_cdrincpctrl,
    ch3_cdrstepdir,
    ch3_cdrstepsq,
    ch3_cdrstepsx,
    ch3_clkrsvd0,
    ch3_clkrsvd1,
    ch3_dfehold,
    ch3_dfeovrd,
    ch3_dmonfiforeset,
    ch3_dmonitorclk,
    ch3_eyescanreset,
    ch3_eyescantrigger,
    ch3_gtrsvd,
    ch3_gtrxreset,
    ch3_gttxreset,
    ch3_hsdppcsreset,
    ch3_iloreset,
    ch3_iloresetmask,
    ch3_loopback,
    ch3_pcierstb,
    ch3_phyesmadaptsave,
    ch3_rxcdrhold,
    ch3_rxcdrovrden,
    ch3_rxcdrreset,
    ch3_rxchbondi,
    ch3_rxdapicodeovrden,
    ch3_rxdapicodereset,
    ch3_rxdapireset,
    ch3_rxdapiresetmask,
    ch3_rxdlyalignreq,
    ch3_rxeqtraining,
    ch3_rxgearboxslip,
    ch3_rxlatclk,
    ch3_rxlpmen,
    ch3_rxmldchaindone,
    ch3_rxmldchainreq,
    ch3_rxmlfinealignreq,
    ch3_rxoobreset,
    ch3_rxpcsresetmask,
    ch3_rxpd,
    ch3_rxphalignreq,
    ch3_rxphalignresetmask,
    ch3_rxphdlypd,
    ch3_rxphdlyreset,
    ch3_rxphsetinitreq,
    ch3_rxphshift180,
    ch3_rxpmaresetmask,
    ch3_rxpolarity,
    ch3_rxprbscntreset,
    ch3_rxprbssel,
    ch3_rxprogdivreset,
    ch3_rxqpien,
    ch3_rxrate,
    ch3_rxresetmode,
    ch3_rxslide,
    ch3_rxsyncallin,
    ch3_rxtermination,
    ch3_rxuserrdy,
    ch3_rxusrclk,
    ch3_txcominit,
    ch3_txcomsas,
    ch3_txcomwake,
    ch3_txctrl0,
    ch3_txctrl1,
    ch3_txctrl2,
    ch3_txdapicodeovrden,
    ch3_txdapicodereset,
    ch3_txdapireset,
    ch3_txdapiresetmask,
    ch3_txdata,
    ch3_txdeemph,
    ch3_txdetectrx,
    ch3_txdiffctrl,
    ch3_txdlyalignreq,
    ch3_txelecidle,
    ch3_txheader,
    ch3_txinhibit,
    ch3_txlatclk,
    ch3_txmaincursor,
    ch3_txmargin,
    ch3_txmldchaindone,
    ch3_txmldchainreq,
    ch3_txoneszeros,
    ch3_txpausedelayalign,
    ch3_txpcsresetmask,
    ch3_txpd,
    ch3_txphalignreq,
    ch3_txphalignresetmask,
    ch3_txphdlypd,
    ch3_txphdlyreset,
    ch3_txphdlytstclk,
    ch3_txphsetinitreq,
    ch3_txphshift180,
    ch3_txpicodeovrden,
    ch3_txpicodereset,
    ch3_txpippmen,
    ch3_txpippmstepsize,
    ch3_txpisopd,
    ch3_txpmaresetmask,
    ch3_txpolarity,
    ch3_txpostcursor,
    ch3_txprbsforceerr,
    ch3_txprbssel,
    ch3_txprecursor,
    ch3_txprogdivreset,
    ch3_txqpibiasen,
    ch3_txqpiweakpu,
    ch3_txrate,
    ch3_txresetmode,
    ch3_txsequence,
    ch3_txswing,
    ch3_txsyncallin,
    ch3_txuserrdy,
    ch3_txusrclk,
    coestatusdebug,
    ctrlrsvdin,
    debugtraceclk,
    debugtraceready,
    gpi,
    hsclk0_lcpllclkrsvd0,
    hsclk0_lcpllclkrsvd1,
    hsclk0_lcpllfbdiv,
    hsclk0_lcpllgtgrefclk,
    hsclk0_lcpllpd,
    hsclk0_lcpllrefclksel,
    hsclk0_lcpllreset,
    hsclk0_lcpllresetbypassmode,
    hsclk0_lcpllresetmask,
    hsclk0_lcpllrsvd0,
    hsclk0_lcpllrsvd1,
    hsclk0_lcpllsdmdata,
    hsclk0_lcpllsdmtoggle,
    hsclk0_rpllclkrsvd0,
    hsclk0_rpllclkrsvd1,
    hsclk0_rpllfbdiv,
    hsclk0_rpllgtgrefclk,
    hsclk0_rpllpd,
    hsclk0_rpllrefclksel,
    hsclk0_rpllreset,
    hsclk0_rpllresetbypassmode,
    hsclk0_rpllresetmask,
    hsclk0_rpllrsvd0,
    hsclk0_rpllrsvd1,
    hsclk0_rpllsdmdata,
    hsclk0_rpllsdmtoggle,
    hsclk1_lcpllclkrsvd0,
    hsclk1_lcpllclkrsvd1,
    hsclk1_lcpllfbdiv,
    hsclk1_lcpllgtgrefclk,
    hsclk1_lcpllpd,
    hsclk1_lcpllrefclksel,
    hsclk1_lcpllreset,
    hsclk1_lcpllresetbypassmode,
    hsclk1_lcpllresetmask,
    hsclk1_lcpllrsvd0,
    hsclk1_lcpllrsvd1,
    hsclk1_lcpllsdmdata,
    hsclk1_lcpllsdmtoggle,
    hsclk1_rpllclkrsvd0,
    hsclk1_rpllclkrsvd1,
    hsclk1_rpllfbdiv,
    hsclk1_rpllgtgrefclk,
    hsclk1_rpllpd,
    hsclk1_rpllrefclksel,
    hsclk1_rpllreset,
    hsclk1_rpllresetbypassmode,
    hsclk1_rpllresetmask,
    hsclk1_rpllrsvd0,
    hsclk1_rpllrsvd1,
    hsclk1_rpllsdmdata,
    hsclk1_rpllsdmtoggle,
    pcielinkreachtarget,
    pcieltssm,
    pipenorthin,
    pipesouthin,
    rcalenb,
    refclk0_clktestsig,
    refclk0_gtrefclkpd,
    refclk1_clktestsig,
    refclk1_gtrefclkpd,
    resetdone_northin,
    resetdone_southin,
    rxmarginclk,
    rxmarginreqcmd,
    rxmarginreqlanenum,
    rxmarginreqpayld,
    rxmarginreqreq,
    rxmarginresack,
    rxpinorthin,
    rxpisouthin,
    trigackout0,
    trigin0,
    txpinorthin,
    txpisouthin,
    ubenable,
    ubintr,
    ubiolmbrst,
    ubmbrst,
    ubrxuart,
    ch0_pcsrsvdin,
    ch1_pcsrsvdin,
    ch2_pcsrsvdin,
    ch3_pcsrsvdin,
    GT_REFCLK0,
    rxp,
    rxn,
    txp,
    txn,
    ch0_rxmstdatapathreset,
    ch1_rxmstdatapathreset,
    ch2_rxmstdatapathreset,
    ch3_rxmstdatapathreset,
    ch0_txmstdatapathreset,
    ch1_txmstdatapathreset,
    ch2_txmstdatapathreset,
    ch3_txmstdatapathreset,
    ch0_rxmstreset,
    ch1_rxmstreset,
    ch2_rxmstreset,
    ch3_rxmstreset,
    ch0_rxmstresetdone,
    ch1_rxmstresetdone,
    ch2_rxmstresetdone,
    ch3_rxmstresetdone,
    ch0_txmstreset,
    ch1_txmstreset,
    ch2_txmstreset,
    ch3_txmstreset,
    ch0_txmstresetdone,
    ch1_txmstresetdone,
    ch2_txmstresetdone,
    ch3_txmstresetdone);
  output [31:0]apb3prdata;
  output apb3pready;
  output apb3pslverr;
  output s_axi_lite_arready;
  output [31:0]s_axi_lite_rdata;
  output s_axi_lite_rvalid;
  output s_axi_lite_awready;
  output s_axi_lite_wready;
  output [1:0]s_axi_lite_rresp;
  output [1:0]s_axi_lite_bresp;
  output s_axi_lite_bvalid;
  output ch0_bufgtce;
  output [3:0]ch0_bufgtcemask;
  output [11:0]ch0_bufgtdiv;
  output ch0_bufgtrst;
  output [3:0]ch0_bufgtrstmask;
  output [31:0]ch0_dmonitorout;
  output ch0_dmonitoroutclk;
  output ch0_eyescandataerror;
  output ch0_iloresetdone;
  output [15:0]ch0_pcsrsvdout;
  output ch0_phyready;
  output ch0_phystatus;
  output [15:0]ch0_pinrsvdas;
  output [1:0]ch0_refdebugout;
  output ch0_resetexception;
  output [7:0]ch0_rx10gstat;
  output [2:0]ch0_rxbufstatus;
  output ch0_rxbyteisaligned;
  output ch0_rxbyterealign;
  output ch0_rxcdrlock;
  output ch0_rxcdrphdone;
  output ch0_rxchanbondseq;
  output ch0_rxchanisaligned;
  output ch0_rxchanrealign;
  output [4:0]ch0_rxchbondo;
  output [1:0]ch0_rxclkcorcnt;
  output ch0_rxcominitdet;
  output ch0_rxcommadet;
  output ch0_rxcomsasdet;
  output ch0_rxcomwakedet;
  output [15:0]ch0_rxctrl0;
  output [15:0]ch0_rxctrl1;
  output [7:0]ch0_rxctrl2;
  output [7:0]ch0_rxctrl3;
  output ch0_rxdapiresetdone;
  output [127:0]ch0_rxdata;
  output [1:0]ch0_rxdatavalid;
  output ch0_rxdebugpcsout;
  output ch0_rxdlyalignerr;
  output ch0_rxdlyalignprog;
  output ch0_rxelecidle;
  output ch0_rxfinealigndone;
  output [5:0]ch0_rxheader;
  output [1:0]ch0_rxheadervalid;
  output ch0_rxosintdone;
  output ch0_rxoutclk;
  output ch0_rxphaligndone;
  output ch0_rxphalignerr;
  output ch0_rxphdlyresetdone;
  output ch0_rxphsetinitdone;
  output ch0_rxphshift180done;
  output ch0_rxpkdet;
  output ch0_rxpmaresetdone;
  output ch0_rxprbserr;
  output ch0_rxprbslocked;
  output ch0_rxprogdivresetdone;
  output ch0_rxqpisenn;
  output ch0_rxqpisenp;
  output ch0_rxresetdone;
  output ch0_rxsimplexphystatus;
  output ch0_rxsliderdy;
  output ch0_rxslipdone;
  output [1:0]ch0_rxstartofseq;
  output [2:0]ch0_rxstatus;
  output ch0_rxsyncdone;
  output ch0_rxvalid;
  output ch0_tx10gstat;
  output [1:0]ch0_txbufstatus;
  output ch0_txcomfinish;
  output ch0_txdapiresetdone;
  output ch0_txdccdone;
  output ch0_txdebugpcsout;
  output ch0_txdlyalignerr;
  output ch0_txdlyalignprog;
  output ch0_txoutclk;
  output ch0_txphaligndone;
  output ch0_txphalignerr;
  output ch0_txphalignoutrsvd;
  output ch0_txphdlyresetdone;
  output ch0_txphsetinitdone;
  output ch0_txphshift180done;
  output ch0_txpmaresetdone;
  output ch0_txprogdivresetdone;
  output ch0_txqpisenn;
  output ch0_txqpisenp;
  output ch0_txresetdone;
  output ch0_txsimplexphystatus;
  output ch0_txswingouthigh;
  output ch0_txswingoutlow;
  output ch0_txsyncdone;
  output ch0_xpipe5_pipeline_en;
  output ch1_bufgtce;
  output [3:0]ch1_bufgtcemask;
  output [11:0]ch1_bufgtdiv;
  output ch1_bufgtrst;
  output [3:0]ch1_bufgtrstmask;
  output [31:0]ch1_dmonitorout;
  output ch1_dmonitoroutclk;
  output ch1_eyescandataerror;
  output ch1_iloresetdone;
  output [15:0]ch1_pcsrsvdout;
  output ch1_phyready;
  output ch1_phystatus;
  output [15:0]ch1_pinrsvdas;
  output [1:0]ch1_refdebugout;
  output ch1_resetexception;
  output [7:0]ch1_rx10gstat;
  output [2:0]ch1_rxbufstatus;
  output ch1_rxbyteisaligned;
  output ch1_rxbyterealign;
  output ch1_rxcdrlock;
  output ch1_rxcdrphdone;
  output ch1_rxchanbondseq;
  output ch1_rxchanisaligned;
  output ch1_rxchanrealign;
  output [4:0]ch1_rxchbondo;
  output [1:0]ch1_rxclkcorcnt;
  output ch1_rxcominitdet;
  output ch1_rxcommadet;
  output ch1_rxcomsasdet;
  output ch1_rxcomwakedet;
  output [15:0]ch1_rxctrl0;
  output [15:0]ch1_rxctrl1;
  output [7:0]ch1_rxctrl2;
  output [7:0]ch1_rxctrl3;
  output ch1_rxdapiresetdone;
  output [127:0]ch1_rxdata;
  output [1:0]ch1_rxdatavalid;
  output ch1_rxdebugpcsout;
  output ch1_rxdlyalignerr;
  output ch1_rxdlyalignprog;
  output ch1_rxelecidle;
  output ch1_rxfinealigndone;
  output [5:0]ch1_rxheader;
  output [1:0]ch1_rxheadervalid;
  output ch1_rxosintdone;
  output ch1_rxoutclk;
  output ch1_rxphaligndone;
  output ch1_rxphalignerr;
  output ch1_rxphdlyresetdone;
  output ch1_rxphsetinitdone;
  output ch1_rxphshift180done;
  output ch1_rxpkdet;
  output ch1_rxpmaresetdone;
  output ch1_rxprbserr;
  output ch1_rxprbslocked;
  output ch1_rxprogdivresetdone;
  output ch1_rxqpisenn;
  output ch1_rxqpisenp;
  output ch1_rxresetdone;
  output ch1_rxsimplexphystatus;
  output ch1_rxsliderdy;
  output ch1_rxslipdone;
  output [1:0]ch1_rxstartofseq;
  output [2:0]ch1_rxstatus;
  output ch1_rxsyncdone;
  output ch1_rxvalid;
  output ch1_tx10gstat;
  output [1:0]ch1_txbufstatus;
  output ch1_txcomfinish;
  output ch1_txdapiresetdone;
  output ch1_txdccdone;
  output ch1_txdebugpcsout;
  output ch1_txdlyalignerr;
  output ch1_txdlyalignprog;
  output ch1_txoutclk;
  output ch1_txphaligndone;
  output ch1_txphalignerr;
  output ch1_txphalignoutrsvd;
  output ch1_txphdlyresetdone;
  output ch1_txphsetinitdone;
  output ch1_txphshift180done;
  output ch1_txpmaresetdone;
  output ch1_txprogdivresetdone;
  output ch1_txqpisenn;
  output ch1_txqpisenp;
  output ch1_txresetdone;
  output ch1_txsimplexphystatus;
  output ch1_txswingouthigh;
  output ch1_txswingoutlow;
  output ch1_txsyncdone;
  output ch1_xpipe5_pipeline_en;
  output ch2_bufgtce;
  output [3:0]ch2_bufgtcemask;
  output [11:0]ch2_bufgtdiv;
  output ch2_bufgtrst;
  output [3:0]ch2_bufgtrstmask;
  output [31:0]ch2_dmonitorout;
  output ch2_dmonitoroutclk;
  output ch2_eyescandataerror;
  output ch2_iloresetdone;
  output [15:0]ch2_pcsrsvdout;
  output ch2_phyready;
  output ch2_phystatus;
  output [15:0]ch2_pinrsvdas;
  output [1:0]ch2_refdebugout;
  output ch2_resetexception;
  output [7:0]ch2_rx10gstat;
  output [2:0]ch2_rxbufstatus;
  output ch2_rxbyteisaligned;
  output ch2_rxbyterealign;
  output ch2_rxcdrlock;
  output ch2_rxcdrphdone;
  output ch2_rxchanbondseq;
  output ch2_rxchanisaligned;
  output ch2_rxchanrealign;
  output [4:0]ch2_rxchbondo;
  output [1:0]ch2_rxclkcorcnt;
  output ch2_rxcominitdet;
  output ch2_rxcommadet;
  output ch2_rxcomsasdet;
  output ch2_rxcomwakedet;
  output [15:0]ch2_rxctrl0;
  output [15:0]ch2_rxctrl1;
  output [7:0]ch2_rxctrl2;
  output [7:0]ch2_rxctrl3;
  output ch2_rxdapiresetdone;
  output [127:0]ch2_rxdata;
  output [1:0]ch2_rxdatavalid;
  output ch2_rxdebugpcsout;
  output ch2_rxdlyalignerr;
  output ch2_rxdlyalignprog;
  output ch2_rxelecidle;
  output ch2_rxfinealigndone;
  output [5:0]ch2_rxheader;
  output [1:0]ch2_rxheadervalid;
  output ch2_rxosintdone;
  output ch2_rxoutclk;
  output ch2_rxphaligndone;
  output ch2_rxphalignerr;
  output ch2_rxphdlyresetdone;
  output ch2_rxphsetinitdone;
  output ch2_rxphshift180done;
  output ch2_rxpkdet;
  output ch2_rxpmaresetdone;
  output ch2_rxprbserr;
  output ch2_rxprbslocked;
  output ch2_rxprogdivresetdone;
  output ch2_rxqpisenn;
  output ch2_rxqpisenp;
  output ch2_rxresetdone;
  output ch2_rxsimplexphystatus;
  output ch2_rxsliderdy;
  output ch2_rxslipdone;
  output [1:0]ch2_rxstartofseq;
  output [2:0]ch2_rxstatus;
  output ch2_rxsyncdone;
  output ch2_rxvalid;
  output ch2_tx10gstat;
  output [1:0]ch2_txbufstatus;
  output ch2_txcomfinish;
  output ch2_txdapiresetdone;
  output ch2_txdccdone;
  output ch2_txdebugpcsout;
  output ch2_txdlyalignerr;
  output ch2_txdlyalignprog;
  output ch2_txoutclk;
  output ch2_txphaligndone;
  output ch2_txphalignerr;
  output ch2_txphalignoutrsvd;
  output ch2_txphdlyresetdone;
  output ch2_txphsetinitdone;
  output ch2_txphshift180done;
  output ch2_txpmaresetdone;
  output ch2_txprogdivresetdone;
  output ch2_txqpisenn;
  output ch2_txqpisenp;
  output ch2_txresetdone;
  output ch2_txsimplexphystatus;
  output ch2_txswingouthigh;
  output ch2_txswingoutlow;
  output ch2_txsyncdone;
  output ch2_xpipe5_pipeline_en;
  output ch3_bufgtce;
  output [3:0]ch3_bufgtcemask;
  output [11:0]ch3_bufgtdiv;
  output ch3_bufgtrst;
  output [3:0]ch3_bufgtrstmask;
  output [31:0]ch3_dmonitorout;
  output ch3_dmonitoroutclk;
  output ch3_eyescandataerror;
  output ch3_iloresetdone;
  output [15:0]ch3_pcsrsvdout;
  output ch3_phyready;
  output ch3_phystatus;
  output [15:0]ch3_pinrsvdas;
  output [1:0]ch3_refdebugout;
  output ch3_resetexception;
  output [7:0]ch3_rx10gstat;
  output [2:0]ch3_rxbufstatus;
  output ch3_rxbyteisaligned;
  output ch3_rxbyterealign;
  output ch3_rxcdrlock;
  output ch3_rxcdrphdone;
  output ch3_rxchanbondseq;
  output ch3_rxchanisaligned;
  output ch3_rxchanrealign;
  output [4:0]ch3_rxchbondo;
  output [1:0]ch3_rxclkcorcnt;
  output ch3_rxcominitdet;
  output ch3_rxcommadet;
  output ch3_rxcomsasdet;
  output ch3_rxcomwakedet;
  output [15:0]ch3_rxctrl0;
  output [15:0]ch3_rxctrl1;
  output [7:0]ch3_rxctrl2;
  output [7:0]ch3_rxctrl3;
  output ch3_rxdapiresetdone;
  output [127:0]ch3_rxdata;
  output [1:0]ch3_rxdatavalid;
  output ch3_rxdebugpcsout;
  output ch3_rxdlyalignerr;
  output ch3_rxdlyalignprog;
  output ch3_rxelecidle;
  output ch3_rxfinealigndone;
  output [5:0]ch3_rxheader;
  output [1:0]ch3_rxheadervalid;
  output ch3_rxosintdone;
  output ch3_rxoutclk;
  output ch3_rxphaligndone;
  output ch3_rxphalignerr;
  output ch3_rxphdlyresetdone;
  output ch3_rxphsetinitdone;
  output ch3_rxphshift180done;
  output ch3_rxpkdet;
  output ch3_rxpmaresetdone;
  output ch3_rxprbserr;
  output ch3_rxprbslocked;
  output ch3_rxprogdivresetdone;
  output ch3_rxqpisenn;
  output ch3_rxqpisenp;
  output ch3_rxresetdone;
  output ch3_rxsimplexphystatus;
  output ch3_rxsliderdy;
  output ch3_rxslipdone;
  output [1:0]ch3_rxstartofseq;
  output [2:0]ch3_rxstatus;
  output ch3_rxsyncdone;
  output ch3_rxvalid;
  output ch3_tx10gstat;
  output [1:0]ch3_txbufstatus;
  output ch3_txcomfinish;
  output ch3_txdapiresetdone;
  output ch3_txdccdone;
  output ch3_txdebugpcsout;
  output ch3_txdlyalignerr;
  output ch3_txdlyalignprog;
  output ch3_txoutclk;
  output ch3_txphaligndone;
  output ch3_txphalignerr;
  output ch3_txphalignoutrsvd;
  output ch3_txphdlyresetdone;
  output ch3_txphsetinitdone;
  output ch3_txphshift180done;
  output ch3_txpmaresetdone;
  output ch3_txprogdivresetdone;
  output ch3_txqpisenn;
  output ch3_txqpisenp;
  output ch3_txresetdone;
  output ch3_txsimplexphystatus;
  output ch3_txswingouthigh;
  output ch3_txswingoutlow;
  output ch3_txsyncdone;
  output ch3_xpipe5_pipeline_en;
  output correcterr;
  output [7:0]ctrlrsvdout;
  output [15:0]debugtracetdata;
  output debugtracetvalid;
  output [31:0]gpo;
  output gtpowergood;
  output hsclk0_lcpllfbclklost;
  output hsclk0_lcplllock;
  output hsclk0_lcpllrefclklost;
  output hsclk0_lcpllrefclkmonitor;
  output [7:0]hsclk0_lcpllrsvdout;
  output hsclk0_rpllfbclklost;
  output hsclk0_rplllock;
  output hsclk0_rpllrefclklost;
  output hsclk0_rpllrefclkmonitor;
  output [7:0]hsclk0_rpllrsvdout;
  output hsclk0_rxrecclkout0;
  output hsclk0_rxrecclkout1;
  output [1:0]hsclk0_rxrecclksel;
  output hsclk1_lcpllfbclklost;
  output hsclk1_lcplllock;
  output hsclk1_lcpllrefclklost;
  output hsclk1_lcpllrefclkmonitor;
  output [7:0]hsclk1_lcpllrsvdout;
  output hsclk1_rpllfbclklost;
  output hsclk1_rplllock;
  output hsclk1_rpllrefclklost;
  output hsclk1_rpllrefclkmonitor;
  output [7:0]hsclk1_rpllrsvdout;
  output hsclk1_rxrecclkout0;
  output hsclk1_rxrecclkout1;
  output [1:0]hsclk1_rxrecclksel;
  output [5:0]pipenorthout;
  output [5:0]pipesouthout;
  output refclk0_clktestsigint;
  output refclk0_gtrefclkpdint;
  output refclk1_clktestsigint;
  output refclk1_gtrefclkpdint;
  output [1:0]resetdone_northout;
  output [1:0]resetdone_southout;
  output rxmarginreqack;
  output [3:0]rxmarginrescmd;
  output [1:0]rxmarginreslanenum;
  output [7:0]rxmarginrespayld;
  output rxmarginresreq;
  output [3:0]rxpinorthout;
  output [3:0]rxpisouthout;
  output trigackin0;
  output trigout0;
  output [3:0]txpinorthout;
  output [3:0]txpisouthout;
  output ubinterrupt;
  output ubtxuart;
  output uncorrecterr;
  input altclk;
  input apb3clk;
  input [15:0]apb3paddr;
  input apb3penable;
  input apb3presetn;
  input apb3psel;
  input [31:0]apb3pwdata;
  input apb3pwrite;
  input s_axi_lite_clk;
  input s_axi_lite_resetn;
  input [17:0]s_axi_lite_araddr;
  input s_axi_lite_arvalid;
  input s_axi_lite_rready;
  input [17:0]s_axi_lite_awaddr;
  input s_axi_lite_awvalid;
  input [31:0]s_axi_lite_wdata;
  input s_axi_lite_wvalid;
  input s_axi_lite_bready;
  input bgbypassb;
  input bgmonitorenb;
  input bgpdb;
  input [4:0]bgrcalovrd;
  input bgrcalovrdenb;
  input ch0_cdrbmcdrreq;
  input ch0_cdrfreqos;
  input ch0_cdrincpctrl;
  input ch0_cdrstepdir;
  input ch0_cdrstepsq;
  input ch0_cdrstepsx;
  input ch0_clkrsvd0;
  input ch0_clkrsvd1;
  input ch0_dfehold;
  input ch0_dfeovrd;
  input ch0_dmonfiforeset;
  input ch0_dmonitorclk;
  input ch0_eyescanreset;
  input ch0_eyescantrigger;
  input [15:0]ch0_gtrsvd;
  input ch0_gtrxreset;
  input ch0_gttxreset;
  input ch0_hsdppcsreset;
  input ch0_iloreset;
  input ch0_iloresetmask;
  input [2:0]ch0_loopback;
  input ch0_pcierstb;
  input ch0_phyesmadaptsave;
  input ch0_rxcdrhold;
  input ch0_rxcdrovrden;
  input ch0_rxcdrreset;
  input [4:0]ch0_rxchbondi;
  input ch0_rxdapicodeovrden;
  input ch0_rxdapicodereset;
  input ch0_rxdapireset;
  input [1:0]ch0_rxdapiresetmask;
  input ch0_rxdlyalignreq;
  input ch0_rxeqtraining;
  input ch0_rxgearboxslip;
  input ch0_rxlatclk;
  input ch0_rxlpmen;
  input ch0_rxmldchaindone;
  input ch0_rxmldchainreq;
  input ch0_rxmlfinealignreq;
  input ch0_rxoobreset;
  input [4:0]ch0_rxpcsresetmask;
  input [1:0]ch0_rxpd;
  input ch0_rxphalignreq;
  input [1:0]ch0_rxphalignresetmask;
  input ch0_rxphdlypd;
  input ch0_rxphdlyreset;
  input ch0_rxphsetinitreq;
  input ch0_rxphshift180;
  input [6:0]ch0_rxpmaresetmask;
  input ch0_rxpolarity;
  input ch0_rxprbscntreset;
  input [3:0]ch0_rxprbssel;
  input ch0_rxprogdivreset;
  input ch0_rxqpien;
  input [7:0]ch0_rxrate;
  input [1:0]ch0_rxresetmode;
  input ch0_rxslide;
  input ch0_rxsyncallin;
  input ch0_rxtermination;
  input ch0_rxuserrdy;
  input ch0_rxusrclk;
  input ch0_txcominit;
  input ch0_txcomsas;
  input ch0_txcomwake;
  input [15:0]ch0_txctrl0;
  input [15:0]ch0_txctrl1;
  input [7:0]ch0_txctrl2;
  input ch0_txdapicodeovrden;
  input ch0_txdapicodereset;
  input ch0_txdapireset;
  input [1:0]ch0_txdapiresetmask;
  input [127:0]ch0_txdata;
  input [1:0]ch0_txdeemph;
  input ch0_txdetectrx;
  input [4:0]ch0_txdiffctrl;
  input ch0_txdlyalignreq;
  input ch0_txelecidle;
  input [5:0]ch0_txheader;
  input ch0_txinhibit;
  input ch0_txlatclk;
  input [6:0]ch0_txmaincursor;
  input [2:0]ch0_txmargin;
  input ch0_txmldchaindone;
  input ch0_txmldchainreq;
  input ch0_txoneszeros;
  input ch0_txpausedelayalign;
  input ch0_txpcsresetmask;
  input [1:0]ch0_txpd;
  input ch0_txphalignreq;
  input [1:0]ch0_txphalignresetmask;
  input ch0_txphdlypd;
  input ch0_txphdlyreset;
  input ch0_txphdlytstclk;
  input ch0_txphsetinitreq;
  input ch0_txphshift180;
  input ch0_txpicodeovrden;
  input ch0_txpicodereset;
  input ch0_txpippmen;
  input [4:0]ch0_txpippmstepsize;
  input ch0_txpisopd;
  input [2:0]ch0_txpmaresetmask;
  input ch0_txpolarity;
  input [4:0]ch0_txpostcursor;
  input ch0_txprbsforceerr;
  input [3:0]ch0_txprbssel;
  input [4:0]ch0_txprecursor;
  input ch0_txprogdivreset;
  input ch0_txqpibiasen;
  input ch0_txqpiweakpu;
  input [7:0]ch0_txrate;
  input [1:0]ch0_txresetmode;
  input [6:0]ch0_txsequence;
  input ch0_txswing;
  input ch0_txsyncallin;
  input ch0_txuserrdy;
  input ch0_txusrclk;
  input ch1_cdrbmcdrreq;
  input ch1_cdrfreqos;
  input ch1_cdrincpctrl;
  input ch1_cdrstepdir;
  input ch1_cdrstepsq;
  input ch1_cdrstepsx;
  input ch1_clkrsvd0;
  input ch1_clkrsvd1;
  input ch1_dfehold;
  input ch1_dfeovrd;
  input ch1_dmonfiforeset;
  input ch1_dmonitorclk;
  input ch1_eyescanreset;
  input ch1_eyescantrigger;
  input [15:0]ch1_gtrsvd;
  input ch1_gtrxreset;
  input ch1_gttxreset;
  input ch1_hsdppcsreset;
  input ch1_iloreset;
  input ch1_iloresetmask;
  input [2:0]ch1_loopback;
  input ch1_pcierstb;
  input ch1_phyesmadaptsave;
  input ch1_rxcdrhold;
  input ch1_rxcdrovrden;
  input ch1_rxcdrreset;
  input [4:0]ch1_rxchbondi;
  input ch1_rxdapicodeovrden;
  input ch1_rxdapicodereset;
  input ch1_rxdapireset;
  input [1:0]ch1_rxdapiresetmask;
  input ch1_rxdlyalignreq;
  input ch1_rxeqtraining;
  input ch1_rxgearboxslip;
  input ch1_rxlatclk;
  input ch1_rxlpmen;
  input ch1_rxmldchaindone;
  input ch1_rxmldchainreq;
  input ch1_rxmlfinealignreq;
  input ch1_rxoobreset;
  input [4:0]ch1_rxpcsresetmask;
  input [1:0]ch1_rxpd;
  input ch1_rxphalignreq;
  input [1:0]ch1_rxphalignresetmask;
  input ch1_rxphdlypd;
  input ch1_rxphdlyreset;
  input ch1_rxphsetinitreq;
  input ch1_rxphshift180;
  input [6:0]ch1_rxpmaresetmask;
  input ch1_rxpolarity;
  input ch1_rxprbscntreset;
  input [3:0]ch1_rxprbssel;
  input ch1_rxprogdivreset;
  input ch1_rxqpien;
  input [7:0]ch1_rxrate;
  input [1:0]ch1_rxresetmode;
  input ch1_rxslide;
  input ch1_rxsyncallin;
  input ch1_rxtermination;
  input ch1_rxuserrdy;
  input ch1_rxusrclk;
  input ch1_txcominit;
  input ch1_txcomsas;
  input ch1_txcomwake;
  input [15:0]ch1_txctrl0;
  input [15:0]ch1_txctrl1;
  input [7:0]ch1_txctrl2;
  input ch1_txdapicodeovrden;
  input ch1_txdapicodereset;
  input ch1_txdapireset;
  input [1:0]ch1_txdapiresetmask;
  input [127:0]ch1_txdata;
  input [1:0]ch1_txdeemph;
  input ch1_txdetectrx;
  input [4:0]ch1_txdiffctrl;
  input ch1_txdlyalignreq;
  input ch1_txelecidle;
  input [5:0]ch1_txheader;
  input ch1_txinhibit;
  input ch1_txlatclk;
  input [6:0]ch1_txmaincursor;
  input [2:0]ch1_txmargin;
  input ch1_txmldchaindone;
  input ch1_txmldchainreq;
  input ch1_txoneszeros;
  input ch1_txpausedelayalign;
  input ch1_txpcsresetmask;
  input [1:0]ch1_txpd;
  input ch1_txphalignreq;
  input [1:0]ch1_txphalignresetmask;
  input ch1_txphdlypd;
  input ch1_txphdlyreset;
  input ch1_txphdlytstclk;
  input ch1_txphsetinitreq;
  input ch1_txphshift180;
  input ch1_txpicodeovrden;
  input ch1_txpicodereset;
  input ch1_txpippmen;
  input [4:0]ch1_txpippmstepsize;
  input ch1_txpisopd;
  input [2:0]ch1_txpmaresetmask;
  input ch1_txpolarity;
  input [4:0]ch1_txpostcursor;
  input ch1_txprbsforceerr;
  input [3:0]ch1_txprbssel;
  input [4:0]ch1_txprecursor;
  input ch1_txprogdivreset;
  input ch1_txqpibiasen;
  input ch1_txqpiweakpu;
  input [7:0]ch1_txrate;
  input [1:0]ch1_txresetmode;
  input [6:0]ch1_txsequence;
  input ch1_txswing;
  input ch1_txsyncallin;
  input ch1_txuserrdy;
  input ch1_txusrclk;
  input ch2_cdrbmcdrreq;
  input ch2_cdrfreqos;
  input ch2_cdrincpctrl;
  input ch2_cdrstepdir;
  input ch2_cdrstepsq;
  input ch2_cdrstepsx;
  input ch2_clkrsvd0;
  input ch2_clkrsvd1;
  input ch2_dfehold;
  input ch2_dfeovrd;
  input ch2_dmonfiforeset;
  input ch2_dmonitorclk;
  input ch2_eyescanreset;
  input ch2_eyescantrigger;
  input [15:0]ch2_gtrsvd;
  input ch2_gtrxreset;
  input ch2_gttxreset;
  input ch2_hsdppcsreset;
  input ch2_iloreset;
  input ch2_iloresetmask;
  input [2:0]ch2_loopback;
  input ch2_pcierstb;
  input ch2_phyesmadaptsave;
  input ch2_rxcdrhold;
  input ch2_rxcdrovrden;
  input ch2_rxcdrreset;
  input [4:0]ch2_rxchbondi;
  input ch2_rxdapicodeovrden;
  input ch2_rxdapicodereset;
  input ch2_rxdapireset;
  input [1:0]ch2_rxdapiresetmask;
  input ch2_rxdlyalignreq;
  input ch2_rxeqtraining;
  input ch2_rxgearboxslip;
  input ch2_rxlatclk;
  input ch2_rxlpmen;
  input ch2_rxmldchaindone;
  input ch2_rxmldchainreq;
  input ch2_rxmlfinealignreq;
  input ch2_rxoobreset;
  input [4:0]ch2_rxpcsresetmask;
  input [1:0]ch2_rxpd;
  input ch2_rxphalignreq;
  input [1:0]ch2_rxphalignresetmask;
  input ch2_rxphdlypd;
  input ch2_rxphdlyreset;
  input ch2_rxphsetinitreq;
  input ch2_rxphshift180;
  input [6:0]ch2_rxpmaresetmask;
  input ch2_rxpolarity;
  input ch2_rxprbscntreset;
  input [3:0]ch2_rxprbssel;
  input ch2_rxprogdivreset;
  input ch2_rxqpien;
  input [7:0]ch2_rxrate;
  input [1:0]ch2_rxresetmode;
  input ch2_rxslide;
  input ch2_rxsyncallin;
  input ch2_rxtermination;
  input ch2_rxuserrdy;
  input ch2_rxusrclk;
  input ch2_txcominit;
  input ch2_txcomsas;
  input ch2_txcomwake;
  input [15:0]ch2_txctrl0;
  input [15:0]ch2_txctrl1;
  input [7:0]ch2_txctrl2;
  input ch2_txdapicodeovrden;
  input ch2_txdapicodereset;
  input ch2_txdapireset;
  input [1:0]ch2_txdapiresetmask;
  input [127:0]ch2_txdata;
  input [1:0]ch2_txdeemph;
  input ch2_txdetectrx;
  input [4:0]ch2_txdiffctrl;
  input ch2_txdlyalignreq;
  input ch2_txelecidle;
  input [5:0]ch2_txheader;
  input ch2_txinhibit;
  input ch2_txlatclk;
  input [6:0]ch2_txmaincursor;
  input [2:0]ch2_txmargin;
  input ch2_txmldchaindone;
  input ch2_txmldchainreq;
  input ch2_txoneszeros;
  input ch2_txpausedelayalign;
  input ch2_txpcsresetmask;
  input [1:0]ch2_txpd;
  input ch2_txphalignreq;
  input [1:0]ch2_txphalignresetmask;
  input ch2_txphdlypd;
  input ch2_txphdlyreset;
  input ch2_txphdlytstclk;
  input ch2_txphsetinitreq;
  input ch2_txphshift180;
  input ch2_txpicodeovrden;
  input ch2_txpicodereset;
  input ch2_txpippmen;
  input [4:0]ch2_txpippmstepsize;
  input ch2_txpisopd;
  input [2:0]ch2_txpmaresetmask;
  input ch2_txpolarity;
  input [4:0]ch2_txpostcursor;
  input ch2_txprbsforceerr;
  input [3:0]ch2_txprbssel;
  input [4:0]ch2_txprecursor;
  input ch2_txprogdivreset;
  input ch2_txqpibiasen;
  input ch2_txqpiweakpu;
  input [7:0]ch2_txrate;
  input [1:0]ch2_txresetmode;
  input [6:0]ch2_txsequence;
  input ch2_txswing;
  input ch2_txsyncallin;
  input ch2_txuserrdy;
  input ch2_txusrclk;
  input ch3_cdrbmcdrreq;
  input ch3_cdrfreqos;
  input ch3_cdrincpctrl;
  input ch3_cdrstepdir;
  input ch3_cdrstepsq;
  input ch3_cdrstepsx;
  input ch3_clkrsvd0;
  input ch3_clkrsvd1;
  input ch3_dfehold;
  input ch3_dfeovrd;
  input ch3_dmonfiforeset;
  input ch3_dmonitorclk;
  input ch3_eyescanreset;
  input ch3_eyescantrigger;
  input [15:0]ch3_gtrsvd;
  input ch3_gtrxreset;
  input ch3_gttxreset;
  input ch3_hsdppcsreset;
  input ch3_iloreset;
  input ch3_iloresetmask;
  input [2:0]ch3_loopback;
  input ch3_pcierstb;
  input ch3_phyesmadaptsave;
  input ch3_rxcdrhold;
  input ch3_rxcdrovrden;
  input ch3_rxcdrreset;
  input [4:0]ch3_rxchbondi;
  input ch3_rxdapicodeovrden;
  input ch3_rxdapicodereset;
  input ch3_rxdapireset;
  input [1:0]ch3_rxdapiresetmask;
  input ch3_rxdlyalignreq;
  input ch3_rxeqtraining;
  input ch3_rxgearboxslip;
  input ch3_rxlatclk;
  input ch3_rxlpmen;
  input ch3_rxmldchaindone;
  input ch3_rxmldchainreq;
  input ch3_rxmlfinealignreq;
  input ch3_rxoobreset;
  input [4:0]ch3_rxpcsresetmask;
  input [1:0]ch3_rxpd;
  input ch3_rxphalignreq;
  input [1:0]ch3_rxphalignresetmask;
  input ch3_rxphdlypd;
  input ch3_rxphdlyreset;
  input ch3_rxphsetinitreq;
  input ch3_rxphshift180;
  input [6:0]ch3_rxpmaresetmask;
  input ch3_rxpolarity;
  input ch3_rxprbscntreset;
  input [3:0]ch3_rxprbssel;
  input ch3_rxprogdivreset;
  input ch3_rxqpien;
  input [7:0]ch3_rxrate;
  input [1:0]ch3_rxresetmode;
  input ch3_rxslide;
  input ch3_rxsyncallin;
  input ch3_rxtermination;
  input ch3_rxuserrdy;
  input ch3_rxusrclk;
  input ch3_txcominit;
  input ch3_txcomsas;
  input ch3_txcomwake;
  input [15:0]ch3_txctrl0;
  input [15:0]ch3_txctrl1;
  input [7:0]ch3_txctrl2;
  input ch3_txdapicodeovrden;
  input ch3_txdapicodereset;
  input ch3_txdapireset;
  input [1:0]ch3_txdapiresetmask;
  input [127:0]ch3_txdata;
  input [1:0]ch3_txdeemph;
  input ch3_txdetectrx;
  input [4:0]ch3_txdiffctrl;
  input ch3_txdlyalignreq;
  input ch3_txelecidle;
  input [5:0]ch3_txheader;
  input ch3_txinhibit;
  input ch3_txlatclk;
  input [6:0]ch3_txmaincursor;
  input [2:0]ch3_txmargin;
  input ch3_txmldchaindone;
  input ch3_txmldchainreq;
  input ch3_txoneszeros;
  input ch3_txpausedelayalign;
  input ch3_txpcsresetmask;
  input [1:0]ch3_txpd;
  input ch3_txphalignreq;
  input [1:0]ch3_txphalignresetmask;
  input ch3_txphdlypd;
  input ch3_txphdlyreset;
  input ch3_txphdlytstclk;
  input ch3_txphsetinitreq;
  input ch3_txphshift180;
  input ch3_txpicodeovrden;
  input ch3_txpicodereset;
  input ch3_txpippmen;
  input [4:0]ch3_txpippmstepsize;
  input ch3_txpisopd;
  input [2:0]ch3_txpmaresetmask;
  input ch3_txpolarity;
  input [4:0]ch3_txpostcursor;
  input ch3_txprbsforceerr;
  input [3:0]ch3_txprbssel;
  input [4:0]ch3_txprecursor;
  input ch3_txprogdivreset;
  input ch3_txqpibiasen;
  input ch3_txqpiweakpu;
  input [7:0]ch3_txrate;
  input [1:0]ch3_txresetmode;
  input [6:0]ch3_txsequence;
  input ch3_txswing;
  input ch3_txsyncallin;
  input ch3_txuserrdy;
  input ch3_txusrclk;
  input coestatusdebug;
  input [7:0]ctrlrsvdin;
  input debugtraceclk;
  input debugtraceready;
  input [31:0]gpi;
  input hsclk0_lcpllclkrsvd0;
  input hsclk0_lcpllclkrsvd1;
  input [7:0]hsclk0_lcpllfbdiv;
  input hsclk0_lcpllgtgrefclk;
  input hsclk0_lcpllpd;
  input [2:0]hsclk0_lcpllrefclksel;
  input hsclk0_lcpllreset;
  input hsclk0_lcpllresetbypassmode;
  input [1:0]hsclk0_lcpllresetmask;
  input [7:0]hsclk0_lcpllrsvd0;
  input [7:0]hsclk0_lcpllrsvd1;
  input [25:0]hsclk0_lcpllsdmdata;
  input hsclk0_lcpllsdmtoggle;
  input hsclk0_rpllclkrsvd0;
  input hsclk0_rpllclkrsvd1;
  input [7:0]hsclk0_rpllfbdiv;
  input hsclk0_rpllgtgrefclk;
  input hsclk0_rpllpd;
  input [2:0]hsclk0_rpllrefclksel;
  input hsclk0_rpllreset;
  input hsclk0_rpllresetbypassmode;
  input [1:0]hsclk0_rpllresetmask;
  input [7:0]hsclk0_rpllrsvd0;
  input [7:0]hsclk0_rpllrsvd1;
  input [25:0]hsclk0_rpllsdmdata;
  input hsclk0_rpllsdmtoggle;
  input hsclk1_lcpllclkrsvd0;
  input hsclk1_lcpllclkrsvd1;
  input [7:0]hsclk1_lcpllfbdiv;
  input hsclk1_lcpllgtgrefclk;
  input hsclk1_lcpllpd;
  input [2:0]hsclk1_lcpllrefclksel;
  input hsclk1_lcpllreset;
  input hsclk1_lcpllresetbypassmode;
  input [1:0]hsclk1_lcpllresetmask;
  input [7:0]hsclk1_lcpllrsvd0;
  input [7:0]hsclk1_lcpllrsvd1;
  input [25:0]hsclk1_lcpllsdmdata;
  input hsclk1_lcpllsdmtoggle;
  input hsclk1_rpllclkrsvd0;
  input hsclk1_rpllclkrsvd1;
  input [7:0]hsclk1_rpllfbdiv;
  input hsclk1_rpllgtgrefclk;
  input hsclk1_rpllpd;
  input [2:0]hsclk1_rpllrefclksel;
  input hsclk1_rpllreset;
  input hsclk1_rpllresetbypassmode;
  input [1:0]hsclk1_rpllresetmask;
  input [7:0]hsclk1_rpllrsvd0;
  input [7:0]hsclk1_rpllrsvd1;
  input [25:0]hsclk1_rpllsdmdata;
  input hsclk1_rpllsdmtoggle;
  input pcielinkreachtarget;
  input [5:0]pcieltssm;
  input [5:0]pipenorthin;
  input [5:0]pipesouthin;
  input rcalenb;
  input refclk0_clktestsig;
  input refclk0_gtrefclkpd;
  input refclk1_clktestsig;
  input refclk1_gtrefclkpd;
  input [1:0]resetdone_northin;
  input [1:0]resetdone_southin;
  input rxmarginclk;
  input [3:0]rxmarginreqcmd;
  input [1:0]rxmarginreqlanenum;
  input [7:0]rxmarginreqpayld;
  input rxmarginreqreq;
  input rxmarginresack;
  input [3:0]rxpinorthin;
  input [3:0]rxpisouthin;
  input trigackout0;
  input trigin0;
  input [3:0]txpinorthin;
  input [3:0]txpisouthin;
  input ubenable;
  input [11:0]ubintr;
  input ubiolmbrst;
  input ubmbrst;
  input ubrxuart;
  input [15:0]ch0_pcsrsvdin;
  input [15:0]ch1_pcsrsvdin;
  input [15:0]ch2_pcsrsvdin;
  input [15:0]ch3_pcsrsvdin;
  input GT_REFCLK0;
  input [3:0]rxp;
  input [3:0]rxn;
  output [3:0]txp;
  output [3:0]txn;
  input ch0_rxmstdatapathreset;
  input ch1_rxmstdatapathreset;
  input ch2_rxmstdatapathreset;
  input ch3_rxmstdatapathreset;
  input ch0_txmstdatapathreset;
  input ch1_txmstdatapathreset;
  input ch2_txmstdatapathreset;
  input ch3_txmstdatapathreset;
  input ch0_rxmstreset;
  input ch1_rxmstreset;
  input ch2_rxmstreset;
  input ch3_rxmstreset;
  output ch0_rxmstresetdone;
  output ch1_rxmstresetdone;
  output ch2_rxmstresetdone;
  output ch3_rxmstresetdone;
  input ch0_txmstreset;
  input ch1_txmstreset;
  input ch2_txmstreset;
  input ch3_txmstreset;
  output ch0_txmstresetdone;
  output ch1_txmstresetdone;
  output ch2_txmstresetdone;
  output ch3_txmstresetdone;

  wire GT_REFCLK0;
  wire apb3clk;
  wire ch0_cdrbmcdrreq;
  wire ch0_cdrfreqos;
  wire ch0_cdrincpctrl;
  wire ch0_cdrstepdir;
  wire ch0_cdrstepsq;
  wire ch0_cdrstepsx;
  wire ch0_dfehold;
  wire ch0_dfeovrd;
  wire ch0_eyescandataerror;
  wire ch0_eyescanreset;
  wire ch0_eyescantrigger;
  wire ch0_gtrxreset;
  wire ch0_gttxreset;
  wire [2:0]ch0_loopback;
  wire [15:0]ch0_pcsrsvdout;
  wire [11:10]ch0_pcsrsvdout_int;
  wire [1:0]ch0_refdebugout;
  wire [7:0]ch0_rx10gstat;
  wire ch0_rx_function_inst_n_0;
  wire ch0_rx_function_inst_n_1;
  wire ch0_rx_function_inst_n_2;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxbyterealign;
  wire ch0_rxcdrhold;
  wire ch0_rxcdrlock;
  wire ch0_rxcdrovrden;
  wire ch0_rxcdrphdone;
  wire ch0_rxcdrreset;
  wire ch0_rxchanbondseq;
  wire ch0_rxchanisaligned;
  wire ch0_rxchanrealign;
  wire [4:0]ch0_rxchbondi;
  wire [4:0]ch0_rxchbondo;
  wire [1:0]ch0_rxclkcorcnt;
  wire ch0_rxcominitdet;
  wire ch0_rxcommadet;
  wire ch0_rxcomsasdet;
  wire ch0_rxcomwakedet;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl2;
  wire [7:0]ch0_rxctrl3;
  wire ch0_rxdapicodeovrden;
  wire ch0_rxdapicodereset;
  wire ch0_rxdapireset;
  wire ch0_rxdapiresetdone;
  wire [1:0]ch0_rxdapiresetmask;
  wire [127:0]ch0_rxdata;
  wire [1:0]ch0_rxdatavalid;
  wire ch0_rxdebugpcsout;
  wire ch0_rxdlyalignerr;
  wire ch0_rxdlyalignprog;
  wire ch0_rxdlyalignreq;
  wire ch0_rxelecidle;
  wire ch0_rxeqtraining;
  wire ch0_rxfinealigndone;
  wire ch0_rxgearboxslip;
  wire [5:0]ch0_rxheader;
  wire [1:0]ch0_rxheadervalid;
  wire ch0_rxlatclk;
  wire ch0_rxlpmen;
  wire ch0_rxmldchaindone;
  wire ch0_rxmldchainreq;
  wire ch0_rxmlfinealignreq;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire ch0_rxmstresetdone;
  wire ch0_rxoobreset;
  wire ch0_rxosintdone;
  wire ch0_rxoutclk;
  wire [4:0]ch0_rxpcsresetmask;
  wire [1:0]ch0_rxpd;
  wire ch0_rxphaligndone;
  wire ch0_rxphalignerr;
  wire ch0_rxphalignreq;
  wire [1:0]ch0_rxphalignresetmask;
  wire ch0_rxphdlypd;
  wire ch0_rxphdlyreset;
  wire ch0_rxphdlyresetdone;
  wire ch0_rxphsetinitdone;
  wire ch0_rxphsetinitreq;
  wire ch0_rxphshift180;
  wire ch0_rxphshift180done;
  wire ch0_rxpkdet;
  wire ch0_rxpmaresetdone;
  wire ch0_rxpmaresetdone_int;
  wire [6:0]ch0_rxpmaresetmask;
  wire ch0_rxpolarity;
  wire ch0_rxprbscntreset;
  wire ch0_rxprbserr;
  wire ch0_rxprbslocked;
  wire [3:0]ch0_rxprbssel;
  wire ch0_rxprogdivreset;
  wire ch0_rxprogdivresetdone;
  wire ch0_rxqpien;
  wire ch0_rxqpisenn;
  wire ch0_rxqpisenp;
  wire [7:0]ch0_rxrate;
  wire ch0_rxresetdone;
  wire ch0_rxresetdone_int;
  wire [1:0]ch0_rxresetmode;
  wire ch0_rxsimplexphystatus;
  wire ch0_rxslide;
  wire ch0_rxsliderdy;
  wire ch0_rxslipdone;
  wire [1:0]ch0_rxstartofseq;
  wire [2:0]ch0_rxstatus;
  wire ch0_rxsyncallin;
  wire ch0_rxsyncdone;
  wire ch0_rxtermination;
  wire ch0_rxuserrdy;
  wire ch0_rxusrclk;
  wire ch0_rxvalid;
  wire ch0_tx10gstat;
  wire ch0_tx_function_inst_n_0;
  wire ch0_tx_function_inst_n_1;
  wire ch0_tx_function_inst_n_2;
  wire [1:0]ch0_txbufstatus;
  wire ch0_txcomfinish;
  wire ch0_txcominit;
  wire ch0_txcomsas;
  wire ch0_txcomwake;
  wire [15:0]ch0_txctrl0;
  wire [15:0]ch0_txctrl1;
  wire [7:0]ch0_txctrl2;
  wire ch0_txdapicodeovrden;
  wire ch0_txdapicodereset;
  wire ch0_txdapireset;
  wire ch0_txdapiresetdone;
  wire [1:0]ch0_txdapiresetmask;
  wire [127:0]ch0_txdata;
  wire ch0_txdccdone;
  wire ch0_txdebugpcsout;
  wire [1:0]ch0_txdeemph;
  wire ch0_txdetectrx;
  wire [4:0]ch0_txdiffctrl;
  wire ch0_txdlyalignerr;
  wire ch0_txdlyalignprog;
  wire ch0_txdlyalignreq;
  wire ch0_txelecidle;
  wire [5:0]ch0_txheader;
  wire ch0_txinhibit;
  wire ch0_txlatclk;
  wire [6:0]ch0_txmaincursor;
  wire [2:0]ch0_txmargin;
  wire ch0_txmldchaindone;
  wire ch0_txmldchainreq;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire ch0_txmstresetdone;
  wire ch0_txoneszeros;
  wire ch0_txoutclk;
  wire ch0_txpausedelayalign;
  wire ch0_txpcsresetmask;
  wire [1:0]ch0_txpd;
  wire ch0_txphaligndone;
  wire ch0_txphalignerr;
  wire ch0_txphalignoutrsvd;
  wire ch0_txphalignreq;
  wire [1:0]ch0_txphalignresetmask;
  wire ch0_txphdlypd;
  wire ch0_txphdlyreset;
  wire ch0_txphdlyresetdone;
  wire ch0_txphdlytstclk;
  wire ch0_txphsetinitdone;
  wire ch0_txphsetinitreq;
  wire ch0_txphshift180;
  wire ch0_txphshift180done;
  wire ch0_txpicodeovrden;
  wire ch0_txpicodereset;
  wire ch0_txpippmen;
  wire [4:0]ch0_txpippmstepsize;
  wire ch0_txpisopd;
  wire ch0_txpmaresetdone;
  wire ch0_txpmaresetdone_int;
  wire [2:0]ch0_txpmaresetmask;
  wire ch0_txpolarity;
  wire [4:0]ch0_txpostcursor;
  wire ch0_txprbsforceerr;
  wire [3:0]ch0_txprbssel;
  wire [4:0]ch0_txprecursor;
  wire ch0_txprogdivreset;
  wire ch0_txprogdivresetdone;
  wire ch0_txqpibiasen;
  wire ch0_txqpisenn;
  wire ch0_txqpisenp;
  wire ch0_txqpiweakpu;
  wire [7:0]ch0_txrate;
  wire ch0_txresetdone;
  wire ch0_txresetdone_int;
  wire [1:0]ch0_txresetmode;
  wire [6:0]ch0_txsequence;
  wire ch0_txswing;
  wire ch0_txswingouthigh;
  wire ch0_txswingoutlow;
  wire ch0_txsyncallin;
  wire ch0_txsyncdone;
  wire ch0_txuserrdy;
  wire ch0_txusrclk;
  wire [15:0]ch1_pcsrsvdout;
  wire [11:10]ch1_pcsrsvdout_int;
  wire ch1_rx_function_inst_n_0;
  wire ch1_rx_function_inst_n_1;
  wire ch1_rx_function_inst_n_2;
  wire ch1_rxmstresetdone;
  wire ch1_rxpmaresetdone;
  wire ch1_rxpmaresetdone_int;
  wire ch1_rxresetdone;
  wire ch1_rxresetdone_int;
  wire ch1_tx_function_inst_n_0;
  wire ch1_tx_function_inst_n_1;
  wire ch1_tx_function_inst_n_2;
  wire ch1_txmstresetdone;
  wire ch1_txpmaresetdone;
  wire ch1_txpmaresetdone_int;
  wire ch1_txresetdone;
  wire ch1_txresetdone_int;
  wire [15:0]ch2_pcsrsvdout;
  wire [11:10]ch2_pcsrsvdout_int;
  wire ch2_rx_function_inst_n_0;
  wire ch2_rx_function_inst_n_1;
  wire ch2_rx_function_inst_n_2;
  wire ch2_rxmstresetdone;
  wire ch2_rxpmaresetdone;
  wire ch2_rxpmaresetdone_int;
  wire ch2_rxresetdone;
  wire ch2_rxresetdone_int;
  wire ch2_tx_function_inst_n_0;
  wire ch2_tx_function_inst_n_1;
  wire ch2_tx_function_inst_n_2;
  wire ch2_txmstresetdone;
  wire ch2_txpmaresetdone;
  wire ch2_txpmaresetdone_int;
  wire ch2_txresetdone;
  wire ch2_txresetdone_int;
  wire [15:0]ch3_pcsrsvdout;
  wire [11:10]ch3_pcsrsvdout_int;
  wire ch3_rx_function_inst_n_0;
  wire ch3_rx_function_inst_n_1;
  wire ch3_rx_function_inst_n_2;
  wire ch3_rxmstresetdone;
  wire ch3_rxpmaresetdone;
  wire ch3_rxpmaresetdone_int;
  wire ch3_rxresetdone;
  wire ch3_rxresetdone_int;
  wire ch3_tx_function_inst_n_0;
  wire ch3_tx_function_inst_n_1;
  wire ch3_tx_function_inst_n_2;
  wire ch3_txmstresetdone;
  wire ch3_txpmaresetdone;
  wire ch3_txpmaresetdone_int;
  wire ch3_txresetdone;
  wire ch3_txresetdone_int;
  wire [30:0]cmd_to_axi;
  wire [31:0]gpi;
  wire [7:0]gpi_to_gt_int;
  wire [31:0]gpo;
  wire [7:0]gpoToLogic;
  wire gtpowergood;
  wire gtpowergood_int;
  wire hsclk0_lcplllock;
  wire [3:0]mstrxresetdone_int;
  wire [3:0]msttxresetdone_int;
  wire p_0_in;
  wire quad_inst_i_1_n_0;
  wire quad_inst_n_0;
  wire quad_inst_n_1;
  wire quad_inst_n_10;
  wire quad_inst_n_100;
  wire quad_inst_n_1000;
  wire quad_inst_n_1001;
  wire quad_inst_n_1002;
  wire quad_inst_n_1003;
  wire quad_inst_n_1004;
  wire quad_inst_n_1005;
  wire quad_inst_n_1006;
  wire quad_inst_n_1007;
  wire quad_inst_n_1008;
  wire quad_inst_n_1009;
  wire quad_inst_n_101;
  wire quad_inst_n_1010;
  wire quad_inst_n_1011;
  wire quad_inst_n_1012;
  wire quad_inst_n_1013;
  wire quad_inst_n_1014;
  wire quad_inst_n_1015;
  wire quad_inst_n_1016;
  wire quad_inst_n_1017;
  wire quad_inst_n_1018;
  wire quad_inst_n_1019;
  wire quad_inst_n_102;
  wire quad_inst_n_1020;
  wire quad_inst_n_1023;
  wire quad_inst_n_1024;
  wire quad_inst_n_1025;
  wire quad_inst_n_1026;
  wire quad_inst_n_1027;
  wire quad_inst_n_1028;
  wire quad_inst_n_1029;
  wire quad_inst_n_103;
  wire quad_inst_n_1030;
  wire quad_inst_n_1031;
  wire quad_inst_n_1032;
  wire quad_inst_n_1033;
  wire quad_inst_n_1034;
  wire quad_inst_n_1035;
  wire quad_inst_n_1036;
  wire quad_inst_n_1037;
  wire quad_inst_n_1038;
  wire quad_inst_n_1039;
  wire quad_inst_n_104;
  wire quad_inst_n_1040;
  wire quad_inst_n_1041;
  wire quad_inst_n_1042;
  wire quad_inst_n_1043;
  wire quad_inst_n_1044;
  wire quad_inst_n_1045;
  wire quad_inst_n_1046;
  wire quad_inst_n_1047;
  wire quad_inst_n_1048;
  wire quad_inst_n_1049;
  wire quad_inst_n_105;
  wire quad_inst_n_1050;
  wire quad_inst_n_1051;
  wire quad_inst_n_1052;
  wire quad_inst_n_1053;
  wire quad_inst_n_1054;
  wire quad_inst_n_1055;
  wire quad_inst_n_1056;
  wire quad_inst_n_1057;
  wire quad_inst_n_1058;
  wire quad_inst_n_1059;
  wire quad_inst_n_106;
  wire quad_inst_n_1060;
  wire quad_inst_n_1061;
  wire quad_inst_n_1062;
  wire quad_inst_n_1063;
  wire quad_inst_n_1064;
  wire quad_inst_n_1065;
  wire quad_inst_n_1066;
  wire quad_inst_n_1067;
  wire quad_inst_n_1068;
  wire quad_inst_n_1069;
  wire quad_inst_n_107;
  wire quad_inst_n_1070;
  wire quad_inst_n_1071;
  wire quad_inst_n_1072;
  wire quad_inst_n_1073;
  wire quad_inst_n_1074;
  wire quad_inst_n_1075;
  wire quad_inst_n_1076;
  wire quad_inst_n_1077;
  wire quad_inst_n_1078;
  wire quad_inst_n_1079;
  wire quad_inst_n_1080;
  wire quad_inst_n_1081;
  wire quad_inst_n_1082;
  wire quad_inst_n_1083;
  wire quad_inst_n_1084;
  wire quad_inst_n_1087;
  wire quad_inst_n_1088;
  wire quad_inst_n_1089;
  wire quad_inst_n_109;
  wire quad_inst_n_1090;
  wire quad_inst_n_1091;
  wire quad_inst_n_1092;
  wire quad_inst_n_1093;
  wire quad_inst_n_1094;
  wire quad_inst_n_1095;
  wire quad_inst_n_1096;
  wire quad_inst_n_1097;
  wire quad_inst_n_1098;
  wire quad_inst_n_1099;
  wire quad_inst_n_11;
  wire quad_inst_n_110;
  wire quad_inst_n_1100;
  wire quad_inst_n_1101;
  wire quad_inst_n_1102;
  wire quad_inst_n_1103;
  wire quad_inst_n_1104;
  wire quad_inst_n_1105;
  wire quad_inst_n_1106;
  wire quad_inst_n_1107;
  wire quad_inst_n_1108;
  wire quad_inst_n_1109;
  wire quad_inst_n_111;
  wire quad_inst_n_1110;
  wire quad_inst_n_1111;
  wire quad_inst_n_1112;
  wire quad_inst_n_1113;
  wire quad_inst_n_1114;
  wire quad_inst_n_1115;
  wire quad_inst_n_1116;
  wire quad_inst_n_1117;
  wire quad_inst_n_1118;
  wire quad_inst_n_1119;
  wire quad_inst_n_112;
  wire quad_inst_n_1120;
  wire quad_inst_n_1121;
  wire quad_inst_n_1122;
  wire quad_inst_n_1123;
  wire quad_inst_n_1124;
  wire quad_inst_n_1125;
  wire quad_inst_n_1126;
  wire quad_inst_n_1127;
  wire quad_inst_n_1128;
  wire quad_inst_n_1129;
  wire quad_inst_n_113;
  wire quad_inst_n_1130;
  wire quad_inst_n_1131;
  wire quad_inst_n_1132;
  wire quad_inst_n_1133;
  wire quad_inst_n_1134;
  wire quad_inst_n_1135;
  wire quad_inst_n_1136;
  wire quad_inst_n_1137;
  wire quad_inst_n_1138;
  wire quad_inst_n_1139;
  wire quad_inst_n_1140;
  wire quad_inst_n_1141;
  wire quad_inst_n_1142;
  wire quad_inst_n_1143;
  wire quad_inst_n_1144;
  wire quad_inst_n_1145;
  wire quad_inst_n_1146;
  wire quad_inst_n_1147;
  wire quad_inst_n_1148;
  wire quad_inst_n_1149;
  wire quad_inst_n_115;
  wire quad_inst_n_1150;
  wire quad_inst_n_1151;
  wire quad_inst_n_1152;
  wire quad_inst_n_1153;
  wire quad_inst_n_1154;
  wire quad_inst_n_1155;
  wire quad_inst_n_1156;
  wire quad_inst_n_1157;
  wire quad_inst_n_1158;
  wire quad_inst_n_1159;
  wire quad_inst_n_116;
  wire quad_inst_n_1160;
  wire quad_inst_n_117;
  wire quad_inst_n_1173;
  wire quad_inst_n_1174;
  wire quad_inst_n_1175;
  wire quad_inst_n_1176;
  wire quad_inst_n_1177;
  wire quad_inst_n_1178;
  wire quad_inst_n_1179;
  wire quad_inst_n_118;
  wire quad_inst_n_1180;
  wire quad_inst_n_1181;
  wire quad_inst_n_1182;
  wire quad_inst_n_1183;
  wire quad_inst_n_1184;
  wire quad_inst_n_1185;
  wire quad_inst_n_1186;
  wire quad_inst_n_1187;
  wire quad_inst_n_1188;
  wire quad_inst_n_1189;
  wire quad_inst_n_119;
  wire quad_inst_n_1190;
  wire quad_inst_n_1191;
  wire quad_inst_n_1192;
  wire quad_inst_n_1193;
  wire quad_inst_n_1194;
  wire quad_inst_n_1195;
  wire quad_inst_n_1196;
  wire quad_inst_n_1197;
  wire quad_inst_n_1198;
  wire quad_inst_n_1199;
  wire quad_inst_n_120;
  wire quad_inst_n_1200;
  wire quad_inst_n_1201;
  wire quad_inst_n_1202;
  wire quad_inst_n_1203;
  wire quad_inst_n_1204;
  wire quad_inst_n_1205;
  wire quad_inst_n_1206;
  wire quad_inst_n_1207;
  wire quad_inst_n_1208;
  wire quad_inst_n_1209;
  wire quad_inst_n_121;
  wire quad_inst_n_1210;
  wire quad_inst_n_1211;
  wire quad_inst_n_1212;
  wire quad_inst_n_1213;
  wire quad_inst_n_1214;
  wire quad_inst_n_1215;
  wire quad_inst_n_1216;
  wire quad_inst_n_1217;
  wire quad_inst_n_1218;
  wire quad_inst_n_122;
  wire quad_inst_n_1225;
  wire quad_inst_n_1226;
  wire quad_inst_n_1227;
  wire quad_inst_n_1228;
  wire quad_inst_n_1229;
  wire quad_inst_n_123;
  wire quad_inst_n_1230;
  wire quad_inst_n_1231;
  wire quad_inst_n_1232;
  wire quad_inst_n_1233;
  wire quad_inst_n_1234;
  wire quad_inst_n_1235;
  wire quad_inst_n_1236;
  wire quad_inst_n_1237;
  wire quad_inst_n_1238;
  wire quad_inst_n_1239;
  wire quad_inst_n_124;
  wire quad_inst_n_1240;
  wire quad_inst_n_1241;
  wire quad_inst_n_1242;
  wire quad_inst_n_1243;
  wire quad_inst_n_1244;
  wire quad_inst_n_1245;
  wire quad_inst_n_1246;
  wire quad_inst_n_1247;
  wire quad_inst_n_1248;
  wire quad_inst_n_1249;
  wire quad_inst_n_125;
  wire quad_inst_n_1250;
  wire quad_inst_n_1251;
  wire quad_inst_n_1252;
  wire quad_inst_n_1253;
  wire quad_inst_n_1254;
  wire quad_inst_n_1255;
  wire quad_inst_n_1256;
  wire quad_inst_n_1257;
  wire quad_inst_n_1258;
  wire quad_inst_n_1259;
  wire quad_inst_n_126;
  wire quad_inst_n_1260;
  wire quad_inst_n_1261;
  wire quad_inst_n_1262;
  wire quad_inst_n_1263;
  wire quad_inst_n_1264;
  wire quad_inst_n_1265;
  wire quad_inst_n_1266;
  wire quad_inst_n_1267;
  wire quad_inst_n_1268;
  wire quad_inst_n_1269;
  wire quad_inst_n_127;
  wire quad_inst_n_1270;
  wire quad_inst_n_1271;
  wire quad_inst_n_1272;
  wire quad_inst_n_1273;
  wire quad_inst_n_1274;
  wire quad_inst_n_1275;
  wire quad_inst_n_1276;
  wire quad_inst_n_1277;
  wire quad_inst_n_1278;
  wire quad_inst_n_1279;
  wire quad_inst_n_128;
  wire quad_inst_n_1280;
  wire quad_inst_n_1281;
  wire quad_inst_n_1282;
  wire quad_inst_n_1283;
  wire quad_inst_n_1284;
  wire quad_inst_n_1285;
  wire quad_inst_n_1286;
  wire quad_inst_n_1287;
  wire quad_inst_n_1288;
  wire quad_inst_n_1289;
  wire quad_inst_n_129;
  wire quad_inst_n_1290;
  wire quad_inst_n_1291;
  wire quad_inst_n_1292;
  wire quad_inst_n_1293;
  wire quad_inst_n_1294;
  wire quad_inst_n_1295;
  wire quad_inst_n_1296;
  wire quad_inst_n_1297;
  wire quad_inst_n_1298;
  wire quad_inst_n_1299;
  wire quad_inst_n_130;
  wire quad_inst_n_1300;
  wire quad_inst_n_1301;
  wire quad_inst_n_1302;
  wire quad_inst_n_1303;
  wire quad_inst_n_1304;
  wire quad_inst_n_1305;
  wire quad_inst_n_1306;
  wire quad_inst_n_1307;
  wire quad_inst_n_1308;
  wire quad_inst_n_1309;
  wire quad_inst_n_131;
  wire quad_inst_n_1310;
  wire quad_inst_n_1311;
  wire quad_inst_n_1312;
  wire quad_inst_n_1313;
  wire quad_inst_n_1314;
  wire quad_inst_n_1315;
  wire quad_inst_n_1316;
  wire quad_inst_n_1317;
  wire quad_inst_n_1318;
  wire quad_inst_n_1319;
  wire quad_inst_n_132;
  wire quad_inst_n_1320;
  wire quad_inst_n_1321;
  wire quad_inst_n_1322;
  wire quad_inst_n_1323;
  wire quad_inst_n_1324;
  wire quad_inst_n_1325;
  wire quad_inst_n_1326;
  wire quad_inst_n_1327;
  wire quad_inst_n_1328;
  wire quad_inst_n_1329;
  wire quad_inst_n_133;
  wire quad_inst_n_1330;
  wire quad_inst_n_1331;
  wire quad_inst_n_1332;
  wire quad_inst_n_1333;
  wire quad_inst_n_1334;
  wire quad_inst_n_1335;
  wire quad_inst_n_1336;
  wire quad_inst_n_1337;
  wire quad_inst_n_1338;
  wire quad_inst_n_1339;
  wire quad_inst_n_1340;
  wire quad_inst_n_1341;
  wire quad_inst_n_1342;
  wire quad_inst_n_1343;
  wire quad_inst_n_1344;
  wire quad_inst_n_1345;
  wire quad_inst_n_1346;
  wire quad_inst_n_1347;
  wire quad_inst_n_1348;
  wire quad_inst_n_1349;
  wire quad_inst_n_135;
  wire quad_inst_n_1350;
  wire quad_inst_n_1351;
  wire quad_inst_n_1352;
  wire quad_inst_n_1353;
  wire quad_inst_n_1354;
  wire quad_inst_n_1355;
  wire quad_inst_n_1356;
  wire quad_inst_n_1357;
  wire quad_inst_n_1358;
  wire quad_inst_n_1359;
  wire quad_inst_n_136;
  wire quad_inst_n_1360;
  wire quad_inst_n_1361;
  wire quad_inst_n_1362;
  wire quad_inst_n_1363;
  wire quad_inst_n_1364;
  wire quad_inst_n_1365;
  wire quad_inst_n_1366;
  wire quad_inst_n_1367;
  wire quad_inst_n_1368;
  wire quad_inst_n_1369;
  wire quad_inst_n_137;
  wire quad_inst_n_1370;
  wire quad_inst_n_1371;
  wire quad_inst_n_1372;
  wire quad_inst_n_1373;
  wire quad_inst_n_1374;
  wire quad_inst_n_1375;
  wire quad_inst_n_1376;
  wire quad_inst_n_1377;
  wire quad_inst_n_1378;
  wire quad_inst_n_1379;
  wire quad_inst_n_1380;
  wire quad_inst_n_1381;
  wire quad_inst_n_1382;
  wire quad_inst_n_1383;
  wire quad_inst_n_1384;
  wire quad_inst_n_1385;
  wire quad_inst_n_1386;
  wire quad_inst_n_1387;
  wire quad_inst_n_1388;
  wire quad_inst_n_1389;
  wire quad_inst_n_139;
  wire quad_inst_n_1390;
  wire quad_inst_n_1391;
  wire quad_inst_n_1392;
  wire quad_inst_n_1393;
  wire quad_inst_n_1394;
  wire quad_inst_n_1395;
  wire quad_inst_n_1396;
  wire quad_inst_n_1397;
  wire quad_inst_n_1398;
  wire quad_inst_n_1399;
  wire quad_inst_n_140;
  wire quad_inst_n_1400;
  wire quad_inst_n_1401;
  wire quad_inst_n_1402;
  wire quad_inst_n_141;
  wire quad_inst_n_142;
  wire quad_inst_n_143;
  wire quad_inst_n_144;
  wire quad_inst_n_145;
  wire quad_inst_n_146;
  wire quad_inst_n_147;
  wire quad_inst_n_150;
  wire quad_inst_n_151;
  wire quad_inst_n_152;
  wire quad_inst_n_153;
  wire quad_inst_n_1531;
  wire quad_inst_n_1532;
  wire quad_inst_n_1533;
  wire quad_inst_n_1534;
  wire quad_inst_n_1535;
  wire quad_inst_n_1536;
  wire quad_inst_n_1537;
  wire quad_inst_n_1538;
  wire quad_inst_n_1539;
  wire quad_inst_n_154;
  wire quad_inst_n_1540;
  wire quad_inst_n_1541;
  wire quad_inst_n_1542;
  wire quad_inst_n_1543;
  wire quad_inst_n_1544;
  wire quad_inst_n_1545;
  wire quad_inst_n_1546;
  wire quad_inst_n_1547;
  wire quad_inst_n_1548;
  wire quad_inst_n_1549;
  wire quad_inst_n_155;
  wire quad_inst_n_1550;
  wire quad_inst_n_1551;
  wire quad_inst_n_1552;
  wire quad_inst_n_1553;
  wire quad_inst_n_1554;
  wire quad_inst_n_1555;
  wire quad_inst_n_1556;
  wire quad_inst_n_1557;
  wire quad_inst_n_1558;
  wire quad_inst_n_1559;
  wire quad_inst_n_156;
  wire quad_inst_n_1560;
  wire quad_inst_n_1561;
  wire quad_inst_n_1562;
  wire quad_inst_n_157;
  wire quad_inst_n_1571;
  wire quad_inst_n_1572;
  wire quad_inst_n_1573;
  wire quad_inst_n_1574;
  wire quad_inst_n_1575;
  wire quad_inst_n_1576;
  wire quad_inst_n_1577;
  wire quad_inst_n_1578;
  wire quad_inst_n_1579;
  wire quad_inst_n_158;
  wire quad_inst_n_1580;
  wire quad_inst_n_1581;
  wire quad_inst_n_1582;
  wire quad_inst_n_1583;
  wire quad_inst_n_1584;
  wire quad_inst_n_1585;
  wire quad_inst_n_1586;
  wire quad_inst_n_1587;
  wire quad_inst_n_1588;
  wire quad_inst_n_1589;
  wire quad_inst_n_159;
  wire quad_inst_n_1590;
  wire quad_inst_n_1596;
  wire quad_inst_n_1597;
  wire quad_inst_n_1598;
  wire quad_inst_n_1599;
  wire quad_inst_n_160;
  wire quad_inst_n_1600;
  wire quad_inst_n_1601;
  wire quad_inst_n_1602;
  wire quad_inst_n_1603;
  wire quad_inst_n_1604;
  wire quad_inst_n_1605;
  wire quad_inst_n_1606;
  wire quad_inst_n_1607;
  wire quad_inst_n_1608;
  wire quad_inst_n_1609;
  wire quad_inst_n_161;
  wire quad_inst_n_1610;
  wire quad_inst_n_1617;
  wire quad_inst_n_1618;
  wire quad_inst_n_1619;
  wire quad_inst_n_162;
  wire quad_inst_n_1620;
  wire quad_inst_n_1621;
  wire quad_inst_n_1622;
  wire quad_inst_n_1623;
  wire quad_inst_n_1624;
  wire quad_inst_n_1625;
  wire quad_inst_n_1626;
  wire quad_inst_n_1627;
  wire quad_inst_n_1628;
  wire quad_inst_n_1629;
  wire quad_inst_n_163;
  wire quad_inst_n_1630;
  wire quad_inst_n_1631;
  wire quad_inst_n_1632;
  wire quad_inst_n_1633;
  wire quad_inst_n_1634;
  wire quad_inst_n_1635;
  wire quad_inst_n_1636;
  wire quad_inst_n_1637;
  wire quad_inst_n_1638;
  wire quad_inst_n_1639;
  wire quad_inst_n_164;
  wire quad_inst_n_1640;
  wire quad_inst_n_1641;
  wire quad_inst_n_1642;
  wire quad_inst_n_1643;
  wire quad_inst_n_1644;
  wire quad_inst_n_1645;
  wire quad_inst_n_1646;
  wire quad_inst_n_165;
  wire quad_inst_n_166;
  wire quad_inst_n_167;
  wire quad_inst_n_1671;
  wire quad_inst_n_1672;
  wire quad_inst_n_1673;
  wire quad_inst_n_1674;
  wire quad_inst_n_1675;
  wire quad_inst_n_1676;
  wire quad_inst_n_1677;
  wire quad_inst_n_1678;
  wire quad_inst_n_1679;
  wire quad_inst_n_168;
  wire quad_inst_n_1680;
  wire quad_inst_n_1681;
  wire quad_inst_n_1682;
  wire quad_inst_n_1683;
  wire quad_inst_n_1684;
  wire quad_inst_n_1685;
  wire quad_inst_n_1686;
  wire quad_inst_n_1687;
  wire quad_inst_n_1688;
  wire quad_inst_n_1689;
  wire quad_inst_n_169;
  wire quad_inst_n_1690;
  wire quad_inst_n_1691;
  wire quad_inst_n_1692;
  wire quad_inst_n_1693;
  wire quad_inst_n_1694;
  wire quad_inst_n_1695;
  wire quad_inst_n_1696;
  wire quad_inst_n_1697;
  wire quad_inst_n_1698;
  wire quad_inst_n_1699;
  wire quad_inst_n_170;
  wire quad_inst_n_1700;
  wire quad_inst_n_1701;
  wire quad_inst_n_1702;
  wire quad_inst_n_1703;
  wire quad_inst_n_1704;
  wire quad_inst_n_1705;
  wire quad_inst_n_1706;
  wire quad_inst_n_1707;
  wire quad_inst_n_1708;
  wire quad_inst_n_1709;
  wire quad_inst_n_171;
  wire quad_inst_n_1710;
  wire quad_inst_n_1711;
  wire quad_inst_n_1712;
  wire quad_inst_n_1713;
  wire quad_inst_n_1714;
  wire quad_inst_n_1715;
  wire quad_inst_n_1716;
  wire quad_inst_n_1717;
  wire quad_inst_n_1718;
  wire quad_inst_n_1719;
  wire quad_inst_n_172;
  wire quad_inst_n_1720;
  wire quad_inst_n_1721;
  wire quad_inst_n_1722;
  wire quad_inst_n_1723;
  wire quad_inst_n_1724;
  wire quad_inst_n_1725;
  wire quad_inst_n_1726;
  wire quad_inst_n_1727;
  wire quad_inst_n_1728;
  wire quad_inst_n_1729;
  wire quad_inst_n_173;
  wire quad_inst_n_1730;
  wire quad_inst_n_1731;
  wire quad_inst_n_1732;
  wire quad_inst_n_1733;
  wire quad_inst_n_1734;
  wire quad_inst_n_1735;
  wire quad_inst_n_1736;
  wire quad_inst_n_1737;
  wire quad_inst_n_1738;
  wire quad_inst_n_1739;
  wire quad_inst_n_174;
  wire quad_inst_n_1740;
  wire quad_inst_n_1741;
  wire quad_inst_n_1742;
  wire quad_inst_n_1743;
  wire quad_inst_n_1744;
  wire quad_inst_n_1745;
  wire quad_inst_n_1746;
  wire quad_inst_n_1747;
  wire quad_inst_n_1748;
  wire quad_inst_n_1749;
  wire quad_inst_n_175;
  wire quad_inst_n_1750;
  wire quad_inst_n_1751;
  wire quad_inst_n_1752;
  wire quad_inst_n_1753;
  wire quad_inst_n_1754;
  wire quad_inst_n_1755;
  wire quad_inst_n_1756;
  wire quad_inst_n_1757;
  wire quad_inst_n_1758;
  wire quad_inst_n_176;
  wire quad_inst_n_177;
  wire quad_inst_n_178;
  wire quad_inst_n_180;
  wire quad_inst_n_181;
  wire quad_inst_n_182;
  wire quad_inst_n_183;
  wire quad_inst_n_184;
  wire quad_inst_n_186;
  wire quad_inst_n_187;
  wire quad_inst_n_188;
  wire quad_inst_n_189;
  wire quad_inst_n_190;
  wire quad_inst_n_191;
  wire quad_inst_n_192;
  wire quad_inst_n_193;
  wire quad_inst_n_194;
  wire quad_inst_n_195;
  wire quad_inst_n_196;
  wire quad_inst_n_197;
  wire quad_inst_n_198;
  wire quad_inst_n_199;
  wire quad_inst_n_2;
  wire quad_inst_n_200;
  wire quad_inst_n_201;
  wire quad_inst_n_202;
  wire quad_inst_n_203;
  wire quad_inst_n_204;
  wire quad_inst_n_206;
  wire quad_inst_n_207;
  wire quad_inst_n_208;
  wire quad_inst_n_210;
  wire quad_inst_n_211;
  wire quad_inst_n_212;
  wire quad_inst_n_213;
  wire quad_inst_n_214;
  wire quad_inst_n_215;
  wire quad_inst_n_216;
  wire quad_inst_n_217;
  wire quad_inst_n_218;
  wire quad_inst_n_221;
  wire quad_inst_n_222;
  wire quad_inst_n_223;
  wire quad_inst_n_224;
  wire quad_inst_n_225;
  wire quad_inst_n_226;
  wire quad_inst_n_227;
  wire quad_inst_n_228;
  wire quad_inst_n_229;
  wire quad_inst_n_230;
  wire quad_inst_n_231;
  wire quad_inst_n_232;
  wire quad_inst_n_233;
  wire quad_inst_n_234;
  wire quad_inst_n_235;
  wire quad_inst_n_236;
  wire quad_inst_n_237;
  wire quad_inst_n_238;
  wire quad_inst_n_239;
  wire quad_inst_n_240;
  wire quad_inst_n_241;
  wire quad_inst_n_242;
  wire quad_inst_n_243;
  wire quad_inst_n_244;
  wire quad_inst_n_245;
  wire quad_inst_n_246;
  wire quad_inst_n_247;
  wire quad_inst_n_248;
  wire quad_inst_n_249;
  wire quad_inst_n_251;
  wire quad_inst_n_252;
  wire quad_inst_n_253;
  wire quad_inst_n_254;
  wire quad_inst_n_255;
  wire quad_inst_n_257;
  wire quad_inst_n_258;
  wire quad_inst_n_259;
  wire quad_inst_n_260;
  wire quad_inst_n_261;
  wire quad_inst_n_262;
  wire quad_inst_n_263;
  wire quad_inst_n_264;
  wire quad_inst_n_265;
  wire quad_inst_n_266;
  wire quad_inst_n_267;
  wire quad_inst_n_268;
  wire quad_inst_n_269;
  wire quad_inst_n_270;
  wire quad_inst_n_271;
  wire quad_inst_n_272;
  wire quad_inst_n_273;
  wire quad_inst_n_274;
  wire quad_inst_n_275;
  wire quad_inst_n_277;
  wire quad_inst_n_278;
  wire quad_inst_n_279;
  wire quad_inst_n_281;
  wire quad_inst_n_282;
  wire quad_inst_n_283;
  wire quad_inst_n_284;
  wire quad_inst_n_285;
  wire quad_inst_n_286;
  wire quad_inst_n_287;
  wire quad_inst_n_289;
  wire quad_inst_n_291;
  wire quad_inst_n_292;
  wire quad_inst_n_293;
  wire quad_inst_n_294;
  wire quad_inst_n_295;
  wire quad_inst_n_296;
  wire quad_inst_n_297;
  wire quad_inst_n_298;
  wire quad_inst_n_299;
  wire quad_inst_n_3;
  wire quad_inst_n_300;
  wire quad_inst_n_301;
  wire quad_inst_n_302;
  wire quad_inst_n_303;
  wire quad_inst_n_304;
  wire quad_inst_n_305;
  wire quad_inst_n_306;
  wire quad_inst_n_307;
  wire quad_inst_n_308;
  wire quad_inst_n_315;
  wire quad_inst_n_316;
  wire quad_inst_n_317;
  wire quad_inst_n_318;
  wire quad_inst_n_319;
  wire quad_inst_n_320;
  wire quad_inst_n_324;
  wire quad_inst_n_325;
  wire quad_inst_n_326;
  wire quad_inst_n_327;
  wire quad_inst_n_328;
  wire quad_inst_n_329;
  wire quad_inst_n_330;
  wire quad_inst_n_331;
  wire quad_inst_n_332;
  wire quad_inst_n_333;
  wire quad_inst_n_334;
  wire quad_inst_n_335;
  wire quad_inst_n_336;
  wire quad_inst_n_337;
  wire quad_inst_n_338;
  wire quad_inst_n_339;
  wire quad_inst_n_340;
  wire quad_inst_n_341;
  wire quad_inst_n_342;
  wire quad_inst_n_343;
  wire quad_inst_n_344;
  wire quad_inst_n_345;
  wire quad_inst_n_346;
  wire quad_inst_n_347;
  wire quad_inst_n_348;
  wire quad_inst_n_349;
  wire quad_inst_n_350;
  wire quad_inst_n_351;
  wire quad_inst_n_352;
  wire quad_inst_n_353;
  wire quad_inst_n_354;
  wire quad_inst_n_355;
  wire quad_inst_n_356;
  wire quad_inst_n_357;
  wire quad_inst_n_358;
  wire quad_inst_n_359;
  wire quad_inst_n_360;
  wire quad_inst_n_361;
  wire quad_inst_n_362;
  wire quad_inst_n_363;
  wire quad_inst_n_364;
  wire quad_inst_n_365;
  wire quad_inst_n_366;
  wire quad_inst_n_367;
  wire quad_inst_n_368;
  wire quad_inst_n_369;
  wire quad_inst_n_370;
  wire quad_inst_n_371;
  wire quad_inst_n_372;
  wire quad_inst_n_373;
  wire quad_inst_n_374;
  wire quad_inst_n_375;
  wire quad_inst_n_376;
  wire quad_inst_n_4;
  wire quad_inst_n_505;
  wire quad_inst_n_506;
  wire quad_inst_n_507;
  wire quad_inst_n_508;
  wire quad_inst_n_509;
  wire quad_inst_n_510;
  wire quad_inst_n_511;
  wire quad_inst_n_512;
  wire quad_inst_n_513;
  wire quad_inst_n_514;
  wire quad_inst_n_515;
  wire quad_inst_n_516;
  wire quad_inst_n_517;
  wire quad_inst_n_518;
  wire quad_inst_n_519;
  wire quad_inst_n_520;
  wire quad_inst_n_521;
  wire quad_inst_n_522;
  wire quad_inst_n_523;
  wire quad_inst_n_524;
  wire quad_inst_n_525;
  wire quad_inst_n_526;
  wire quad_inst_n_527;
  wire quad_inst_n_528;
  wire quad_inst_n_529;
  wire quad_inst_n_530;
  wire quad_inst_n_531;
  wire quad_inst_n_532;
  wire quad_inst_n_533;
  wire quad_inst_n_534;
  wire quad_inst_n_535;
  wire quad_inst_n_536;
  wire quad_inst_n_537;
  wire quad_inst_n_538;
  wire quad_inst_n_539;
  wire quad_inst_n_540;
  wire quad_inst_n_541;
  wire quad_inst_n_542;
  wire quad_inst_n_543;
  wire quad_inst_n_544;
  wire quad_inst_n_545;
  wire quad_inst_n_546;
  wire quad_inst_n_547;
  wire quad_inst_n_548;
  wire quad_inst_n_549;
  wire quad_inst_n_550;
  wire quad_inst_n_551;
  wire quad_inst_n_552;
  wire quad_inst_n_553;
  wire quad_inst_n_554;
  wire quad_inst_n_555;
  wire quad_inst_n_556;
  wire quad_inst_n_557;
  wire quad_inst_n_558;
  wire quad_inst_n_559;
  wire quad_inst_n_560;
  wire quad_inst_n_561;
  wire quad_inst_n_562;
  wire quad_inst_n_563;
  wire quad_inst_n_564;
  wire quad_inst_n_565;
  wire quad_inst_n_566;
  wire quad_inst_n_567;
  wire quad_inst_n_568;
  wire quad_inst_n_569;
  wire quad_inst_n_570;
  wire quad_inst_n_571;
  wire quad_inst_n_572;
  wire quad_inst_n_573;
  wire quad_inst_n_574;
  wire quad_inst_n_575;
  wire quad_inst_n_576;
  wire quad_inst_n_577;
  wire quad_inst_n_578;
  wire quad_inst_n_579;
  wire quad_inst_n_580;
  wire quad_inst_n_581;
  wire quad_inst_n_582;
  wire quad_inst_n_583;
  wire quad_inst_n_584;
  wire quad_inst_n_585;
  wire quad_inst_n_586;
  wire quad_inst_n_587;
  wire quad_inst_n_588;
  wire quad_inst_n_589;
  wire quad_inst_n_590;
  wire quad_inst_n_591;
  wire quad_inst_n_592;
  wire quad_inst_n_593;
  wire quad_inst_n_594;
  wire quad_inst_n_595;
  wire quad_inst_n_596;
  wire quad_inst_n_597;
  wire quad_inst_n_598;
  wire quad_inst_n_599;
  wire quad_inst_n_600;
  wire quad_inst_n_601;
  wire quad_inst_n_602;
  wire quad_inst_n_603;
  wire quad_inst_n_604;
  wire quad_inst_n_605;
  wire quad_inst_n_606;
  wire quad_inst_n_607;
  wire quad_inst_n_608;
  wire quad_inst_n_609;
  wire quad_inst_n_610;
  wire quad_inst_n_611;
  wire quad_inst_n_612;
  wire quad_inst_n_613;
  wire quad_inst_n_614;
  wire quad_inst_n_615;
  wire quad_inst_n_616;
  wire quad_inst_n_617;
  wire quad_inst_n_618;
  wire quad_inst_n_619;
  wire quad_inst_n_620;
  wire quad_inst_n_621;
  wire quad_inst_n_622;
  wire quad_inst_n_623;
  wire quad_inst_n_624;
  wire quad_inst_n_625;
  wire quad_inst_n_626;
  wire quad_inst_n_627;
  wire quad_inst_n_628;
  wire quad_inst_n_629;
  wire quad_inst_n_630;
  wire quad_inst_n_631;
  wire quad_inst_n_632;
  wire quad_inst_n_633;
  wire quad_inst_n_634;
  wire quad_inst_n_635;
  wire quad_inst_n_636;
  wire quad_inst_n_637;
  wire quad_inst_n_638;
  wire quad_inst_n_639;
  wire quad_inst_n_640;
  wire quad_inst_n_641;
  wire quad_inst_n_642;
  wire quad_inst_n_643;
  wire quad_inst_n_644;
  wire quad_inst_n_645;
  wire quad_inst_n_646;
  wire quad_inst_n_647;
  wire quad_inst_n_648;
  wire quad_inst_n_649;
  wire quad_inst_n_650;
  wire quad_inst_n_651;
  wire quad_inst_n_652;
  wire quad_inst_n_653;
  wire quad_inst_n_654;
  wire quad_inst_n_655;
  wire quad_inst_n_656;
  wire quad_inst_n_657;
  wire quad_inst_n_658;
  wire quad_inst_n_659;
  wire quad_inst_n_660;
  wire quad_inst_n_661;
  wire quad_inst_n_662;
  wire quad_inst_n_663;
  wire quad_inst_n_664;
  wire quad_inst_n_665;
  wire quad_inst_n_666;
  wire quad_inst_n_667;
  wire quad_inst_n_668;
  wire quad_inst_n_669;
  wire quad_inst_n_670;
  wire quad_inst_n_671;
  wire quad_inst_n_672;
  wire quad_inst_n_673;
  wire quad_inst_n_674;
  wire quad_inst_n_675;
  wire quad_inst_n_676;
  wire quad_inst_n_677;
  wire quad_inst_n_678;
  wire quad_inst_n_679;
  wire quad_inst_n_68;
  wire quad_inst_n_680;
  wire quad_inst_n_681;
  wire quad_inst_n_682;
  wire quad_inst_n_683;
  wire quad_inst_n_684;
  wire quad_inst_n_685;
  wire quad_inst_n_686;
  wire quad_inst_n_687;
  wire quad_inst_n_688;
  wire quad_inst_n_689;
  wire quad_inst_n_690;
  wire quad_inst_n_691;
  wire quad_inst_n_692;
  wire quad_inst_n_693;
  wire quad_inst_n_694;
  wire quad_inst_n_695;
  wire quad_inst_n_696;
  wire quad_inst_n_697;
  wire quad_inst_n_698;
  wire quad_inst_n_699;
  wire quad_inst_n_700;
  wire quad_inst_n_701;
  wire quad_inst_n_702;
  wire quad_inst_n_703;
  wire quad_inst_n_704;
  wire quad_inst_n_705;
  wire quad_inst_n_706;
  wire quad_inst_n_707;
  wire quad_inst_n_708;
  wire quad_inst_n_709;
  wire quad_inst_n_710;
  wire quad_inst_n_711;
  wire quad_inst_n_712;
  wire quad_inst_n_713;
  wire quad_inst_n_714;
  wire quad_inst_n_715;
  wire quad_inst_n_716;
  wire quad_inst_n_717;
  wire quad_inst_n_718;
  wire quad_inst_n_719;
  wire quad_inst_n_72;
  wire quad_inst_n_720;
  wire quad_inst_n_721;
  wire quad_inst_n_722;
  wire quad_inst_n_723;
  wire quad_inst_n_724;
  wire quad_inst_n_725;
  wire quad_inst_n_726;
  wire quad_inst_n_727;
  wire quad_inst_n_728;
  wire quad_inst_n_729;
  wire quad_inst_n_73;
  wire quad_inst_n_730;
  wire quad_inst_n_731;
  wire quad_inst_n_732;
  wire quad_inst_n_733;
  wire quad_inst_n_734;
  wire quad_inst_n_735;
  wire quad_inst_n_736;
  wire quad_inst_n_737;
  wire quad_inst_n_738;
  wire quad_inst_n_739;
  wire quad_inst_n_74;
  wire quad_inst_n_740;
  wire quad_inst_n_741;
  wire quad_inst_n_742;
  wire quad_inst_n_743;
  wire quad_inst_n_744;
  wire quad_inst_n_745;
  wire quad_inst_n_746;
  wire quad_inst_n_747;
  wire quad_inst_n_748;
  wire quad_inst_n_749;
  wire quad_inst_n_75;
  wire quad_inst_n_750;
  wire quad_inst_n_751;
  wire quad_inst_n_752;
  wire quad_inst_n_753;
  wire quad_inst_n_754;
  wire quad_inst_n_755;
  wire quad_inst_n_756;
  wire quad_inst_n_757;
  wire quad_inst_n_758;
  wire quad_inst_n_759;
  wire quad_inst_n_76;
  wire quad_inst_n_760;
  wire quad_inst_n_761;
  wire quad_inst_n_762;
  wire quad_inst_n_763;
  wire quad_inst_n_764;
  wire quad_inst_n_765;
  wire quad_inst_n_766;
  wire quad_inst_n_767;
  wire quad_inst_n_768;
  wire quad_inst_n_769;
  wire quad_inst_n_770;
  wire quad_inst_n_771;
  wire quad_inst_n_772;
  wire quad_inst_n_773;
  wire quad_inst_n_774;
  wire quad_inst_n_775;
  wire quad_inst_n_776;
  wire quad_inst_n_777;
  wire quad_inst_n_778;
  wire quad_inst_n_779;
  wire quad_inst_n_780;
  wire quad_inst_n_781;
  wire quad_inst_n_782;
  wire quad_inst_n_783;
  wire quad_inst_n_784;
  wire quad_inst_n_785;
  wire quad_inst_n_786;
  wire quad_inst_n_787;
  wire quad_inst_n_788;
  wire quad_inst_n_789;
  wire quad_inst_n_79;
  wire quad_inst_n_790;
  wire quad_inst_n_791;
  wire quad_inst_n_792;
  wire quad_inst_n_793;
  wire quad_inst_n_794;
  wire quad_inst_n_795;
  wire quad_inst_n_796;
  wire quad_inst_n_797;
  wire quad_inst_n_798;
  wire quad_inst_n_799;
  wire quad_inst_n_8;
  wire quad_inst_n_80;
  wire quad_inst_n_800;
  wire quad_inst_n_801;
  wire quad_inst_n_802;
  wire quad_inst_n_803;
  wire quad_inst_n_804;
  wire quad_inst_n_805;
  wire quad_inst_n_806;
  wire quad_inst_n_807;
  wire quad_inst_n_808;
  wire quad_inst_n_809;
  wire quad_inst_n_81;
  wire quad_inst_n_810;
  wire quad_inst_n_811;
  wire quad_inst_n_812;
  wire quad_inst_n_813;
  wire quad_inst_n_814;
  wire quad_inst_n_815;
  wire quad_inst_n_816;
  wire quad_inst_n_817;
  wire quad_inst_n_818;
  wire quad_inst_n_819;
  wire quad_inst_n_82;
  wire quad_inst_n_820;
  wire quad_inst_n_821;
  wire quad_inst_n_822;
  wire quad_inst_n_823;
  wire quad_inst_n_824;
  wire quad_inst_n_825;
  wire quad_inst_n_826;
  wire quad_inst_n_827;
  wire quad_inst_n_828;
  wire quad_inst_n_829;
  wire quad_inst_n_83;
  wire quad_inst_n_830;
  wire quad_inst_n_831;
  wire quad_inst_n_832;
  wire quad_inst_n_833;
  wire quad_inst_n_834;
  wire quad_inst_n_835;
  wire quad_inst_n_836;
  wire quad_inst_n_837;
  wire quad_inst_n_838;
  wire quad_inst_n_839;
  wire quad_inst_n_84;
  wire quad_inst_n_840;
  wire quad_inst_n_841;
  wire quad_inst_n_842;
  wire quad_inst_n_843;
  wire quad_inst_n_844;
  wire quad_inst_n_845;
  wire quad_inst_n_846;
  wire quad_inst_n_847;
  wire quad_inst_n_848;
  wire quad_inst_n_849;
  wire quad_inst_n_85;
  wire quad_inst_n_850;
  wire quad_inst_n_851;
  wire quad_inst_n_852;
  wire quad_inst_n_853;
  wire quad_inst_n_854;
  wire quad_inst_n_855;
  wire quad_inst_n_856;
  wire quad_inst_n_857;
  wire quad_inst_n_858;
  wire quad_inst_n_859;
  wire quad_inst_n_86;
  wire quad_inst_n_860;
  wire quad_inst_n_861;
  wire quad_inst_n_862;
  wire quad_inst_n_863;
  wire quad_inst_n_864;
  wire quad_inst_n_865;
  wire quad_inst_n_866;
  wire quad_inst_n_867;
  wire quad_inst_n_868;
  wire quad_inst_n_869;
  wire quad_inst_n_87;
  wire quad_inst_n_870;
  wire quad_inst_n_871;
  wire quad_inst_n_872;
  wire quad_inst_n_873;
  wire quad_inst_n_874;
  wire quad_inst_n_875;
  wire quad_inst_n_876;
  wire quad_inst_n_877;
  wire quad_inst_n_878;
  wire quad_inst_n_879;
  wire quad_inst_n_88;
  wire quad_inst_n_880;
  wire quad_inst_n_881;
  wire quad_inst_n_882;
  wire quad_inst_n_883;
  wire quad_inst_n_884;
  wire quad_inst_n_885;
  wire quad_inst_n_886;
  wire quad_inst_n_887;
  wire quad_inst_n_888;
  wire quad_inst_n_889;
  wire quad_inst_n_89;
  wire quad_inst_n_890;
  wire quad_inst_n_891;
  wire quad_inst_n_892;
  wire quad_inst_n_895;
  wire quad_inst_n_896;
  wire quad_inst_n_897;
  wire quad_inst_n_898;
  wire quad_inst_n_899;
  wire quad_inst_n_9;
  wire quad_inst_n_90;
  wire quad_inst_n_900;
  wire quad_inst_n_901;
  wire quad_inst_n_902;
  wire quad_inst_n_903;
  wire quad_inst_n_904;
  wire quad_inst_n_905;
  wire quad_inst_n_906;
  wire quad_inst_n_907;
  wire quad_inst_n_908;
  wire quad_inst_n_909;
  wire quad_inst_n_91;
  wire quad_inst_n_910;
  wire quad_inst_n_911;
  wire quad_inst_n_912;
  wire quad_inst_n_913;
  wire quad_inst_n_914;
  wire quad_inst_n_915;
  wire quad_inst_n_916;
  wire quad_inst_n_917;
  wire quad_inst_n_918;
  wire quad_inst_n_919;
  wire quad_inst_n_92;
  wire quad_inst_n_920;
  wire quad_inst_n_93;
  wire quad_inst_n_94;
  wire quad_inst_n_95;
  wire quad_inst_n_953;
  wire quad_inst_n_954;
  wire quad_inst_n_955;
  wire quad_inst_n_956;
  wire quad_inst_n_959;
  wire quad_inst_n_96;
  wire quad_inst_n_960;
  wire quad_inst_n_961;
  wire quad_inst_n_962;
  wire quad_inst_n_963;
  wire quad_inst_n_964;
  wire quad_inst_n_965;
  wire quad_inst_n_966;
  wire quad_inst_n_967;
  wire quad_inst_n_968;
  wire quad_inst_n_969;
  wire quad_inst_n_97;
  wire quad_inst_n_970;
  wire quad_inst_n_971;
  wire quad_inst_n_972;
  wire quad_inst_n_973;
  wire quad_inst_n_974;
  wire quad_inst_n_975;
  wire quad_inst_n_976;
  wire quad_inst_n_977;
  wire quad_inst_n_978;
  wire quad_inst_n_979;
  wire quad_inst_n_98;
  wire quad_inst_n_980;
  wire quad_inst_n_981;
  wire quad_inst_n_982;
  wire quad_inst_n_983;
  wire quad_inst_n_984;
  wire quad_inst_n_985;
  wire quad_inst_n_986;
  wire quad_inst_n_987;
  wire quad_inst_n_988;
  wire quad_inst_n_989;
  wire quad_inst_n_99;
  wire quad_inst_n_990;
  wire quad_inst_n_991;
  wire quad_inst_n_992;
  wire quad_inst_n_993;
  wire quad_inst_n_994;
  wire quad_inst_n_995;
  wire quad_inst_n_996;
  wire quad_inst_n_997;
  wire quad_inst_n_998;
  wire quad_inst_n_999;
  wire rrst;
  wire [3:0]rxn;
  wire [3:0]rxp;
  wire s2_axis_tready;
  wire [1:1]state;
  wire \state[0]_bret__0_i_1_n_0 ;
  wire \state[1]_i_2_n_0 ;
  wire \state_reg[0]_bret__0_n_0 ;
  wire \state_reg[0]_bret__1_n_0 ;
  wire \state_reg[0]_bret__2_n_0 ;
  wire \state_reg[0]_bret__3_n_0 ;
  wire \state_reg[0]_bret_n_0 ;
  wire tvalid_r;
  wire tvalid_r_i_1_n_0;
  wire tvalid_r_i_2_n_0;
  wire [3:0]txn;
  wire [3:0]txp;
  wire NLW_quad_inst_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_quad_inst_S1_AXIS_TREADY_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M2_AXIS_TDATA_UNCONNECTED;

  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__1 ch0_rx_function_inst
       (.D({ch0_rx_function_inst_n_0,ch0_rx_function_inst_n_1,ch0_rx_function_inst_n_2,gpoToLogic[4]}),
        .GPI(gpi_to_gt_int[4]),
        .Q(cmd_to_axi[18:16]),
        .apb3clk(apb3clk),
        .ch0_rxmstdatapathreset(ch0_rxmstdatapathreset),
        .ch0_rxmstreset(ch0_rxmstreset),
        .ch0_rxrate(ch0_rxrate),
        .gpi(gpi[4]),
        .gpo(gpo[4]),
        .out({ch0_rx_function_inst_n_0,ch0_rx_function_inst_n_1,ch0_rx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__1 ch0_tx_function_inst
       (.D({ch0_tx_function_inst_n_0,ch0_tx_function_inst_n_1,ch0_tx_function_inst_n_2,gpoToLogic[0]}),
        .GPI(gpi_to_gt_int[0]),
        .Q(cmd_to_axi[3:0]),
        .apb3clk(apb3clk),
        .ch0_txmstdatapathreset(ch0_txmstdatapathreset),
        .ch0_txmstreset(ch0_txmstreset),
        .ch0_txprbssel(ch0_txprbssel),
        .ch0_txrate(ch0_txrate),
        .gpi(gpi[0]),
        .gpo(gpo[0]),
        .out({ch0_tx_function_inst_n_0,ch0_tx_function_inst_n_1,ch0_tx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__2 ch1_rx_function_inst
       (.D({ch1_rx_function_inst_n_0,ch1_rx_function_inst_n_1,ch1_rx_function_inst_n_2,gpoToLogic[5]}),
        .GPI(gpi_to_gt_int[5]),
        .Q(cmd_to_axi[22:20]),
        .apb3clk(apb3clk),
        .gpi(gpi[5]),
        .gpo(gpo[5]),
        .out({ch1_rx_function_inst_n_0,ch1_rx_function_inst_n_1,ch1_rx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__2 ch1_tx_function_inst
       (.D({ch1_tx_function_inst_n_0,ch1_tx_function_inst_n_1,ch1_tx_function_inst_n_2,gpoToLogic[1]}),
        .GPI(gpi_to_gt_int[1]),
        .Q(cmd_to_axi[7:4]),
        .apb3clk(apb3clk),
        .gpi(gpi[1]),
        .gpo(gpo[1]),
        .out({ch1_tx_function_inst_n_0,ch1_tx_function_inst_n_1,ch1_tx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__3 ch2_rx_function_inst
       (.D({ch2_rx_function_inst_n_0,ch2_rx_function_inst_n_1,ch2_rx_function_inst_n_2,gpoToLogic[6]}),
        .GPI(gpi_to_gt_int[6]),
        .Q(cmd_to_axi[26:24]),
        .apb3clk(apb3clk),
        .gpi(gpi[6]),
        .gpo(gpo[6]),
        .out({ch2_rx_function_inst_n_0,ch2_rx_function_inst_n_1,ch2_rx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__3 ch2_tx_function_inst
       (.D({ch2_tx_function_inst_n_0,ch2_tx_function_inst_n_1,ch2_tx_function_inst_n_2,gpoToLogic[2]}),
        .GPI(gpi_to_gt_int[2]),
        .Q(cmd_to_axi[11:8]),
        .apb3clk(apb3clk),
        .gpi(gpi[2]),
        .gpo(gpo[2]),
        .out({ch2_tx_function_inst_n_0,ch2_tx_function_inst_n_1,ch2_tx_function_inst_n_2}),
        .rrst(rrst));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function ch3_rx_function_inst
       (.D({ch3_rx_function_inst_n_0,ch3_rx_function_inst_n_1,ch3_rx_function_inst_n_2,gpoToLogic[7]}),
        .GPI(gpi_to_gt_int[7]),
        .Q(cmd_to_axi[30:28]),
        .apb3clk(apb3clk),
        .gpi(gpi[7]),
        .gpo(gpo[7]),
        .gtpowergood_int(gtpowergood_int),
        .out({ch3_rx_function_inst_n_0,ch3_rx_function_inst_n_1,ch3_rx_function_inst_n_2}),
        .p_0_in(p_0_in),
        .rrst(rrst),
        .\rrst_r_reg[3]_0 (gpo[15]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function ch3_tx_function_inst
       (.D({ch3_tx_function_inst_n_0,ch3_tx_function_inst_n_1,ch3_tx_function_inst_n_2,gpoToLogic[3]}),
        .GPI(gpi_to_gt_int[3]),
        .Q(cmd_to_axi[15:12]),
        .apb3clk(apb3clk),
        .gpi(gpi[3]),
        .gpo(gpo[3]),
        .out({ch3_tx_function_inst_n_0,ch3_tx_function_inst_n_1,ch3_tx_function_inst_n_2}),
        .rrst(rrst));
  LUT2 #(
    .INIT(4'h8)) 
    gtpowergood_INST_0
       (.I0(gpo[15]),
        .I1(gtpowergood_int),
        .O(gtpowergood));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTYP_QUAD #(
    .A_CFG0(32'h00000740),
    .A_CFG1(32'h4E4E4E76),
    .A_CFG2(32'h60000000),
    .A_CFG3(32'hE0000000),
    .A_CFG4(32'hE0000000),
    .A_CFG5(32'hE0000000),
    .CH0_ADAPT_APT_CFG(32'h00000000),
    .CH0_ADAPT_CAL_CFG(32'h81EE6400),
    .CH0_ADAPT_DFE_CFG(32'h00000040),
    .CH0_ADAPT_GC_CFG0(32'h00901070),
    .CH0_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH0_ADAPT_GC_CFG2(32'h002000E8),
    .CH0_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH0_ADAPT_GEN_CFG0(32'h00120000),
    .CH0_ADAPT_GEN_CFG1(32'h00000000),
    .CH0_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH0_ADAPT_GEN_CFG3(32'h10000000),
    .CH0_ADAPT_H01_CFG(32'h012002A0),
    .CH0_ADAPT_H23_CFG(32'h01A001A0),
    .CH0_ADAPT_H45_CFG(32'h01A001A0),
    .CH0_ADAPT_H67_CFG(32'h01A001A0),
    .CH0_ADAPT_H89_CFG(32'h01A001A0),
    .CH0_ADAPT_HAB_CFG(32'h01A001A0),
    .CH0_ADAPT_HCD_CFG(32'h01A001A0),
    .CH0_ADAPT_HEF_CFG(32'h01A003A0),
    .CH0_ADAPT_KH_CFG0(32'h2008793F),
    .CH0_ADAPT_KH_CFG1(32'h00000000),
    .CH0_ADAPT_KH_CFG2(32'h000043A0),
    .CH0_ADAPT_KH_CFG3(32'h00000000),
    .CH0_ADAPT_KH_CFG4(32'h00007BA0),
    .CH0_ADAPT_KH_CFG5(32'h00000000),
    .CH0_ADAPT_KL_CFG0(32'h000080A0),
    .CH0_ADAPT_KL_CFG1(32'h000043A0),
    .CH0_ADAPT_LCK_CFG0(32'h00004000),
    .CH0_ADAPT_LCK_CFG1(32'h00004000),
    .CH0_ADAPT_LCK_CFG2(32'h00000000),
    .CH0_ADAPT_LCK_CFG3(32'h00000000),
    .CH0_ADAPT_LOP_CFG(32'hEE000660),
    .CH0_ADAPT_OS_CFG(32'h80000120),
    .CH0_CHCLK_ILO_CFG(32'h00640033),
    .CH0_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH0_CHCLK_RSV_CFG(32'h00000000),
    .CH0_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH0_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH0_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH0_CHCLK_RXPI_CFG(32'h0050080C),
    .CH0_CHCLK_TXCAL_CFG(32'h00400020),
    .CH0_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH0_CHL_RSV_CFG0(32'hC6800009),
    .CH0_CHL_RSV_CFG1(32'h00000618),
    .CH0_CHL_RSV_CFG2(32'h005F0590),
    .CH0_CHL_RSV_CFG3(32'h00000000),
    .CH0_CHL_RSV_CFG4(32'h00000000),
    .CH0_DA_CFG(32'h000A000A),
    .CH0_EYESCAN_CFG0(32'h00000800),
    .CH0_EYESCAN_CFG1(32'h00000000),
    .CH0_EYESCAN_CFG10(32'h00000000),
    .CH0_EYESCAN_CFG11(32'h00000000),
    .CH0_EYESCAN_CFG12(32'h00000000),
    .CH0_EYESCAN_CFG13(32'h00000000),
    .CH0_EYESCAN_CFG14(32'h00000000),
    .CH0_EYESCAN_CFG15(32'h00000000),
    .CH0_EYESCAN_CFG16(32'h00000000),
    .CH0_EYESCAN_CFG2(32'h00000000),
    .CH0_EYESCAN_CFG3(32'h00000000),
    .CH0_EYESCAN_CFG4(32'h00000000),
    .CH0_EYESCAN_CFG5(32'h00000000),
    .CH0_EYESCAN_CFG6(32'h00000000),
    .CH0_EYESCAN_CFG7(32'h00000000),
    .CH0_EYESCAN_CFG8(32'h00000000),
    .CH0_EYESCAN_CFG9(32'h00000000),
    .CH0_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH0_FABRIC_INTF_CFG1(32'h00000400),
    .CH0_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH0_FABRIC_INTF_CFG3(32'h00000000),
    .CH0_FABRIC_INTF_CFG4(32'h00005000),
    .CH0_FABRIC_INTF_CFG5(32'h00006402),
    .CH0_INSTANTIATED(1'b1),
    .CH0_MONITOR_CFG(32'h00000000),
    .CH0_PIPE_CTRL_CFG0(32'h00040060),
    .CH0_PIPE_CTRL_CFG1(32'h00200293),
    .CH0_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH0_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH0_PIPE_CTRL_CFG3(32'h0498012F),
    .CH0_PIPE_CTRL_CFG4(32'h00440000),
    .CH0_PIPE_CTRL_CFG5(32'hA0000000),
    .CH0_PIPE_CTRL_CFG6(32'h3C100064),
    .CH0_PIPE_CTRL_CFG7(32'h0400A00A),
    .CH0_PIPE_CTRL_CFG8(32'h0201E078),
    .CH0_PIPE_CTRL_CFG9(32'h00000000),
    .CH0_PIPE_TX_EQ_CFG0(32'h0A756BDF),
    .CH0_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH0_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH0_PIPE_TX_EQ_CFG3(32'h00060192),
    .CH0_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH0_RESET_CFG(32'h08100035),
    .CH0_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH0_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH0_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH0_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH0_RESET_TIME_CFG0(32'h02108401),
    .CH0_RESET_TIME_CFG1(32'h02108421),
    .CH0_RESET_TIME_CFG2(32'h02108421),
    .CH0_RESET_TIME_CFG3(32'h85082421),
    .CH0_RXOUTCLK_FREQ(150.000000),
    .CH0_RXOUTCLK_REF_FREQ(100.000000),
    .CH0_RXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH0_RX_CDR_CFG0(32'hAC000042),
    .CH0_RX_CDR_CFG1(32'h60000100),
    .CH0_RX_CDR_CFG2(32'h08004A49),
    .CH0_RX_CDR_CFG3(32'h000B5CF6),
    .CH0_RX_CDR_CFG4(32'h243C3000),
    .CH0_RX_CRC_CFG0(32'h00007880),
    .CH0_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH0_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH0_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH0_RX_CTLE_CFG0(32'h01DC0100),
    .CH0_RX_CTLE_CFG1(32'h40000000),
    .CH0_RX_DACI2V_CFG0(32'h04008ECA),
    .CH0_RX_DATA_RATE(8.000000),
    .CH0_RX_DFE_CFG0(32'hD0025408),
    .CH0_RX_ELASTIC_BUF_CFG0(32'h00402062),
    .CH0_RX_ELASTIC_BUF_CFG1(32'h1FCCE7F2),
    .CH0_RX_ELASTIC_BUF_CFG2(32'hC000007F),
    .CH0_RX_ELASTIC_BUF_CFG3(32'hDFE00000),
    .CH0_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH0_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH0_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH0_RX_ELASTIC_BUF_CFG7(32'h04000004),
    .CH0_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH0_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH0_RX_MISC_CFG0(32'h50000001),
    .CH0_RX_OOB_CFG0(32'h2454C204),
    .CH0_RX_OOB_CFG1(32'h010241C4),
    .CH0_RX_PAD_CFG0(32'h00000000),
    .CH0_RX_PAD_CFG1(32'h1044497A),
    .CH0_RX_PCS_CFG0(32'hE835F0AF),
    .CH0_RX_PCS_CFG1(32'h2410207F),
    .CH0_RX_PCS_CFG2(32'h4005C100),
    .CH0_RX_PCS_CFG3(32'h1C1D0F0F),
    .CH0_RX_PCS_CFG4(32'hC280A002),
    .CH0_RX_PHALIGN_CFG0(32'h00000003),
    .CH0_RX_PHALIGN_CFG1(32'h00838000),
    .CH0_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH0_RX_PHALIGN_CFG3(32'h00038000),
    .CH0_RX_PHALIGN_CFG4(32'h0000020A),
    .CH0_RX_PHALIGN_CFG5(32'h03020000),
    .CH0_SIM_MODE("FAST"),
    .CH0_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH0_SIM_RESET_SPEEDUP("TRUE"),
    .CH0_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH0_TXOUTCLK_FREQ(150.000000),
    .CH0_TXOUTCLK_REF_FREQ(100.000000),
    .CH0_TXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH0_TX_10G_CFG0(32'h00000000),
    .CH0_TX_10G_CFG1(32'h40000000),
    .CH0_TX_10G_CFG2(32'h00000000),
    .CH0_TX_10G_CFG3(32'h00000000),
    .CH0_TX_ANA_CFG0(32'h000000D0),
    .CH0_TX_CRC_CFG0(32'h00007800),
    .CH0_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH0_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH0_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH0_TX_DATA_RATE(8.000000),
    .CH0_TX_DRV_CFG0(32'h00400000),
    .CH0_TX_DRV_CFG1(32'h00001800),
    .CH0_TX_PCS_CFG0(32'h21520100),
    .CH0_TX_PCS_CFG1(32'h2835557C),
    .CH0_TX_PCS_CFG2(32'h1555F2AA),
    .CH0_TX_PCS_CFG3(32'h001AAA83),
    .CH0_TX_PHALIGN_CFG0(32'h00000000),
    .CH0_TX_PHALIGN_CFG1(32'h00047000),
    .CH0_TX_PHALIGN_CFG2(32'h00038038),
    .CH0_TX_PHALIGN_CFG3(32'h00000000),
    .CH0_TX_PHALIGN_CFG4(32'h180000E0),
    .CH0_TX_PHALIGN_CFG5(32'h000000A0),
    .CH0_TX_PIPPM_CFG(32'h02000000),
    .CH0_TX_SER_CFG0(32'h00000000),
    .CH1_ADAPT_APT_CFG(32'h00000000),
    .CH1_ADAPT_CAL_CFG(32'h81EE6400),
    .CH1_ADAPT_DFE_CFG(32'h00000040),
    .CH1_ADAPT_GC_CFG0(32'h00901070),
    .CH1_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH1_ADAPT_GC_CFG2(32'h002000E8),
    .CH1_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH1_ADAPT_GEN_CFG0(32'h00120000),
    .CH1_ADAPT_GEN_CFG1(32'h00000000),
    .CH1_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH1_ADAPT_GEN_CFG3(32'h10000000),
    .CH1_ADAPT_H01_CFG(32'h012002A0),
    .CH1_ADAPT_H23_CFG(32'h01A001A0),
    .CH1_ADAPT_H45_CFG(32'h01A001A0),
    .CH1_ADAPT_H67_CFG(32'h01A001A0),
    .CH1_ADAPT_H89_CFG(32'h01A001A0),
    .CH1_ADAPT_HAB_CFG(32'h01A001A0),
    .CH1_ADAPT_HCD_CFG(32'h01A001A0),
    .CH1_ADAPT_HEF_CFG(32'h01A003A0),
    .CH1_ADAPT_KH_CFG0(32'h2008793F),
    .CH1_ADAPT_KH_CFG1(32'h00000000),
    .CH1_ADAPT_KH_CFG2(32'h000043A0),
    .CH1_ADAPT_KH_CFG3(32'h00000000),
    .CH1_ADAPT_KH_CFG4(32'h00007BA0),
    .CH1_ADAPT_KH_CFG5(32'h00000000),
    .CH1_ADAPT_KL_CFG0(32'h000080A0),
    .CH1_ADAPT_KL_CFG1(32'h000043A0),
    .CH1_ADAPT_LCK_CFG0(32'h00004000),
    .CH1_ADAPT_LCK_CFG1(32'h00004000),
    .CH1_ADAPT_LCK_CFG2(32'h00000000),
    .CH1_ADAPT_LCK_CFG3(32'h00000000),
    .CH1_ADAPT_LOP_CFG(32'hEE000660),
    .CH1_ADAPT_OS_CFG(32'h80000120),
    .CH1_CHCLK_ILO_CFG(32'h00640033),
    .CH1_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH1_CHCLK_RSV_CFG(32'h00000000),
    .CH1_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH1_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH1_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH1_CHCLK_RXPI_CFG(32'h0050080C),
    .CH1_CHCLK_TXCAL_CFG(32'h00400020),
    .CH1_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH1_CHL_RSV_CFG0(32'hC6800009),
    .CH1_CHL_RSV_CFG1(32'h00000618),
    .CH1_CHL_RSV_CFG2(32'h005F0590),
    .CH1_CHL_RSV_CFG3(32'h00000000),
    .CH1_CHL_RSV_CFG4(32'h00000000),
    .CH1_DA_CFG(32'h000A000A),
    .CH1_EYESCAN_CFG0(32'h00000800),
    .CH1_EYESCAN_CFG1(32'h00000000),
    .CH1_EYESCAN_CFG10(32'h00000000),
    .CH1_EYESCAN_CFG11(32'h00000000),
    .CH1_EYESCAN_CFG12(32'h00000000),
    .CH1_EYESCAN_CFG13(32'h00000000),
    .CH1_EYESCAN_CFG14(32'h00000000),
    .CH1_EYESCAN_CFG15(32'h00000000),
    .CH1_EYESCAN_CFG16(32'h00000000),
    .CH1_EYESCAN_CFG2(32'h00000000),
    .CH1_EYESCAN_CFG3(32'h00000000),
    .CH1_EYESCAN_CFG4(32'h00000000),
    .CH1_EYESCAN_CFG5(32'h00000000),
    .CH1_EYESCAN_CFG6(32'h00000000),
    .CH1_EYESCAN_CFG7(32'h00000000),
    .CH1_EYESCAN_CFG8(32'h00000000),
    .CH1_EYESCAN_CFG9(32'h00000000),
    .CH1_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH1_FABRIC_INTF_CFG1(32'h00030400),
    .CH1_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH1_FABRIC_INTF_CFG3(32'h000C0000),
    .CH1_FABRIC_INTF_CFG4(32'h00005000),
    .CH1_FABRIC_INTF_CFG5(32'h00006402),
    .CH1_INSTANTIATED(1'b0),
    .CH1_MONITOR_CFG(32'h00000000),
    .CH1_PIPE_CTRL_CFG0(32'h00040060),
    .CH1_PIPE_CTRL_CFG1(32'h00200293),
    .CH1_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH1_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH1_PIPE_CTRL_CFG3(32'h0018012F),
    .CH1_PIPE_CTRL_CFG4(32'h40440000),
    .CH1_PIPE_CTRL_CFG5(32'hA0000000),
    .CH1_PIPE_CTRL_CFG6(32'h3C100064),
    .CH1_PIPE_CTRL_CFG7(32'h0400A00A),
    .CH1_PIPE_CTRL_CFG8(32'h02000000),
    .CH1_PIPE_CTRL_CFG9(32'h00000000),
    .CH1_PIPE_TX_EQ_CFG0(32'h0A756BDF),
    .CH1_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH1_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH1_PIPE_TX_EQ_CFG3(32'h00060192),
    .CH1_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH1_RESET_CFG(32'h08100025),
    .CH1_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH1_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH1_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH1_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH1_RESET_TIME_CFG0(32'h02108401),
    .CH1_RESET_TIME_CFG1(32'h02108421),
    .CH1_RESET_TIME_CFG2(32'h02108421),
    .CH1_RESET_TIME_CFG3(32'h85082421),
    .CH1_RXOUTCLK_FREQ(390.625000),
    .CH1_RXOUTCLK_REF_FREQ(100.000000),
    .CH1_RXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH1_RX_CDR_CFG0(32'hB4000042),
    .CH1_RX_CDR_CFG1(32'h60000100),
    .CH1_RX_CDR_CFG2(32'h08004A69),
    .CH1_RX_CDR_CFG3(32'h000B5CF6),
    .CH1_RX_CDR_CFG4(32'h243C3000),
    .CH1_RX_CRC_CFG0(32'h00007880),
    .CH1_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH1_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH1_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH1_RX_CTLE_CFG0(32'h01DC0100),
    .CH1_RX_CTLE_CFG1(32'h40000000),
    .CH1_RX_DACI2V_CFG0(32'h04008ECA),
    .CH1_RX_DATA_RATE(8.000000),
    .CH1_RX_DFE_CFG0(32'hD0025408),
    .CH1_RX_ELASTIC_BUF_CFG0(32'h807C5840),
    .CH1_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH1_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH1_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH1_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH1_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH1_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH1_RX_MISC_CFG0(32'h50000000),
    .CH1_RX_OOB_CFG0(32'h2454C204),
    .CH1_RX_OOB_CFG1(32'h010241C4),
    .CH1_RX_PAD_CFG0(32'h00000000),
    .CH1_RX_PAD_CFG1(32'h1044497A),
    .CH1_RX_PCS_CFG0(32'h2835F130),
    .CH1_RX_PCS_CFG1(32'h6C040BFF),
    .CH1_RX_PCS_CFG2(32'h400000E1),
    .CH1_RX_PCS_CFG3(32'h1C1D0F0F),
    .CH1_RX_PCS_CFG4(32'h4280A002),
    .CH1_RX_PHALIGN_CFG0(32'h00000003),
    .CH1_RX_PHALIGN_CFG1(32'h00838000),
    .CH1_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH1_RX_PHALIGN_CFG3(32'h00038000),
    .CH1_RX_PHALIGN_CFG4(32'h0000020A),
    .CH1_RX_PHALIGN_CFG5(32'h03020000),
    .CH1_SIM_MODE("FAST"),
    .CH1_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH1_SIM_RESET_SPEEDUP("TRUE"),
    .CH1_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH1_TXOUTCLK_FREQ(390.625000),
    .CH1_TXOUTCLK_REF_FREQ(100.000000),
    .CH1_TXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH1_TX_10G_CFG0(32'h00000000),
    .CH1_TX_10G_CFG1(32'h40000000),
    .CH1_TX_10G_CFG2(32'h00000000),
    .CH1_TX_10G_CFG3(32'h00000000),
    .CH1_TX_ANA_CFG0(32'h000000D0),
    .CH1_TX_CRC_CFG0(32'h00007800),
    .CH1_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH1_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH1_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH1_TX_DATA_RATE(8.000000),
    .CH1_TX_DRV_CFG0(32'h00400000),
    .CH1_TX_DRV_CFG1(32'h00001800),
    .CH1_TX_PCS_CFG0(32'h82600121),
    .CH1_TX_PCS_CFG1(32'h2835557C),
    .CH1_TX_PCS_CFG2(32'h1555F2AA),
    .CH1_TX_PCS_CFG3(32'h001AAA83),
    .CH1_TX_PHALIGN_CFG0(32'h00000000),
    .CH1_TX_PHALIGN_CFG1(32'h00047000),
    .CH1_TX_PHALIGN_CFG2(32'h00038038),
    .CH1_TX_PHALIGN_CFG3(32'h00000000),
    .CH1_TX_PHALIGN_CFG4(32'h180000E0),
    .CH1_TX_PHALIGN_CFG5(32'h00000080),
    .CH1_TX_PIPPM_CFG(32'h02000000),
    .CH1_TX_SER_CFG0(32'h00000000),
    .CH2_ADAPT_APT_CFG(32'h00000000),
    .CH2_ADAPT_CAL_CFG(32'h81EE6400),
    .CH2_ADAPT_DFE_CFG(32'h00000040),
    .CH2_ADAPT_GC_CFG0(32'h00901070),
    .CH2_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH2_ADAPT_GC_CFG2(32'h002000E8),
    .CH2_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH2_ADAPT_GEN_CFG0(32'h00120000),
    .CH2_ADAPT_GEN_CFG1(32'h00000000),
    .CH2_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH2_ADAPT_GEN_CFG3(32'h10000000),
    .CH2_ADAPT_H01_CFG(32'h012002A0),
    .CH2_ADAPT_H23_CFG(32'h01A001A0),
    .CH2_ADAPT_H45_CFG(32'h01A001A0),
    .CH2_ADAPT_H67_CFG(32'h01A001A0),
    .CH2_ADAPT_H89_CFG(32'h01A001A0),
    .CH2_ADAPT_HAB_CFG(32'h01A001A0),
    .CH2_ADAPT_HCD_CFG(32'h01A001A0),
    .CH2_ADAPT_HEF_CFG(32'h01A003A0),
    .CH2_ADAPT_KH_CFG0(32'h2008793F),
    .CH2_ADAPT_KH_CFG1(32'h00000000),
    .CH2_ADAPT_KH_CFG2(32'h000043A0),
    .CH2_ADAPT_KH_CFG3(32'h00000000),
    .CH2_ADAPT_KH_CFG4(32'h00007BA0),
    .CH2_ADAPT_KH_CFG5(32'h00000000),
    .CH2_ADAPT_KL_CFG0(32'h000080A0),
    .CH2_ADAPT_KL_CFG1(32'h000043A0),
    .CH2_ADAPT_LCK_CFG0(32'h00004000),
    .CH2_ADAPT_LCK_CFG1(32'h00004000),
    .CH2_ADAPT_LCK_CFG2(32'h00000000),
    .CH2_ADAPT_LCK_CFG3(32'h00000000),
    .CH2_ADAPT_LOP_CFG(32'hEE000660),
    .CH2_ADAPT_OS_CFG(32'h80000120),
    .CH2_CHCLK_ILO_CFG(32'h00640033),
    .CH2_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH2_CHCLK_RSV_CFG(32'h00000000),
    .CH2_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH2_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH2_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH2_CHCLK_RXPI_CFG(32'h0050082C),
    .CH2_CHCLK_TXCAL_CFG(32'h00400020),
    .CH2_CHCLK_TXPI_CFG0(32'h0047082F),
    .CH2_CHL_RSV_CFG0(32'hC6800009),
    .CH2_CHL_RSV_CFG1(32'h00000618),
    .CH2_CHL_RSV_CFG2(32'h005F0590),
    .CH2_CHL_RSV_CFG3(32'h00000000),
    .CH2_CHL_RSV_CFG4(32'h00000000),
    .CH2_DA_CFG(32'h000A000A),
    .CH2_EYESCAN_CFG0(32'h00000800),
    .CH2_EYESCAN_CFG1(32'h00000000),
    .CH2_EYESCAN_CFG10(32'h00000000),
    .CH2_EYESCAN_CFG11(32'h00000000),
    .CH2_EYESCAN_CFG12(32'h00000000),
    .CH2_EYESCAN_CFG13(32'h00000000),
    .CH2_EYESCAN_CFG14(32'h00000000),
    .CH2_EYESCAN_CFG15(32'h00000000),
    .CH2_EYESCAN_CFG16(32'h00000000),
    .CH2_EYESCAN_CFG2(32'h00000000),
    .CH2_EYESCAN_CFG3(32'h00000000),
    .CH2_EYESCAN_CFG4(32'h00000000),
    .CH2_EYESCAN_CFG5(32'h00000000),
    .CH2_EYESCAN_CFG6(32'h00000000),
    .CH2_EYESCAN_CFG7(32'h00000000),
    .CH2_EYESCAN_CFG8(32'h00000000),
    .CH2_EYESCAN_CFG9(32'h00000000),
    .CH2_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH2_FABRIC_INTF_CFG1(32'h00030400),
    .CH2_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH2_FABRIC_INTF_CFG3(32'h000C0000),
    .CH2_FABRIC_INTF_CFG4(32'h00005000),
    .CH2_FABRIC_INTF_CFG5(32'h00006402),
    .CH2_INSTANTIATED(1'b0),
    .CH2_MONITOR_CFG(32'h00000000),
    .CH2_PIPE_CTRL_CFG0(32'h00040060),
    .CH2_PIPE_CTRL_CFG1(32'h00200293),
    .CH2_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH2_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH2_PIPE_CTRL_CFG3(32'h0018012F),
    .CH2_PIPE_CTRL_CFG4(32'h40440000),
    .CH2_PIPE_CTRL_CFG5(32'hA0000000),
    .CH2_PIPE_CTRL_CFG6(32'h3C100064),
    .CH2_PIPE_CTRL_CFG7(32'h0400A00A),
    .CH2_PIPE_CTRL_CFG8(32'h02000000),
    .CH2_PIPE_CTRL_CFG9(32'h00000000),
    .CH2_PIPE_TX_EQ_CFG0(32'h0A756BDF),
    .CH2_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH2_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH2_PIPE_TX_EQ_CFG3(32'h00060192),
    .CH2_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH2_RESET_CFG(32'h08100025),
    .CH2_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH2_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH2_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH2_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH2_RESET_TIME_CFG0(32'h02108401),
    .CH2_RESET_TIME_CFG1(32'h02108421),
    .CH2_RESET_TIME_CFG2(32'h02108421),
    .CH2_RESET_TIME_CFG3(32'h85082421),
    .CH2_RXOUTCLK_FREQ(390.625000),
    .CH2_RXOUTCLK_REF_FREQ(125.000000),
    .CH2_RXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH2_RX_CDR_CFG0(32'hB4000042),
    .CH2_RX_CDR_CFG1(32'h60000100),
    .CH2_RX_CDR_CFG2(32'h08004A69),
    .CH2_RX_CDR_CFG3(32'h000B5CF6),
    .CH2_RX_CDR_CFG4(32'h243C3000),
    .CH2_RX_CRC_CFG0(32'h00007880),
    .CH2_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH2_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH2_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH2_RX_CTLE_CFG0(32'h01DC0100),
    .CH2_RX_CTLE_CFG1(32'h40000000),
    .CH2_RX_DACI2V_CFG0(32'h04008ECA),
    .CH2_RX_DATA_RATE(8.000000),
    .CH2_RX_DFE_CFG0(32'hD0025408),
    .CH2_RX_ELASTIC_BUF_CFG0(32'h807C5840),
    .CH2_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH2_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH2_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH2_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH2_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH2_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH2_RX_MISC_CFG0(32'h50000000),
    .CH2_RX_OOB_CFG0(32'h2454C204),
    .CH2_RX_OOB_CFG1(32'h010241C4),
    .CH2_RX_PAD_CFG0(32'h00000000),
    .CH2_RX_PAD_CFG1(32'h1044497A),
    .CH2_RX_PCS_CFG0(32'h2835F130),
    .CH2_RX_PCS_CFG1(32'h6C040BFF),
    .CH2_RX_PCS_CFG2(32'h400000E1),
    .CH2_RX_PCS_CFG3(32'h1C1D0F0F),
    .CH2_RX_PCS_CFG4(32'h4280A002),
    .CH2_RX_PHALIGN_CFG0(32'h00000003),
    .CH2_RX_PHALIGN_CFG1(32'h00838000),
    .CH2_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH2_RX_PHALIGN_CFG3(32'h00038000),
    .CH2_RX_PHALIGN_CFG4(32'h0000020A),
    .CH2_RX_PHALIGN_CFG5(32'h03020000),
    .CH2_SIM_MODE("FAST"),
    .CH2_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH2_SIM_RESET_SPEEDUP("TRUE"),
    .CH2_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH2_TXOUTCLK_FREQ(390.625000),
    .CH2_TXOUTCLK_REF_FREQ(125.000000),
    .CH2_TXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH2_TX_10G_CFG0(32'h00000000),
    .CH2_TX_10G_CFG1(32'h40000000),
    .CH2_TX_10G_CFG2(32'h00000000),
    .CH2_TX_10G_CFG3(32'h00000000),
    .CH2_TX_ANA_CFG0(32'h000000D0),
    .CH2_TX_CRC_CFG0(32'h00007800),
    .CH2_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH2_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH2_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH2_TX_DATA_RATE(8.000000),
    .CH2_TX_DRV_CFG0(32'h00400000),
    .CH2_TX_DRV_CFG1(32'h00001800),
    .CH2_TX_PCS_CFG0(32'h82600121),
    .CH2_TX_PCS_CFG1(32'h2835557C),
    .CH2_TX_PCS_CFG2(32'h1555F2AA),
    .CH2_TX_PCS_CFG3(32'h001AAA83),
    .CH2_TX_PHALIGN_CFG0(32'h00000000),
    .CH2_TX_PHALIGN_CFG1(32'h00047000),
    .CH2_TX_PHALIGN_CFG2(32'h00038038),
    .CH2_TX_PHALIGN_CFG3(32'h00000000),
    .CH2_TX_PHALIGN_CFG4(32'h180000E0),
    .CH2_TX_PHALIGN_CFG5(32'h00000080),
    .CH2_TX_PIPPM_CFG(32'h02000000),
    .CH2_TX_SER_CFG0(32'h00000000),
    .CH3_ADAPT_APT_CFG(32'h00000000),
    .CH3_ADAPT_CAL_CFG(32'h81EE6400),
    .CH3_ADAPT_DFE_CFG(32'h00000040),
    .CH3_ADAPT_GC_CFG0(32'h00901070),
    .CH3_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH3_ADAPT_GC_CFG2(32'h002000E8),
    .CH3_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH3_ADAPT_GEN_CFG0(32'h00120000),
    .CH3_ADAPT_GEN_CFG1(32'h00000000),
    .CH3_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH3_ADAPT_GEN_CFG3(32'h10000000),
    .CH3_ADAPT_H01_CFG(32'h012002A0),
    .CH3_ADAPT_H23_CFG(32'h01A001A0),
    .CH3_ADAPT_H45_CFG(32'h01A001A0),
    .CH3_ADAPT_H67_CFG(32'h01A001A0),
    .CH3_ADAPT_H89_CFG(32'h01A001A0),
    .CH3_ADAPT_HAB_CFG(32'h01A001A0),
    .CH3_ADAPT_HCD_CFG(32'h01A001A0),
    .CH3_ADAPT_HEF_CFG(32'h01A003A0),
    .CH3_ADAPT_KH_CFG0(32'h2008793F),
    .CH3_ADAPT_KH_CFG1(32'h00000000),
    .CH3_ADAPT_KH_CFG2(32'h000043A0),
    .CH3_ADAPT_KH_CFG3(32'h00000000),
    .CH3_ADAPT_KH_CFG4(32'h00007BA0),
    .CH3_ADAPT_KH_CFG5(32'h00000000),
    .CH3_ADAPT_KL_CFG0(32'h000080A0),
    .CH3_ADAPT_KL_CFG1(32'h000043A0),
    .CH3_ADAPT_LCK_CFG0(32'h00004000),
    .CH3_ADAPT_LCK_CFG1(32'h00004000),
    .CH3_ADAPT_LCK_CFG2(32'h00000000),
    .CH3_ADAPT_LCK_CFG3(32'h00000000),
    .CH3_ADAPT_LOP_CFG(32'hEE000660),
    .CH3_ADAPT_OS_CFG(32'h80000120),
    .CH3_CHCLK_ILO_CFG(32'h00640033),
    .CH3_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH3_CHCLK_RSV_CFG(32'h00000000),
    .CH3_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH3_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH3_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH3_CHCLK_RXPI_CFG(32'h0050082C),
    .CH3_CHCLK_TXCAL_CFG(32'h00400020),
    .CH3_CHCLK_TXPI_CFG0(32'h0047082F),
    .CH3_CHL_RSV_CFG0(32'hC6800009),
    .CH3_CHL_RSV_CFG1(32'h00000618),
    .CH3_CHL_RSV_CFG2(32'h005F0590),
    .CH3_CHL_RSV_CFG3(32'h00000000),
    .CH3_CHL_RSV_CFG4(32'h00000000),
    .CH3_DA_CFG(32'h000A000A),
    .CH3_EYESCAN_CFG0(32'h00000800),
    .CH3_EYESCAN_CFG1(32'h00000000),
    .CH3_EYESCAN_CFG10(32'h00000000),
    .CH3_EYESCAN_CFG11(32'h00000000),
    .CH3_EYESCAN_CFG12(32'h00000000),
    .CH3_EYESCAN_CFG13(32'h00000000),
    .CH3_EYESCAN_CFG14(32'h00000000),
    .CH3_EYESCAN_CFG15(32'h00000000),
    .CH3_EYESCAN_CFG16(32'h00000000),
    .CH3_EYESCAN_CFG2(32'h00000000),
    .CH3_EYESCAN_CFG3(32'h00000000),
    .CH3_EYESCAN_CFG4(32'h00000000),
    .CH3_EYESCAN_CFG5(32'h00000000),
    .CH3_EYESCAN_CFG6(32'h00000000),
    .CH3_EYESCAN_CFG7(32'h00000000),
    .CH3_EYESCAN_CFG8(32'h00000000),
    .CH3_EYESCAN_CFG9(32'h00000000),
    .CH3_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH3_FABRIC_INTF_CFG1(32'h00030400),
    .CH3_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH3_FABRIC_INTF_CFG3(32'h000C0000),
    .CH3_FABRIC_INTF_CFG4(32'h00005000),
    .CH3_FABRIC_INTF_CFG5(32'h00006402),
    .CH3_INSTANTIATED(1'b0),
    .CH3_MONITOR_CFG(32'h00000000),
    .CH3_PIPE_CTRL_CFG0(32'h00040060),
    .CH3_PIPE_CTRL_CFG1(32'h00200293),
    .CH3_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH3_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH3_PIPE_CTRL_CFG3(32'h0018012F),
    .CH3_PIPE_CTRL_CFG4(32'h40440000),
    .CH3_PIPE_CTRL_CFG5(32'hA0000000),
    .CH3_PIPE_CTRL_CFG6(32'h3C100064),
    .CH3_PIPE_CTRL_CFG7(32'h0400A00A),
    .CH3_PIPE_CTRL_CFG8(32'h02000000),
    .CH3_PIPE_CTRL_CFG9(32'h00000000),
    .CH3_PIPE_TX_EQ_CFG0(32'h0A756BDF),
    .CH3_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH3_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH3_PIPE_TX_EQ_CFG3(32'h00060192),
    .CH3_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH3_RESET_CFG(32'h08100025),
    .CH3_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH3_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH3_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH3_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH3_RESET_TIME_CFG0(32'h02108401),
    .CH3_RESET_TIME_CFG1(32'h02108421),
    .CH3_RESET_TIME_CFG2(32'h02108421),
    .CH3_RESET_TIME_CFG3(32'h85082421),
    .CH3_RXOUTCLK_FREQ(390.625000),
    .CH3_RXOUTCLK_REF_FREQ(125.000000),
    .CH3_RXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH3_RX_CDR_CFG0(32'hB4000042),
    .CH3_RX_CDR_CFG1(32'h60000100),
    .CH3_RX_CDR_CFG2(32'h08004A69),
    .CH3_RX_CDR_CFG3(32'h000B5CF6),
    .CH3_RX_CDR_CFG4(32'h243C3000),
    .CH3_RX_CRC_CFG0(32'h00007880),
    .CH3_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH3_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH3_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH3_RX_CTLE_CFG0(32'h01DC0100),
    .CH3_RX_CTLE_CFG1(32'h40000000),
    .CH3_RX_DACI2V_CFG0(32'h04008ECA),
    .CH3_RX_DATA_RATE(8.000000),
    .CH3_RX_DFE_CFG0(32'hD0025408),
    .CH3_RX_ELASTIC_BUF_CFG0(32'h807C5840),
    .CH3_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH3_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH3_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH3_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH3_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH3_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH3_RX_MISC_CFG0(32'h50000000),
    .CH3_RX_OOB_CFG0(32'h2454C204),
    .CH3_RX_OOB_CFG1(32'h010241C4),
    .CH3_RX_PAD_CFG0(32'h00000000),
    .CH3_RX_PAD_CFG1(32'h1044497A),
    .CH3_RX_PCS_CFG0(32'h2835F130),
    .CH3_RX_PCS_CFG1(32'h6C040BFF),
    .CH3_RX_PCS_CFG2(32'h400000E1),
    .CH3_RX_PCS_CFG3(32'h1C1D0F0F),
    .CH3_RX_PCS_CFG4(32'h4280A002),
    .CH3_RX_PHALIGN_CFG0(32'h00000003),
    .CH3_RX_PHALIGN_CFG1(32'h00838000),
    .CH3_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH3_RX_PHALIGN_CFG3(32'h00038000),
    .CH3_RX_PHALIGN_CFG4(32'h0000020A),
    .CH3_RX_PHALIGN_CFG5(32'h03020000),
    .CH3_SIM_MODE("FAST"),
    .CH3_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH3_SIM_RESET_SPEEDUP("TRUE"),
    .CH3_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH3_TXOUTCLK_FREQ(390.625000),
    .CH3_TXOUTCLK_REF_FREQ(125.000000),
    .CH3_TXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH3_TX_10G_CFG0(32'h00000000),
    .CH3_TX_10G_CFG1(32'h40000000),
    .CH3_TX_10G_CFG2(32'h00000000),
    .CH3_TX_10G_CFG3(32'h00000000),
    .CH3_TX_ANA_CFG0(32'h000000D0),
    .CH3_TX_CRC_CFG0(32'h00007800),
    .CH3_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH3_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH3_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH3_TX_DATA_RATE(8.000000),
    .CH3_TX_DRV_CFG0(32'h00400000),
    .CH3_TX_DRV_CFG1(32'h00001800),
    .CH3_TX_PCS_CFG0(32'h82600121),
    .CH3_TX_PCS_CFG1(32'h2835557C),
    .CH3_TX_PCS_CFG2(32'h1555F2AA),
    .CH3_TX_PCS_CFG3(32'h001AAA83),
    .CH3_TX_PHALIGN_CFG0(32'h00000000),
    .CH3_TX_PHALIGN_CFG1(32'h00047000),
    .CH3_TX_PHALIGN_CFG2(32'h00038038),
    .CH3_TX_PHALIGN_CFG3(32'h00000000),
    .CH3_TX_PHALIGN_CFG4(32'h180000E0),
    .CH3_TX_PHALIGN_CFG5(32'h00000080),
    .CH3_TX_PIPPM_CFG(32'h02000000),
    .CH3_TX_SER_CFG0(32'h00000000),
    .CHANNEL_CONNECTIVITY("NONE"),
    .CTRL_RSV_CFG0(32'h00007818),
    .CTRL_RSV_CFG1(32'h00000000),
    .HS0_LCPLL_IPS_PIN_EN(1'b0),
    .HS0_LCPLL_IPS_REFCLK_SEL(1),
    .HS0_LCPLL_REFCLK_MAP0(3'h0),
    .HS0_LCPLL_REFCLK_MAP1(3'h1),
    .HS0_LCPLL_REFCLK_MAP2(3'h2),
    .HS0_LCPLL_REFCLK_MAP3(3'h3),
    .HS0_LCPLL_REFCLK_MAP4(3'h4),
    .HS0_LCPLL_REFCLK_MAP5(3'h5),
    .HS0_LCPLL_REFCLK_MAP6(3'h6),
    .HS0_LCPLL_REFCLK_MAP7(3'h7),
    .HS0_RPLL_IPS_PIN_EN(1'b0),
    .HS0_RPLL_IPS_REFCLK_SEL(1),
    .HS0_RPLL_REFCLK_MAP0(3'h0),
    .HS0_RPLL_REFCLK_MAP1(3'h1),
    .HS0_RPLL_REFCLK_MAP2(3'h2),
    .HS0_RPLL_REFCLK_MAP3(3'h3),
    .HS0_RPLL_REFCLK_MAP4(3'h4),
    .HS0_RPLL_REFCLK_MAP5(3'h5),
    .HS0_RPLL_REFCLK_MAP6(3'h6),
    .HS0_RPLL_REFCLK_MAP7(3'h7),
    .HS1_LCPLL_IPS_PIN_EN(1'b0),
    .HS1_LCPLL_IPS_REFCLK_SEL(1),
    .HS1_LCPLL_REFCLK_MAP0(3'h0),
    .HS1_LCPLL_REFCLK_MAP1(3'h2),
    .HS1_LCPLL_REFCLK_MAP2(3'h1),
    .HS1_LCPLL_REFCLK_MAP3(3'h3),
    .HS1_LCPLL_REFCLK_MAP4(3'h4),
    .HS1_LCPLL_REFCLK_MAP5(3'h5),
    .HS1_LCPLL_REFCLK_MAP6(3'h6),
    .HS1_LCPLL_REFCLK_MAP7(3'h7),
    .HS1_RPLL_IPS_PIN_EN(1'b0),
    .HS1_RPLL_IPS_REFCLK_SEL(1),
    .HS1_RPLL_REFCLK_MAP0(3'h0),
    .HS1_RPLL_REFCLK_MAP1(3'h2),
    .HS1_RPLL_REFCLK_MAP2(3'h1),
    .HS1_RPLL_REFCLK_MAP3(3'h3),
    .HS1_RPLL_REFCLK_MAP4(3'h4),
    .HS1_RPLL_REFCLK_MAP5(3'h5),
    .HS1_RPLL_REFCLK_MAP6(3'h6),
    .HS1_RPLL_REFCLK_MAP7(3'h7),
    .HSCLK0_HSDIST_CFG(32'h0001001E),
    .HSCLK0_INSTANTIATED(1'b1),
    .HSCLK0_LCPLL_CFG0(32'h00403F04),
    .HSCLK0_LCPLL_CFG1(32'h04184F00),
    .HSCLK0_LCPLL_CFG2(32'h823C0208),
    .HSCLK0_LCPLL_LGC_CFG0(32'hE5D48B10),
    .HSCLK0_LCPLL_LGC_CFG1(32'h94121880),
    .HSCLK0_LCPLL_LGC_CFG2(32'h00110111),
    .HSCLK0_RPLL_CFG0(32'h80007FC4),
    .HSCLK0_RPLL_CFG1(32'h07E23F28),
    .HSCLK0_RPLL_CFG2(32'h00B323C9),
    .HSCLK0_RPLL_LGC_CFG0(32'hE5D48D90),
    .HSCLK0_RPLL_LGC_CFG1(32'h94121880),
    .HSCLK0_RPLL_LGC_CFG2(32'h00110111),
    .HSCLK0_RXRECCLK_SEL(2'h0),
    .HSCLK1_HSDIST_CFG(32'h0000001E),
    .HSCLK1_INSTANTIATED(1'b1),
    .HSCLK1_LCPLL_CFG0(32'h00403F04),
    .HSCLK1_LCPLL_CFG1(32'h04184F00),
    .HSCLK1_LCPLL_CFG2(32'h82430208),
    .HSCLK1_LCPLL_LGC_CFG0(32'hE5D48B10),
    .HSCLK1_LCPLL_LGC_CFG1(32'h94121880),
    .HSCLK1_LCPLL_LGC_CFG2(32'h00110111),
    .HSCLK1_RPLL_CFG0(32'h80007FC4),
    .HSCLK1_RPLL_CFG1(32'h07E23F28),
    .HSCLK1_RPLL_CFG2(32'h00B323C9),
    .HSCLK1_RPLL_LGC_CFG0(32'hE5D48D90),
    .HSCLK1_RPLL_LGC_CFG1(32'h94121880),
    .HSCLK1_RPLL_LGC_CFG2(32'h00110111),
    .HSCLK1_RXRECCLK_SEL(2'h0),
    .MEMORY_INIT_FILE("extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0.mem"),
    .MST_RESET_CFG(32'h1A529401),
    .PIN_CFG0(32'h00884219),
    .POR_CFG(32'h00045B00),
    .QUAD_INSTANTIATED(1'b1),
    .QUAD_SIM_MODE("FAST"),
    .QUAD_SIM_RESET_SPEEDUP("TRUE"),
    .RCALBG0_CFG0(32'h000003D0),
    .RCALBG0_CFG1(32'h00000040),
    .RCALBG0_CFG2(32'h00000000),
    .RCALBG0_CFG3(32'h80000002),
    .RCALBG0_CFG4(32'h00000117),
    .RCALBG0_CFG5(32'h000002B3),
    .RCALBG1_CFG0(32'h000003D0),
    .RCALBG1_CFG1(32'h00000040),
    .RCALBG1_CFG2(32'h00000000),
    .RCALBG1_CFG3(32'h80000002),
    .RCALBG1_CFG4(32'h00000117),
    .RCALBG1_CFG5(32'h000002B3),
    .RXRSTDONE_DIST_SEL(32'h00000000),
    .SIM_VERSION(2),
    .STAT_NPI_REG_LIST("3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A0,31B0:31D8,31E0:31E8,31F0:3228,3230:3264,326C:3274,3280,3294:329C,32A8,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A0,35B0:35D8,35E0:35E8,35F0:3628,3630:3664,366C:3674,3680,3694:369C,36A8,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A0,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A64,3A6C:3A74,3A80,3A94:3A9C,3AA8,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA0,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E64,3E6C:3E74,3E80,3E94:3E9C,3EA8,3EBC:3EE4"),
    .TERMPROG_CFG(32'h00000000),
    .TXRSTDONE_DIST_SEL(32'h00000000),
    .UB_CFG0(32'h73400000)) 
    quad_inst
       (.APB3CLK(apb3clk),
        .APB3PADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .APB3PENABLE(1'b0),
        .APB3PRDATA({quad_inst_n_1243,quad_inst_n_1244,quad_inst_n_1245,quad_inst_n_1246,quad_inst_n_1247,quad_inst_n_1248,quad_inst_n_1249,quad_inst_n_1250,quad_inst_n_1251,quad_inst_n_1252,quad_inst_n_1253,quad_inst_n_1254,quad_inst_n_1255,quad_inst_n_1256,quad_inst_n_1257,quad_inst_n_1258,quad_inst_n_1259,quad_inst_n_1260,quad_inst_n_1261,quad_inst_n_1262,quad_inst_n_1263,quad_inst_n_1264,quad_inst_n_1265,quad_inst_n_1266,quad_inst_n_1267,quad_inst_n_1268,quad_inst_n_1269,quad_inst_n_1270,quad_inst_n_1271,quad_inst_n_1272,quad_inst_n_1273,quad_inst_n_1274}),
        .APB3PREADY(quad_inst_n_0),
        .APB3PRESETN(1'b1),
        .APB3PSEL(1'b0),
        .APB3PSLVERR(quad_inst_n_1),
        .APB3PWDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .APB3PWRITE(1'b0),
        .AXISCLK(apb3clk),
        .BGBYPASSB(1'b0),
        .BGMONITORENB(1'b0),
        .BGPDB(1'b0),
        .BGRCALOVRD({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BGRCALOVRDENB(1'b0),
        .CH0_BUFGTCE(quad_inst_n_2),
        .CH0_BUFGTCEMASK({quad_inst_n_1531,quad_inst_n_1532,quad_inst_n_1533,quad_inst_n_1534}),
        .CH0_BUFGTDIV({quad_inst_n_329,quad_inst_n_330,quad_inst_n_331,quad_inst_n_332,quad_inst_n_333,quad_inst_n_334,quad_inst_n_335,quad_inst_n_336,quad_inst_n_337,quad_inst_n_338,quad_inst_n_339,quad_inst_n_340}),
        .CH0_BUFGTRST(quad_inst_n_3),
        .CH0_BUFGTRSTMASK({quad_inst_n_1535,quad_inst_n_1536,quad_inst_n_1537,quad_inst_n_1538}),
        .CH0_CDRBMCDRREQ(ch0_cdrbmcdrreq),
        .CH0_CDRFREQOS(ch0_cdrfreqos),
        .CH0_CDRINCPCTRL(ch0_cdrincpctrl),
        .CH0_CDRSTEPDIR(ch0_cdrstepdir),
        .CH0_CDRSTEPSQ(ch0_cdrstepsq),
        .CH0_CDRSTEPSX(ch0_cdrstepsx),
        .CH0_CLKRSVD0(1'b0),
        .CH0_CLKRSVD1(1'b0),
        .CH0_DFEHOLD(ch0_dfehold),
        .CH0_DFEOVRD(ch0_dfeovrd),
        .CH0_DMONFIFORESET(1'b0),
        .CH0_DMONITORCLK(1'b0),
        .CH0_DMONITOROUT({quad_inst_n_1275,quad_inst_n_1276,quad_inst_n_1277,quad_inst_n_1278,quad_inst_n_1279,quad_inst_n_1280,quad_inst_n_1281,quad_inst_n_1282,quad_inst_n_1283,quad_inst_n_1284,quad_inst_n_1285,quad_inst_n_1286,quad_inst_n_1287,quad_inst_n_1288,quad_inst_n_1289,quad_inst_n_1290,quad_inst_n_1291,quad_inst_n_1292,quad_inst_n_1293,quad_inst_n_1294,quad_inst_n_1295,quad_inst_n_1296,quad_inst_n_1297,quad_inst_n_1298,quad_inst_n_1299,quad_inst_n_1300,quad_inst_n_1301,quad_inst_n_1302,quad_inst_n_1303,quad_inst_n_1304,quad_inst_n_1305,quad_inst_n_1306}),
        .CH0_DMONITOROUTCLK(quad_inst_n_4),
        .CH0_EYESCANDATAERROR(ch0_eyescandataerror),
        .CH0_EYESCANRESET(ch0_eyescanreset),
        .CH0_EYESCANTRIGGER(ch0_eyescantrigger),
        .CH0_GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH0_GTRXRESET(ch0_gtrxreset),
        .CH0_GTTXRESET(ch0_gttxreset),
        .CH0_GTYPRXN(rxn[0]),
        .CH0_GTYPRXP(rxp[0]),
        .CH0_GTYPTXN(txn[0]),
        .CH0_GTYPTXP(txp[0]),
        .CH0_HSDPPCSRESET(1'b0),
        .CH0_ILORESET(1'b0),
        .CH0_ILORESETDONE(quad_inst_n_8),
        .CH0_ILORESETMASK(1'b1),
        .CH0_LOOPBACK(ch0_loopback),
        .CH0_PCIERSTB(1'b1),
        .CH0_PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH0_PCSRSVDOUT({quad_inst_n_889,quad_inst_n_890,quad_inst_n_891,quad_inst_n_892,ch0_pcsrsvdout_int,quad_inst_n_895,quad_inst_n_896,quad_inst_n_897,quad_inst_n_898,quad_inst_n_899,quad_inst_n_900,quad_inst_n_901,quad_inst_n_902,quad_inst_n_903,quad_inst_n_904}),
        .CH0_PHYESMADAPTSAVE(1'b0),
        .CH0_PHYREADY(quad_inst_n_9),
        .CH0_PHYSTATUS(quad_inst_n_10),
        .CH0_PINRSVDAS({quad_inst_n_905,quad_inst_n_906,quad_inst_n_907,quad_inst_n_908,quad_inst_n_909,quad_inst_n_910,quad_inst_n_911,quad_inst_n_912,quad_inst_n_913,quad_inst_n_914,quad_inst_n_915,quad_inst_n_916,quad_inst_n_917,quad_inst_n_918,quad_inst_n_919,quad_inst_n_920}),
        .CH0_REFDEBUGOUT(ch0_refdebugout),
        .CH0_RESETEXCEPTION(quad_inst_n_11),
        .CH0_RX10GSTAT(ch0_rx10gstat),
        .CH0_RXBUFSTATUS(ch0_rxbufstatus),
        .CH0_RXBYTEISALIGNED(ch0_rxbyteisaligned),
        .CH0_RXBYTEREALIGN(ch0_rxbyterealign),
        .CH0_RXCDRHOLD(ch0_rxcdrhold),
        .CH0_RXCDRLOCK(ch0_rxcdrlock),
        .CH0_RXCDROVRDEN(ch0_rxcdrovrden),
        .CH0_RXCDRPHDONE(ch0_rxcdrphdone),
        .CH0_RXCDRRESET(ch0_rxcdrreset),
        .CH0_RXCHANBONDSEQ(ch0_rxchanbondseq),
        .CH0_RXCHANISALIGNED(ch0_rxchanisaligned),
        .CH0_RXCHANREALIGN(ch0_rxchanrealign),
        .CH0_RXCHBONDI(ch0_rxchbondi),
        .CH0_RXCHBONDO(ch0_rxchbondo),
        .CH0_RXCLKCORCNT(ch0_rxclkcorcnt),
        .CH0_RXCOMINITDET(ch0_rxcominitdet),
        .CH0_RXCOMMADET(ch0_rxcommadet),
        .CH0_RXCOMSASDET(ch0_rxcomsasdet),
        .CH0_RXCOMWAKEDET(ch0_rxcomwakedet),
        .CH0_RXCTRL0(ch0_rxctrl0),
        .CH0_RXCTRL1(ch0_rxctrl1),
        .CH0_RXCTRL2(ch0_rxctrl2),
        .CH0_RXCTRL3(ch0_rxctrl3),
        .CH0_RXDAPICODEOVRDEN(ch0_rxdapicodeovrden),
        .CH0_RXDAPICODERESET(ch0_rxdapicodereset),
        .CH0_RXDAPIRESET(ch0_rxdapireset),
        .CH0_RXDAPIRESETDONE(ch0_rxdapiresetdone),
        .CH0_RXDAPIRESETMASK(ch0_rxdapiresetmask),
        .CH0_RXDATA(ch0_rxdata),
        .CH0_RXDATAVALID(ch0_rxdatavalid),
        .CH0_RXDEBUGPCSOUT(ch0_rxdebugpcsout),
        .CH0_RXDLYALIGNERR(ch0_rxdlyalignerr),
        .CH0_RXDLYALIGNPROG(ch0_rxdlyalignprog),
        .CH0_RXDLYALIGNREQ(ch0_rxdlyalignreq),
        .CH0_RXELECIDLE(ch0_rxelecidle),
        .CH0_RXEQTRAINING(ch0_rxeqtraining),
        .CH0_RXFINEALIGNDONE(ch0_rxfinealigndone),
        .CH0_RXGEARBOXSLIP(ch0_rxgearboxslip),
        .CH0_RXHEADER(ch0_rxheader),
        .CH0_RXHEADERVALID(ch0_rxheadervalid),
        .CH0_RXLATCLK(ch0_rxlatclk),
        .CH0_RXLPMEN(ch0_rxlpmen),
        .CH0_RXMLDCHAINDONE(ch0_rxmldchaindone),
        .CH0_RXMLDCHAINREQ(ch0_rxmldchainreq),
        .CH0_RXMLFINEALIGNREQ(ch0_rxmlfinealignreq),
        .CH0_RXOOBRESET(ch0_rxoobreset),
        .CH0_RXOSINTDONE(ch0_rxosintdone),
        .CH0_RXOUTCLK(ch0_rxoutclk),
        .CH0_RXPCSRESETMASK(ch0_rxpcsresetmask),
        .CH0_RXPD(ch0_rxpd),
        .CH0_RXPHALIGNDONE(ch0_rxphaligndone),
        .CH0_RXPHALIGNERR(ch0_rxphalignerr),
        .CH0_RXPHALIGNREQ(ch0_rxphalignreq),
        .CH0_RXPHALIGNRESETMASK(ch0_rxphalignresetmask),
        .CH0_RXPHDLYPD(ch0_rxphdlypd),
        .CH0_RXPHDLYRESET(ch0_rxphdlyreset),
        .CH0_RXPHDLYRESETDONE(ch0_rxphdlyresetdone),
        .CH0_RXPHSETINITDONE(ch0_rxphsetinitdone),
        .CH0_RXPHSETINITREQ(ch0_rxphsetinitreq),
        .CH0_RXPHSHIFT180(ch0_rxphshift180),
        .CH0_RXPHSHIFT180DONE(ch0_rxphshift180done),
        .CH0_RXPKDET(ch0_rxpkdet),
        .CH0_RXPMARESETDONE(ch0_rxpmaresetdone_int),
        .CH0_RXPMARESETMASK(ch0_rxpmaresetmask),
        .CH0_RXPOLARITY(ch0_rxpolarity),
        .CH0_RXPRBSCNTRESET(ch0_rxprbscntreset),
        .CH0_RXPRBSERR(ch0_rxprbserr),
        .CH0_RXPRBSLOCKED(ch0_rxprbslocked),
        .CH0_RXPRBSSEL(ch0_rxprbssel),
        .CH0_RXPROGDIVRESET(ch0_rxprogdivreset),
        .CH0_RXPROGDIVRESETDONE(ch0_rxprogdivresetdone),
        .CH0_RXQPIEN(ch0_rxqpien),
        .CH0_RXQPISENN(ch0_rxqpisenn),
        .CH0_RXQPISENP(ch0_rxqpisenp),
        .CH0_RXRATE(ch0_rxrate),
        .CH0_RXRESETDONE(ch0_rxresetdone_int),
        .CH0_RXRESETMODE(ch0_rxresetmode),
        .CH0_RXSIMPLEXPHYSTATUS(ch0_rxsimplexphystatus),
        .CH0_RXSLIDE(ch0_rxslide),
        .CH0_RXSLIDERDY(ch0_rxsliderdy),
        .CH0_RXSLIPDONE(ch0_rxslipdone),
        .CH0_RXSTARTOFSEQ(ch0_rxstartofseq),
        .CH0_RXSTATUS(ch0_rxstatus),
        .CH0_RXSYNCALLIN(ch0_rxsyncallin),
        .CH0_RXSYNCDONE(ch0_rxsyncdone),
        .CH0_RXTERMINATION(ch0_rxtermination),
        .CH0_RXUSERRDY(ch0_rxuserrdy),
        .CH0_RXUSRCLK(ch0_rxusrclk),
        .CH0_RXVALID(ch0_rxvalid),
        .CH0_TSTCLK0(apb3clk),
        .CH0_TSTCLK1(apb3clk),
        .CH0_TX10GSTAT(ch0_tx10gstat),
        .CH0_TXBUFSTATUS(ch0_txbufstatus),
        .CH0_TXCOMFINISH(ch0_txcomfinish),
        .CH0_TXCOMINIT(ch0_txcominit),
        .CH0_TXCOMSAS(ch0_txcomsas),
        .CH0_TXCOMWAKE(ch0_txcomwake),
        .CH0_TXCTRL0(ch0_txctrl0),
        .CH0_TXCTRL1(ch0_txctrl1),
        .CH0_TXCTRL2(ch0_txctrl2),
        .CH0_TXDAPICODEOVRDEN(ch0_txdapicodeovrden),
        .CH0_TXDAPICODERESET(ch0_txdapicodereset),
        .CH0_TXDAPIRESET(ch0_txdapireset),
        .CH0_TXDAPIRESETDONE(ch0_txdapiresetdone),
        .CH0_TXDAPIRESETMASK(ch0_txdapiresetmask),
        .CH0_TXDATA(ch0_txdata),
        .CH0_TXDCCDONE(ch0_txdccdone),
        .CH0_TXDEBUGPCSOUT(ch0_txdebugpcsout),
        .CH0_TXDEEMPH(ch0_txdeemph),
        .CH0_TXDETECTRX(ch0_txdetectrx),
        .CH0_TXDIFFCTRL(ch0_txdiffctrl),
        .CH0_TXDLYALIGNERR(ch0_txdlyalignerr),
        .CH0_TXDLYALIGNPROG(ch0_txdlyalignprog),
        .CH0_TXDLYALIGNREQ(ch0_txdlyalignreq),
        .CH0_TXELECIDLE(ch0_txelecidle),
        .CH0_TXHEADER(ch0_txheader),
        .CH0_TXINHIBIT(ch0_txinhibit),
        .CH0_TXLATCLK(ch0_txlatclk),
        .CH0_TXMAINCURSOR(ch0_txmaincursor),
        .CH0_TXMARGIN(ch0_txmargin),
        .CH0_TXMLDCHAINDONE(ch0_txmldchaindone),
        .CH0_TXMLDCHAINREQ(ch0_txmldchainreq),
        .CH0_TXONESZEROS(ch0_txoneszeros),
        .CH0_TXOUTCLK(ch0_txoutclk),
        .CH0_TXPAUSEDELAYALIGN(ch0_txpausedelayalign),
        .CH0_TXPCSRESETMASK(ch0_txpcsresetmask),
        .CH0_TXPD(ch0_txpd),
        .CH0_TXPHALIGNDONE(ch0_txphaligndone),
        .CH0_TXPHALIGNERR(ch0_txphalignerr),
        .CH0_TXPHALIGNOUTRSVD(ch0_txphalignoutrsvd),
        .CH0_TXPHALIGNREQ(ch0_txphalignreq),
        .CH0_TXPHALIGNRESETMASK(ch0_txphalignresetmask),
        .CH0_TXPHDLYPD(ch0_txphdlypd),
        .CH0_TXPHDLYRESET(ch0_txphdlyreset),
        .CH0_TXPHDLYRESETDONE(ch0_txphdlyresetdone),
        .CH0_TXPHDLYTSTCLK(ch0_txphdlytstclk),
        .CH0_TXPHSETINITDONE(ch0_txphsetinitdone),
        .CH0_TXPHSETINITREQ(ch0_txphsetinitreq),
        .CH0_TXPHSHIFT180(ch0_txphshift180),
        .CH0_TXPHSHIFT180DONE(ch0_txphshift180done),
        .CH0_TXPICODEOVRDEN(ch0_txpicodeovrden),
        .CH0_TXPICODERESET(ch0_txpicodereset),
        .CH0_TXPIPPMEN(ch0_txpippmen),
        .CH0_TXPIPPMSTEPSIZE(ch0_txpippmstepsize),
        .CH0_TXPISOPD(ch0_txpisopd),
        .CH0_TXPMARESETDONE(ch0_txpmaresetdone_int),
        .CH0_TXPMARESETMASK(ch0_txpmaresetmask),
        .CH0_TXPOLARITY(ch0_txpolarity),
        .CH0_TXPOSTCURSOR(ch0_txpostcursor),
        .CH0_TXPRBSFORCEERR(ch0_txprbsforceerr),
        .CH0_TXPRBSSEL(ch0_txprbssel),
        .CH0_TXPRECURSOR(ch0_txprecursor),
        .CH0_TXPROGDIVRESET(ch0_txprogdivreset),
        .CH0_TXPROGDIVRESETDONE(ch0_txprogdivresetdone),
        .CH0_TXQPIBIASEN(ch0_txqpibiasen),
        .CH0_TXQPISENN(ch0_txqpisenn),
        .CH0_TXQPISENP(ch0_txqpisenp),
        .CH0_TXQPIWEAKPU(ch0_txqpiweakpu),
        .CH0_TXRATE(ch0_txrate),
        .CH0_TXRESETDONE(ch0_txresetdone_int),
        .CH0_TXRESETMODE(ch0_txresetmode),
        .CH0_TXSEQUENCE(ch0_txsequence),
        .CH0_TXSIMPLEXPHYSTATUS(quad_inst_n_68),
        .CH0_TXSWING(ch0_txswing),
        .CH0_TXSWINGOUTHIGH(ch0_txswingouthigh),
        .CH0_TXSWINGOUTLOW(ch0_txswingoutlow),
        .CH0_TXSYNCALLIN(ch0_txsyncallin),
        .CH0_TXSYNCDONE(ch0_txsyncdone),
        .CH0_TXUSERRDY(ch0_txuserrdy),
        .CH0_TXUSRCLK(ch0_txusrclk),
        .CH0_XPIPE5_PIPELINE_EN(quad_inst_n_72),
        .CH1_BUFGTCE(quad_inst_n_73),
        .CH1_BUFGTCEMASK({quad_inst_n_1539,quad_inst_n_1540,quad_inst_n_1541,quad_inst_n_1542}),
        .CH1_BUFGTDIV({quad_inst_n_341,quad_inst_n_342,quad_inst_n_343,quad_inst_n_344,quad_inst_n_345,quad_inst_n_346,quad_inst_n_347,quad_inst_n_348,quad_inst_n_349,quad_inst_n_350,quad_inst_n_351,quad_inst_n_352}),
        .CH1_BUFGTRST(quad_inst_n_74),
        .CH1_BUFGTRSTMASK({quad_inst_n_1543,quad_inst_n_1544,quad_inst_n_1545,quad_inst_n_1546}),
        .CH1_CDRBMCDRREQ(1'b0),
        .CH1_CDRFREQOS(1'b0),
        .CH1_CDRINCPCTRL(1'b0),
        .CH1_CDRSTEPDIR(1'b0),
        .CH1_CDRSTEPSQ(1'b0),
        .CH1_CDRSTEPSX(1'b0),
        .CH1_CLKRSVD0(1'b0),
        .CH1_CLKRSVD1(1'b0),
        .CH1_DFEHOLD(1'b0),
        .CH1_DFEOVRD(1'b0),
        .CH1_DMONFIFORESET(1'b0),
        .CH1_DMONITORCLK(1'b0),
        .CH1_DMONITOROUT({quad_inst_n_1307,quad_inst_n_1308,quad_inst_n_1309,quad_inst_n_1310,quad_inst_n_1311,quad_inst_n_1312,quad_inst_n_1313,quad_inst_n_1314,quad_inst_n_1315,quad_inst_n_1316,quad_inst_n_1317,quad_inst_n_1318,quad_inst_n_1319,quad_inst_n_1320,quad_inst_n_1321,quad_inst_n_1322,quad_inst_n_1323,quad_inst_n_1324,quad_inst_n_1325,quad_inst_n_1326,quad_inst_n_1327,quad_inst_n_1328,quad_inst_n_1329,quad_inst_n_1330,quad_inst_n_1331,quad_inst_n_1332,quad_inst_n_1333,quad_inst_n_1334,quad_inst_n_1335,quad_inst_n_1336,quad_inst_n_1337,quad_inst_n_1338}),
        .CH1_DMONITOROUTCLK(quad_inst_n_75),
        .CH1_EYESCANDATAERROR(quad_inst_n_76),
        .CH1_EYESCANRESET(1'b0),
        .CH1_EYESCANTRIGGER(1'b0),
        .CH1_GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_GTRXRESET(1'b0),
        .CH1_GTTXRESET(1'b0),
        .CH1_GTYPRXN(rxn[1]),
        .CH1_GTYPRXP(rxp[1]),
        .CH1_GTYPTXN(txn[1]),
        .CH1_GTYPTXP(txp[1]),
        .CH1_HSDPPCSRESET(1'b0),
        .CH1_ILORESET(1'b0),
        .CH1_ILORESETDONE(quad_inst_n_79),
        .CH1_ILORESETMASK(1'b1),
        .CH1_LOOPBACK({1'b0,1'b0,1'b0}),
        .CH1_PCIERSTB(1'b1),
        .CH1_PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_PCSRSVDOUT({quad_inst_n_953,quad_inst_n_954,quad_inst_n_955,quad_inst_n_956,ch1_pcsrsvdout_int,quad_inst_n_959,quad_inst_n_960,quad_inst_n_961,quad_inst_n_962,quad_inst_n_963,quad_inst_n_964,quad_inst_n_965,quad_inst_n_966,quad_inst_n_967,quad_inst_n_968}),
        .CH1_PHYESMADAPTSAVE(1'b0),
        .CH1_PHYREADY(quad_inst_n_80),
        .CH1_PHYSTATUS(quad_inst_n_81),
        .CH1_PINRSVDAS({quad_inst_n_969,quad_inst_n_970,quad_inst_n_971,quad_inst_n_972,quad_inst_n_973,quad_inst_n_974,quad_inst_n_975,quad_inst_n_976,quad_inst_n_977,quad_inst_n_978,quad_inst_n_979,quad_inst_n_980,quad_inst_n_981,quad_inst_n_982,quad_inst_n_983,quad_inst_n_984}),
        .CH1_REFDEBUGOUT({quad_inst_n_1173,quad_inst_n_1174}),
        .CH1_RESETEXCEPTION(quad_inst_n_82),
        .CH1_RX10GSTAT({quad_inst_n_1671,quad_inst_n_1672,quad_inst_n_1673,quad_inst_n_1674,quad_inst_n_1675,quad_inst_n_1676,quad_inst_n_1677,quad_inst_n_1678}),
        .CH1_RXBUFSTATUS({quad_inst_n_1225,quad_inst_n_1226,quad_inst_n_1227}),
        .CH1_RXBYTEISALIGNED(quad_inst_n_83),
        .CH1_RXBYTEREALIGN(quad_inst_n_84),
        .CH1_RXCDRHOLD(1'b0),
        .CH1_RXCDRLOCK(quad_inst_n_85),
        .CH1_RXCDROVRDEN(1'b0),
        .CH1_RXCDRPHDONE(quad_inst_n_86),
        .CH1_RXCDRRESET(1'b0),
        .CH1_RXCHANBONDSEQ(quad_inst_n_87),
        .CH1_RXCHANISALIGNED(quad_inst_n_88),
        .CH1_RXCHANREALIGN(quad_inst_n_89),
        .CH1_RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_RXCHBONDO({quad_inst_n_1596,quad_inst_n_1597,quad_inst_n_1598,quad_inst_n_1599,quad_inst_n_1600}),
        .CH1_RXCLKCORCNT({quad_inst_n_1175,quad_inst_n_1176}),
        .CH1_RXCOMINITDET(quad_inst_n_90),
        .CH1_RXCOMMADET(quad_inst_n_91),
        .CH1_RXCOMSASDET(quad_inst_n_92),
        .CH1_RXCOMWAKEDET(quad_inst_n_93),
        .CH1_RXCTRL0({quad_inst_n_985,quad_inst_n_986,quad_inst_n_987,quad_inst_n_988,quad_inst_n_989,quad_inst_n_990,quad_inst_n_991,quad_inst_n_992,quad_inst_n_993,quad_inst_n_994,quad_inst_n_995,quad_inst_n_996,quad_inst_n_997,quad_inst_n_998,quad_inst_n_999,quad_inst_n_1000}),
        .CH1_RXCTRL1({quad_inst_n_1001,quad_inst_n_1002,quad_inst_n_1003,quad_inst_n_1004,quad_inst_n_1005,quad_inst_n_1006,quad_inst_n_1007,quad_inst_n_1008,quad_inst_n_1009,quad_inst_n_1010,quad_inst_n_1011,quad_inst_n_1012,quad_inst_n_1013,quad_inst_n_1014,quad_inst_n_1015,quad_inst_n_1016}),
        .CH1_RXCTRL2({quad_inst_n_1679,quad_inst_n_1680,quad_inst_n_1681,quad_inst_n_1682,quad_inst_n_1683,quad_inst_n_1684,quad_inst_n_1685,quad_inst_n_1686}),
        .CH1_RXCTRL3({quad_inst_n_1687,quad_inst_n_1688,quad_inst_n_1689,quad_inst_n_1690,quad_inst_n_1691,quad_inst_n_1692,quad_inst_n_1693,quad_inst_n_1694}),
        .CH1_RXDAPICODEOVRDEN(1'b0),
        .CH1_RXDAPICODERESET(1'b0),
        .CH1_RXDAPIRESET(1'b0),
        .CH1_RXDAPIRESETDONE(quad_inst_n_94),
        .CH1_RXDAPIRESETMASK({1'b0,1'b0}),
        .CH1_RXDATA({quad_inst_n_505,quad_inst_n_506,quad_inst_n_507,quad_inst_n_508,quad_inst_n_509,quad_inst_n_510,quad_inst_n_511,quad_inst_n_512,quad_inst_n_513,quad_inst_n_514,quad_inst_n_515,quad_inst_n_516,quad_inst_n_517,quad_inst_n_518,quad_inst_n_519,quad_inst_n_520,quad_inst_n_521,quad_inst_n_522,quad_inst_n_523,quad_inst_n_524,quad_inst_n_525,quad_inst_n_526,quad_inst_n_527,quad_inst_n_528,quad_inst_n_529,quad_inst_n_530,quad_inst_n_531,quad_inst_n_532,quad_inst_n_533,quad_inst_n_534,quad_inst_n_535,quad_inst_n_536,quad_inst_n_537,quad_inst_n_538,quad_inst_n_539,quad_inst_n_540,quad_inst_n_541,quad_inst_n_542,quad_inst_n_543,quad_inst_n_544,quad_inst_n_545,quad_inst_n_546,quad_inst_n_547,quad_inst_n_548,quad_inst_n_549,quad_inst_n_550,quad_inst_n_551,quad_inst_n_552,quad_inst_n_553,quad_inst_n_554,quad_inst_n_555,quad_inst_n_556,quad_inst_n_557,quad_inst_n_558,quad_inst_n_559,quad_inst_n_560,quad_inst_n_561,quad_inst_n_562,quad_inst_n_563,quad_inst_n_564,quad_inst_n_565,quad_inst_n_566,quad_inst_n_567,quad_inst_n_568,quad_inst_n_569,quad_inst_n_570,quad_inst_n_571,quad_inst_n_572,quad_inst_n_573,quad_inst_n_574,quad_inst_n_575,quad_inst_n_576,quad_inst_n_577,quad_inst_n_578,quad_inst_n_579,quad_inst_n_580,quad_inst_n_581,quad_inst_n_582,quad_inst_n_583,quad_inst_n_584,quad_inst_n_585,quad_inst_n_586,quad_inst_n_587,quad_inst_n_588,quad_inst_n_589,quad_inst_n_590,quad_inst_n_591,quad_inst_n_592,quad_inst_n_593,quad_inst_n_594,quad_inst_n_595,quad_inst_n_596,quad_inst_n_597,quad_inst_n_598,quad_inst_n_599,quad_inst_n_600,quad_inst_n_601,quad_inst_n_602,quad_inst_n_603,quad_inst_n_604,quad_inst_n_605,quad_inst_n_606,quad_inst_n_607,quad_inst_n_608,quad_inst_n_609,quad_inst_n_610,quad_inst_n_611,quad_inst_n_612,quad_inst_n_613,quad_inst_n_614,quad_inst_n_615,quad_inst_n_616,quad_inst_n_617,quad_inst_n_618,quad_inst_n_619,quad_inst_n_620,quad_inst_n_621,quad_inst_n_622,quad_inst_n_623,quad_inst_n_624,quad_inst_n_625,quad_inst_n_626,quad_inst_n_627,quad_inst_n_628,quad_inst_n_629,quad_inst_n_630,quad_inst_n_631,quad_inst_n_632}),
        .CH1_RXDATAVALID({quad_inst_n_1177,quad_inst_n_1178}),
        .CH1_RXDEBUGPCSOUT(quad_inst_n_95),
        .CH1_RXDLYALIGNERR(quad_inst_n_96),
        .CH1_RXDLYALIGNPROG(quad_inst_n_97),
        .CH1_RXDLYALIGNREQ(1'b0),
        .CH1_RXELECIDLE(quad_inst_n_98),
        .CH1_RXEQTRAINING(1'b0),
        .CH1_RXFINEALIGNDONE(quad_inst_n_99),
        .CH1_RXGEARBOXSLIP(1'b0),
        .CH1_RXHEADER({quad_inst_n_1617,quad_inst_n_1618,quad_inst_n_1619,quad_inst_n_1620,quad_inst_n_1621,quad_inst_n_1622}),
        .CH1_RXHEADERVALID({quad_inst_n_1179,quad_inst_n_1180}),
        .CH1_RXLATCLK(1'b0),
        .CH1_RXLPMEN(1'b0),
        .CH1_RXMLDCHAINDONE(1'b0),
        .CH1_RXMLDCHAINREQ(1'b0),
        .CH1_RXMLFINEALIGNREQ(1'b0),
        .CH1_RXOOBRESET(1'b0),
        .CH1_RXOSINTDONE(quad_inst_n_100),
        .CH1_RXOUTCLK(quad_inst_n_101),
        .CH1_RXPCSRESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH1_RXPD({1'b0,1'b0}),
        .CH1_RXPHALIGNDONE(quad_inst_n_102),
        .CH1_RXPHALIGNERR(quad_inst_n_103),
        .CH1_RXPHALIGNREQ(1'b0),
        .CH1_RXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH1_RXPHDLYPD(1'b0),
        .CH1_RXPHDLYRESET(1'b0),
        .CH1_RXPHDLYRESETDONE(quad_inst_n_104),
        .CH1_RXPHSETINITDONE(quad_inst_n_105),
        .CH1_RXPHSETINITREQ(1'b0),
        .CH1_RXPHSHIFT180(1'b0),
        .CH1_RXPHSHIFT180DONE(quad_inst_n_106),
        .CH1_RXPKDET(quad_inst_n_107),
        .CH1_RXPMARESETDONE(ch1_rxpmaresetdone_int),
        .CH1_RXPMARESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH1_RXPOLARITY(1'b0),
        .CH1_RXPRBSCNTRESET(1'b0),
        .CH1_RXPRBSERR(quad_inst_n_109),
        .CH1_RXPRBSLOCKED(quad_inst_n_110),
        .CH1_RXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH1_RXPROGDIVRESET(1'b0),
        .CH1_RXPROGDIVRESETDONE(quad_inst_n_111),
        .CH1_RXQPIEN(1'b0),
        .CH1_RXQPISENN(quad_inst_n_112),
        .CH1_RXQPISENP(quad_inst_n_113),
        .CH1_RXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_RXRESETDONE(ch1_rxresetdone_int),
        .CH1_RXRESETMODE({1'b0,1'b0}),
        .CH1_RXSIMPLEXPHYSTATUS(quad_inst_n_115),
        .CH1_RXSLIDE(1'b0),
        .CH1_RXSLIDERDY(quad_inst_n_116),
        .CH1_RXSLIPDONE(quad_inst_n_117),
        .CH1_RXSTARTOFSEQ({quad_inst_n_1181,quad_inst_n_1182}),
        .CH1_RXSTATUS({quad_inst_n_1228,quad_inst_n_1229,quad_inst_n_1230}),
        .CH1_RXSYNCALLIN(1'b0),
        .CH1_RXSYNCDONE(quad_inst_n_118),
        .CH1_RXTERMINATION(1'b0),
        .CH1_RXUSERRDY(1'b0),
        .CH1_RXUSRCLK(1'b0),
        .CH1_RXVALID(quad_inst_n_119),
        .CH1_TSTCLK0(apb3clk),
        .CH1_TSTCLK1(apb3clk),
        .CH1_TX10GSTAT(quad_inst_n_120),
        .CH1_TXBUFSTATUS({quad_inst_n_1183,quad_inst_n_1184}),
        .CH1_TXCOMFINISH(quad_inst_n_121),
        .CH1_TXCOMINIT(1'b0),
        .CH1_TXCOMSAS(1'b0),
        .CH1_TXCOMWAKE(1'b0),
        .CH1_TXCTRL0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXCTRL1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXCTRL2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXDAPICODEOVRDEN(1'b0),
        .CH1_TXDAPICODERESET(1'b0),
        .CH1_TXDAPIRESET(1'b0),
        .CH1_TXDAPIRESETDONE(quad_inst_n_122),
        .CH1_TXDAPIRESETMASK({1'b0,1'b0}),
        .CH1_TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXDCCDONE(quad_inst_n_123),
        .CH1_TXDEBUGPCSOUT(quad_inst_n_124),
        .CH1_TXDEEMPH({1'b0,1'b0}),
        .CH1_TXDETECTRX(1'b0),
        .CH1_TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .CH1_TXDLYALIGNERR(quad_inst_n_125),
        .CH1_TXDLYALIGNPROG(quad_inst_n_126),
        .CH1_TXDLYALIGNREQ(1'b0),
        .CH1_TXELECIDLE(1'b0),
        .CH1_TXHEADER({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXINHIBIT(1'b0),
        .CH1_TXLATCLK(1'b0),
        .CH1_TXMAINCURSOR({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .CH1_TXMARGIN({1'b0,1'b0,1'b0}),
        .CH1_TXMLDCHAINDONE(1'b0),
        .CH1_TXMLDCHAINREQ(1'b0),
        .CH1_TXONESZEROS(1'b0),
        .CH1_TXOUTCLK(quad_inst_n_127),
        .CH1_TXPAUSEDELAYALIGN(1'b0),
        .CH1_TXPCSRESETMASK(1'b1),
        .CH1_TXPD({1'b0,1'b0}),
        .CH1_TXPHALIGNDONE(quad_inst_n_128),
        .CH1_TXPHALIGNERR(quad_inst_n_129),
        .CH1_TXPHALIGNOUTRSVD(quad_inst_n_130),
        .CH1_TXPHALIGNREQ(1'b0),
        .CH1_TXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH1_TXPHDLYPD(1'b0),
        .CH1_TXPHDLYRESET(1'b0),
        .CH1_TXPHDLYRESETDONE(quad_inst_n_131),
        .CH1_TXPHDLYTSTCLK(1'b0),
        .CH1_TXPHSETINITDONE(quad_inst_n_132),
        .CH1_TXPHSETINITREQ(1'b0),
        .CH1_TXPHSHIFT180(1'b0),
        .CH1_TXPHSHIFT180DONE(quad_inst_n_133),
        .CH1_TXPICODEOVRDEN(1'b0),
        .CH1_TXPICODERESET(1'b0),
        .CH1_TXPIPPMEN(1'b0),
        .CH1_TXPIPPMSTEPSIZE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXPISOPD(1'b0),
        .CH1_TXPMARESETDONE(ch1_txpmaresetdone_int),
        .CH1_TXPMARESETMASK({1'b1,1'b1,1'b1}),
        .CH1_TXPOLARITY(1'b0),
        .CH1_TXPOSTCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXPRBSFORCEERR(1'b0),
        .CH1_TXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXPRECURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXPROGDIVRESET(1'b0),
        .CH1_TXPROGDIVRESETDONE(quad_inst_n_135),
        .CH1_TXQPIBIASEN(1'b0),
        .CH1_TXQPISENN(quad_inst_n_136),
        .CH1_TXQPISENP(quad_inst_n_137),
        .CH1_TXQPIWEAKPU(1'b0),
        .CH1_TXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXRESETDONE(ch1_txresetdone_int),
        .CH1_TXRESETMODE({1'b0,1'b0}),
        .CH1_TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH1_TXSIMPLEXPHYSTATUS(quad_inst_n_139),
        .CH1_TXSWING(1'b0),
        .CH1_TXSWINGOUTHIGH(quad_inst_n_140),
        .CH1_TXSWINGOUTLOW(quad_inst_n_141),
        .CH1_TXSYNCALLIN(1'b0),
        .CH1_TXSYNCDONE(quad_inst_n_142),
        .CH1_TXUSERRDY(1'b0),
        .CH1_TXUSRCLK(1'b0),
        .CH1_XPIPE5_PIPELINE_EN(quad_inst_n_143),
        .CH2_BUFGTCE(quad_inst_n_144),
        .CH2_BUFGTCEMASK({quad_inst_n_1547,quad_inst_n_1548,quad_inst_n_1549,quad_inst_n_1550}),
        .CH2_BUFGTDIV({quad_inst_n_353,quad_inst_n_354,quad_inst_n_355,quad_inst_n_356,quad_inst_n_357,quad_inst_n_358,quad_inst_n_359,quad_inst_n_360,quad_inst_n_361,quad_inst_n_362,quad_inst_n_363,quad_inst_n_364}),
        .CH2_BUFGTRST(quad_inst_n_145),
        .CH2_BUFGTRSTMASK({quad_inst_n_1551,quad_inst_n_1552,quad_inst_n_1553,quad_inst_n_1554}),
        .CH2_CDRBMCDRREQ(1'b0),
        .CH2_CDRFREQOS(1'b0),
        .CH2_CDRINCPCTRL(1'b0),
        .CH2_CDRSTEPDIR(1'b0),
        .CH2_CDRSTEPSQ(1'b0),
        .CH2_CDRSTEPSX(1'b0),
        .CH2_CLKRSVD0(1'b0),
        .CH2_CLKRSVD1(1'b0),
        .CH2_DFEHOLD(1'b0),
        .CH2_DFEOVRD(1'b0),
        .CH2_DMONFIFORESET(1'b0),
        .CH2_DMONITORCLK(1'b0),
        .CH2_DMONITOROUT({quad_inst_n_1339,quad_inst_n_1340,quad_inst_n_1341,quad_inst_n_1342,quad_inst_n_1343,quad_inst_n_1344,quad_inst_n_1345,quad_inst_n_1346,quad_inst_n_1347,quad_inst_n_1348,quad_inst_n_1349,quad_inst_n_1350,quad_inst_n_1351,quad_inst_n_1352,quad_inst_n_1353,quad_inst_n_1354,quad_inst_n_1355,quad_inst_n_1356,quad_inst_n_1357,quad_inst_n_1358,quad_inst_n_1359,quad_inst_n_1360,quad_inst_n_1361,quad_inst_n_1362,quad_inst_n_1363,quad_inst_n_1364,quad_inst_n_1365,quad_inst_n_1366,quad_inst_n_1367,quad_inst_n_1368,quad_inst_n_1369,quad_inst_n_1370}),
        .CH2_DMONITOROUTCLK(quad_inst_n_146),
        .CH2_EYESCANDATAERROR(quad_inst_n_147),
        .CH2_EYESCANRESET(1'b0),
        .CH2_EYESCANTRIGGER(1'b0),
        .CH2_GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_GTRXRESET(1'b0),
        .CH2_GTTXRESET(1'b0),
        .CH2_GTYPRXN(rxn[2]),
        .CH2_GTYPRXP(rxp[2]),
        .CH2_GTYPTXN(txn[2]),
        .CH2_GTYPTXP(txp[2]),
        .CH2_HSDPPCSRESET(1'b0),
        .CH2_ILORESET(1'b0),
        .CH2_ILORESETDONE(quad_inst_n_150),
        .CH2_ILORESETMASK(1'b1),
        .CH2_LOOPBACK({1'b0,1'b0,1'b0}),
        .CH2_PCIERSTB(1'b1),
        .CH2_PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_PCSRSVDOUT({quad_inst_n_1017,quad_inst_n_1018,quad_inst_n_1019,quad_inst_n_1020,ch2_pcsrsvdout_int,quad_inst_n_1023,quad_inst_n_1024,quad_inst_n_1025,quad_inst_n_1026,quad_inst_n_1027,quad_inst_n_1028,quad_inst_n_1029,quad_inst_n_1030,quad_inst_n_1031,quad_inst_n_1032}),
        .CH2_PHYESMADAPTSAVE(1'b0),
        .CH2_PHYREADY(quad_inst_n_151),
        .CH2_PHYSTATUS(quad_inst_n_152),
        .CH2_PINRSVDAS({quad_inst_n_1033,quad_inst_n_1034,quad_inst_n_1035,quad_inst_n_1036,quad_inst_n_1037,quad_inst_n_1038,quad_inst_n_1039,quad_inst_n_1040,quad_inst_n_1041,quad_inst_n_1042,quad_inst_n_1043,quad_inst_n_1044,quad_inst_n_1045,quad_inst_n_1046,quad_inst_n_1047,quad_inst_n_1048}),
        .CH2_REFDEBUGOUT({quad_inst_n_1185,quad_inst_n_1186}),
        .CH2_RESETEXCEPTION(quad_inst_n_153),
        .CH2_RX10GSTAT({quad_inst_n_1695,quad_inst_n_1696,quad_inst_n_1697,quad_inst_n_1698,quad_inst_n_1699,quad_inst_n_1700,quad_inst_n_1701,quad_inst_n_1702}),
        .CH2_RXBUFSTATUS({quad_inst_n_1231,quad_inst_n_1232,quad_inst_n_1233}),
        .CH2_RXBYTEISALIGNED(quad_inst_n_154),
        .CH2_RXBYTEREALIGN(quad_inst_n_155),
        .CH2_RXCDRHOLD(1'b0),
        .CH2_RXCDRLOCK(quad_inst_n_156),
        .CH2_RXCDROVRDEN(1'b0),
        .CH2_RXCDRPHDONE(quad_inst_n_157),
        .CH2_RXCDRRESET(1'b0),
        .CH2_RXCHANBONDSEQ(quad_inst_n_158),
        .CH2_RXCHANISALIGNED(quad_inst_n_159),
        .CH2_RXCHANREALIGN(quad_inst_n_160),
        .CH2_RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_RXCHBONDO({quad_inst_n_1601,quad_inst_n_1602,quad_inst_n_1603,quad_inst_n_1604,quad_inst_n_1605}),
        .CH2_RXCLKCORCNT({quad_inst_n_1187,quad_inst_n_1188}),
        .CH2_RXCOMINITDET(quad_inst_n_161),
        .CH2_RXCOMMADET(quad_inst_n_162),
        .CH2_RXCOMSASDET(quad_inst_n_163),
        .CH2_RXCOMWAKEDET(quad_inst_n_164),
        .CH2_RXCTRL0({quad_inst_n_1049,quad_inst_n_1050,quad_inst_n_1051,quad_inst_n_1052,quad_inst_n_1053,quad_inst_n_1054,quad_inst_n_1055,quad_inst_n_1056,quad_inst_n_1057,quad_inst_n_1058,quad_inst_n_1059,quad_inst_n_1060,quad_inst_n_1061,quad_inst_n_1062,quad_inst_n_1063,quad_inst_n_1064}),
        .CH2_RXCTRL1({quad_inst_n_1065,quad_inst_n_1066,quad_inst_n_1067,quad_inst_n_1068,quad_inst_n_1069,quad_inst_n_1070,quad_inst_n_1071,quad_inst_n_1072,quad_inst_n_1073,quad_inst_n_1074,quad_inst_n_1075,quad_inst_n_1076,quad_inst_n_1077,quad_inst_n_1078,quad_inst_n_1079,quad_inst_n_1080}),
        .CH2_RXCTRL2({quad_inst_n_1703,quad_inst_n_1704,quad_inst_n_1705,quad_inst_n_1706,quad_inst_n_1707,quad_inst_n_1708,quad_inst_n_1709,quad_inst_n_1710}),
        .CH2_RXCTRL3({quad_inst_n_1711,quad_inst_n_1712,quad_inst_n_1713,quad_inst_n_1714,quad_inst_n_1715,quad_inst_n_1716,quad_inst_n_1717,quad_inst_n_1718}),
        .CH2_RXDAPICODEOVRDEN(1'b0),
        .CH2_RXDAPICODERESET(1'b0),
        .CH2_RXDAPIRESET(1'b0),
        .CH2_RXDAPIRESETDONE(quad_inst_n_165),
        .CH2_RXDAPIRESETMASK({1'b0,1'b0}),
        .CH2_RXDATA({quad_inst_n_633,quad_inst_n_634,quad_inst_n_635,quad_inst_n_636,quad_inst_n_637,quad_inst_n_638,quad_inst_n_639,quad_inst_n_640,quad_inst_n_641,quad_inst_n_642,quad_inst_n_643,quad_inst_n_644,quad_inst_n_645,quad_inst_n_646,quad_inst_n_647,quad_inst_n_648,quad_inst_n_649,quad_inst_n_650,quad_inst_n_651,quad_inst_n_652,quad_inst_n_653,quad_inst_n_654,quad_inst_n_655,quad_inst_n_656,quad_inst_n_657,quad_inst_n_658,quad_inst_n_659,quad_inst_n_660,quad_inst_n_661,quad_inst_n_662,quad_inst_n_663,quad_inst_n_664,quad_inst_n_665,quad_inst_n_666,quad_inst_n_667,quad_inst_n_668,quad_inst_n_669,quad_inst_n_670,quad_inst_n_671,quad_inst_n_672,quad_inst_n_673,quad_inst_n_674,quad_inst_n_675,quad_inst_n_676,quad_inst_n_677,quad_inst_n_678,quad_inst_n_679,quad_inst_n_680,quad_inst_n_681,quad_inst_n_682,quad_inst_n_683,quad_inst_n_684,quad_inst_n_685,quad_inst_n_686,quad_inst_n_687,quad_inst_n_688,quad_inst_n_689,quad_inst_n_690,quad_inst_n_691,quad_inst_n_692,quad_inst_n_693,quad_inst_n_694,quad_inst_n_695,quad_inst_n_696,quad_inst_n_697,quad_inst_n_698,quad_inst_n_699,quad_inst_n_700,quad_inst_n_701,quad_inst_n_702,quad_inst_n_703,quad_inst_n_704,quad_inst_n_705,quad_inst_n_706,quad_inst_n_707,quad_inst_n_708,quad_inst_n_709,quad_inst_n_710,quad_inst_n_711,quad_inst_n_712,quad_inst_n_713,quad_inst_n_714,quad_inst_n_715,quad_inst_n_716,quad_inst_n_717,quad_inst_n_718,quad_inst_n_719,quad_inst_n_720,quad_inst_n_721,quad_inst_n_722,quad_inst_n_723,quad_inst_n_724,quad_inst_n_725,quad_inst_n_726,quad_inst_n_727,quad_inst_n_728,quad_inst_n_729,quad_inst_n_730,quad_inst_n_731,quad_inst_n_732,quad_inst_n_733,quad_inst_n_734,quad_inst_n_735,quad_inst_n_736,quad_inst_n_737,quad_inst_n_738,quad_inst_n_739,quad_inst_n_740,quad_inst_n_741,quad_inst_n_742,quad_inst_n_743,quad_inst_n_744,quad_inst_n_745,quad_inst_n_746,quad_inst_n_747,quad_inst_n_748,quad_inst_n_749,quad_inst_n_750,quad_inst_n_751,quad_inst_n_752,quad_inst_n_753,quad_inst_n_754,quad_inst_n_755,quad_inst_n_756,quad_inst_n_757,quad_inst_n_758,quad_inst_n_759,quad_inst_n_760}),
        .CH2_RXDATAVALID({quad_inst_n_1189,quad_inst_n_1190}),
        .CH2_RXDEBUGPCSOUT(quad_inst_n_166),
        .CH2_RXDLYALIGNERR(quad_inst_n_167),
        .CH2_RXDLYALIGNPROG(quad_inst_n_168),
        .CH2_RXDLYALIGNREQ(1'b0),
        .CH2_RXELECIDLE(quad_inst_n_169),
        .CH2_RXEQTRAINING(1'b0),
        .CH2_RXFINEALIGNDONE(quad_inst_n_170),
        .CH2_RXGEARBOXSLIP(1'b0),
        .CH2_RXHEADER({quad_inst_n_1623,quad_inst_n_1624,quad_inst_n_1625,quad_inst_n_1626,quad_inst_n_1627,quad_inst_n_1628}),
        .CH2_RXHEADERVALID({quad_inst_n_1191,quad_inst_n_1192}),
        .CH2_RXLATCLK(1'b0),
        .CH2_RXLPMEN(1'b0),
        .CH2_RXMLDCHAINDONE(1'b0),
        .CH2_RXMLDCHAINREQ(1'b0),
        .CH2_RXMLFINEALIGNREQ(1'b0),
        .CH2_RXOOBRESET(1'b0),
        .CH2_RXOSINTDONE(quad_inst_n_171),
        .CH2_RXOUTCLK(quad_inst_n_172),
        .CH2_RXPCSRESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH2_RXPD({1'b0,1'b0}),
        .CH2_RXPHALIGNDONE(quad_inst_n_173),
        .CH2_RXPHALIGNERR(quad_inst_n_174),
        .CH2_RXPHALIGNREQ(1'b0),
        .CH2_RXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH2_RXPHDLYPD(1'b0),
        .CH2_RXPHDLYRESET(1'b0),
        .CH2_RXPHDLYRESETDONE(quad_inst_n_175),
        .CH2_RXPHSETINITDONE(quad_inst_n_176),
        .CH2_RXPHSETINITREQ(1'b0),
        .CH2_RXPHSHIFT180(1'b0),
        .CH2_RXPHSHIFT180DONE(quad_inst_n_177),
        .CH2_RXPKDET(quad_inst_n_178),
        .CH2_RXPMARESETDONE(ch2_rxpmaresetdone_int),
        .CH2_RXPMARESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH2_RXPOLARITY(1'b0),
        .CH2_RXPRBSCNTRESET(1'b0),
        .CH2_RXPRBSERR(quad_inst_n_180),
        .CH2_RXPRBSLOCKED(quad_inst_n_181),
        .CH2_RXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH2_RXPROGDIVRESET(1'b0),
        .CH2_RXPROGDIVRESETDONE(quad_inst_n_182),
        .CH2_RXQPIEN(1'b0),
        .CH2_RXQPISENN(quad_inst_n_183),
        .CH2_RXQPISENP(quad_inst_n_184),
        .CH2_RXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_RXRESETDONE(ch2_rxresetdone_int),
        .CH2_RXRESETMODE({1'b0,1'b0}),
        .CH2_RXSIMPLEXPHYSTATUS(quad_inst_n_186),
        .CH2_RXSLIDE(1'b0),
        .CH2_RXSLIDERDY(quad_inst_n_187),
        .CH2_RXSLIPDONE(quad_inst_n_188),
        .CH2_RXSTARTOFSEQ({quad_inst_n_1193,quad_inst_n_1194}),
        .CH2_RXSTATUS({quad_inst_n_1234,quad_inst_n_1235,quad_inst_n_1236}),
        .CH2_RXSYNCALLIN(1'b0),
        .CH2_RXSYNCDONE(quad_inst_n_189),
        .CH2_RXTERMINATION(1'b0),
        .CH2_RXUSERRDY(1'b0),
        .CH2_RXUSRCLK(1'b0),
        .CH2_RXVALID(quad_inst_n_190),
        .CH2_TSTCLK0(apb3clk),
        .CH2_TSTCLK1(apb3clk),
        .CH2_TX10GSTAT(quad_inst_n_191),
        .CH2_TXBUFSTATUS({quad_inst_n_1195,quad_inst_n_1196}),
        .CH2_TXCOMFINISH(quad_inst_n_192),
        .CH2_TXCOMINIT(1'b0),
        .CH2_TXCOMSAS(1'b0),
        .CH2_TXCOMWAKE(1'b0),
        .CH2_TXCTRL0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXCTRL1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXCTRL2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXDAPICODEOVRDEN(1'b0),
        .CH2_TXDAPICODERESET(1'b0),
        .CH2_TXDAPIRESET(1'b0),
        .CH2_TXDAPIRESETDONE(quad_inst_n_193),
        .CH2_TXDAPIRESETMASK({1'b0,1'b0}),
        .CH2_TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXDCCDONE(quad_inst_n_194),
        .CH2_TXDEBUGPCSOUT(quad_inst_n_195),
        .CH2_TXDEEMPH({1'b0,1'b0}),
        .CH2_TXDETECTRX(1'b0),
        .CH2_TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .CH2_TXDLYALIGNERR(quad_inst_n_196),
        .CH2_TXDLYALIGNPROG(quad_inst_n_197),
        .CH2_TXDLYALIGNREQ(1'b0),
        .CH2_TXELECIDLE(1'b0),
        .CH2_TXHEADER({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXINHIBIT(1'b0),
        .CH2_TXLATCLK(1'b0),
        .CH2_TXMAINCURSOR({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .CH2_TXMARGIN({1'b0,1'b0,1'b0}),
        .CH2_TXMLDCHAINDONE(1'b0),
        .CH2_TXMLDCHAINREQ(1'b0),
        .CH2_TXONESZEROS(1'b0),
        .CH2_TXOUTCLK(quad_inst_n_198),
        .CH2_TXPAUSEDELAYALIGN(1'b0),
        .CH2_TXPCSRESETMASK(1'b1),
        .CH2_TXPD({1'b0,1'b0}),
        .CH2_TXPHALIGNDONE(quad_inst_n_199),
        .CH2_TXPHALIGNERR(quad_inst_n_200),
        .CH2_TXPHALIGNOUTRSVD(quad_inst_n_201),
        .CH2_TXPHALIGNREQ(1'b0),
        .CH2_TXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH2_TXPHDLYPD(1'b0),
        .CH2_TXPHDLYRESET(1'b0),
        .CH2_TXPHDLYRESETDONE(quad_inst_n_202),
        .CH2_TXPHDLYTSTCLK(1'b0),
        .CH2_TXPHSETINITDONE(quad_inst_n_203),
        .CH2_TXPHSETINITREQ(1'b0),
        .CH2_TXPHSHIFT180(1'b0),
        .CH2_TXPHSHIFT180DONE(quad_inst_n_204),
        .CH2_TXPICODEOVRDEN(1'b0),
        .CH2_TXPICODERESET(1'b0),
        .CH2_TXPIPPMEN(1'b0),
        .CH2_TXPIPPMSTEPSIZE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXPISOPD(1'b0),
        .CH2_TXPMARESETDONE(ch2_txpmaresetdone_int),
        .CH2_TXPMARESETMASK({1'b1,1'b1,1'b1}),
        .CH2_TXPOLARITY(1'b0),
        .CH2_TXPOSTCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXPRBSFORCEERR(1'b0),
        .CH2_TXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXPRECURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXPROGDIVRESET(1'b0),
        .CH2_TXPROGDIVRESETDONE(quad_inst_n_206),
        .CH2_TXQPIBIASEN(1'b0),
        .CH2_TXQPISENN(quad_inst_n_207),
        .CH2_TXQPISENP(quad_inst_n_208),
        .CH2_TXQPIWEAKPU(1'b0),
        .CH2_TXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXRESETDONE(ch2_txresetdone_int),
        .CH2_TXRESETMODE({1'b0,1'b0}),
        .CH2_TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH2_TXSIMPLEXPHYSTATUS(quad_inst_n_210),
        .CH2_TXSWING(1'b0),
        .CH2_TXSWINGOUTHIGH(quad_inst_n_211),
        .CH2_TXSWINGOUTLOW(quad_inst_n_212),
        .CH2_TXSYNCALLIN(1'b0),
        .CH2_TXSYNCDONE(quad_inst_n_213),
        .CH2_TXUSERRDY(1'b0),
        .CH2_TXUSRCLK(1'b0),
        .CH2_XPIPE5_PIPELINE_EN(quad_inst_n_214),
        .CH3_BUFGTCE(quad_inst_n_215),
        .CH3_BUFGTCEMASK({quad_inst_n_1555,quad_inst_n_1556,quad_inst_n_1557,quad_inst_n_1558}),
        .CH3_BUFGTDIV({quad_inst_n_365,quad_inst_n_366,quad_inst_n_367,quad_inst_n_368,quad_inst_n_369,quad_inst_n_370,quad_inst_n_371,quad_inst_n_372,quad_inst_n_373,quad_inst_n_374,quad_inst_n_375,quad_inst_n_376}),
        .CH3_BUFGTRST(quad_inst_n_216),
        .CH3_BUFGTRSTMASK({quad_inst_n_1559,quad_inst_n_1560,quad_inst_n_1561,quad_inst_n_1562}),
        .CH3_CDRBMCDRREQ(1'b0),
        .CH3_CDRFREQOS(1'b0),
        .CH3_CDRINCPCTRL(1'b0),
        .CH3_CDRSTEPDIR(1'b0),
        .CH3_CDRSTEPSQ(1'b0),
        .CH3_CDRSTEPSX(1'b0),
        .CH3_CLKRSVD0(1'b0),
        .CH3_CLKRSVD1(1'b0),
        .CH3_DFEHOLD(1'b0),
        .CH3_DFEOVRD(1'b0),
        .CH3_DMONFIFORESET(1'b0),
        .CH3_DMONITORCLK(1'b0),
        .CH3_DMONITOROUT({quad_inst_n_1371,quad_inst_n_1372,quad_inst_n_1373,quad_inst_n_1374,quad_inst_n_1375,quad_inst_n_1376,quad_inst_n_1377,quad_inst_n_1378,quad_inst_n_1379,quad_inst_n_1380,quad_inst_n_1381,quad_inst_n_1382,quad_inst_n_1383,quad_inst_n_1384,quad_inst_n_1385,quad_inst_n_1386,quad_inst_n_1387,quad_inst_n_1388,quad_inst_n_1389,quad_inst_n_1390,quad_inst_n_1391,quad_inst_n_1392,quad_inst_n_1393,quad_inst_n_1394,quad_inst_n_1395,quad_inst_n_1396,quad_inst_n_1397,quad_inst_n_1398,quad_inst_n_1399,quad_inst_n_1400,quad_inst_n_1401,quad_inst_n_1402}),
        .CH3_DMONITOROUTCLK(quad_inst_n_217),
        .CH3_EYESCANDATAERROR(quad_inst_n_218),
        .CH3_EYESCANRESET(1'b0),
        .CH3_EYESCANTRIGGER(1'b0),
        .CH3_GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_GTRXRESET(1'b0),
        .CH3_GTTXRESET(1'b0),
        .CH3_GTYPRXN(rxn[3]),
        .CH3_GTYPRXP(rxp[3]),
        .CH3_GTYPTXN(txn[3]),
        .CH3_GTYPTXP(txp[3]),
        .CH3_HSDPPCSRESET(1'b0),
        .CH3_ILORESET(1'b0),
        .CH3_ILORESETDONE(quad_inst_n_221),
        .CH3_ILORESETMASK(1'b1),
        .CH3_LOOPBACK({1'b0,1'b0,1'b0}),
        .CH3_PCIERSTB(1'b1),
        .CH3_PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_PCSRSVDOUT({quad_inst_n_1081,quad_inst_n_1082,quad_inst_n_1083,quad_inst_n_1084,ch3_pcsrsvdout_int,quad_inst_n_1087,quad_inst_n_1088,quad_inst_n_1089,quad_inst_n_1090,quad_inst_n_1091,quad_inst_n_1092,quad_inst_n_1093,quad_inst_n_1094,quad_inst_n_1095,quad_inst_n_1096}),
        .CH3_PHYESMADAPTSAVE(1'b0),
        .CH3_PHYREADY(quad_inst_n_222),
        .CH3_PHYSTATUS(quad_inst_n_223),
        .CH3_PINRSVDAS({quad_inst_n_1097,quad_inst_n_1098,quad_inst_n_1099,quad_inst_n_1100,quad_inst_n_1101,quad_inst_n_1102,quad_inst_n_1103,quad_inst_n_1104,quad_inst_n_1105,quad_inst_n_1106,quad_inst_n_1107,quad_inst_n_1108,quad_inst_n_1109,quad_inst_n_1110,quad_inst_n_1111,quad_inst_n_1112}),
        .CH3_REFDEBUGOUT({quad_inst_n_1197,quad_inst_n_1198}),
        .CH3_RESETEXCEPTION(quad_inst_n_224),
        .CH3_RX10GSTAT({quad_inst_n_1719,quad_inst_n_1720,quad_inst_n_1721,quad_inst_n_1722,quad_inst_n_1723,quad_inst_n_1724,quad_inst_n_1725,quad_inst_n_1726}),
        .CH3_RXBUFSTATUS({quad_inst_n_1237,quad_inst_n_1238,quad_inst_n_1239}),
        .CH3_RXBYTEISALIGNED(quad_inst_n_225),
        .CH3_RXBYTEREALIGN(quad_inst_n_226),
        .CH3_RXCDRHOLD(1'b0),
        .CH3_RXCDRLOCK(quad_inst_n_227),
        .CH3_RXCDROVRDEN(1'b0),
        .CH3_RXCDRPHDONE(quad_inst_n_228),
        .CH3_RXCDRRESET(1'b0),
        .CH3_RXCHANBONDSEQ(quad_inst_n_229),
        .CH3_RXCHANISALIGNED(quad_inst_n_230),
        .CH3_RXCHANREALIGN(quad_inst_n_231),
        .CH3_RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_RXCHBONDO({quad_inst_n_1606,quad_inst_n_1607,quad_inst_n_1608,quad_inst_n_1609,quad_inst_n_1610}),
        .CH3_RXCLKCORCNT({quad_inst_n_1199,quad_inst_n_1200}),
        .CH3_RXCOMINITDET(quad_inst_n_232),
        .CH3_RXCOMMADET(quad_inst_n_233),
        .CH3_RXCOMSASDET(quad_inst_n_234),
        .CH3_RXCOMWAKEDET(quad_inst_n_235),
        .CH3_RXCTRL0({quad_inst_n_1113,quad_inst_n_1114,quad_inst_n_1115,quad_inst_n_1116,quad_inst_n_1117,quad_inst_n_1118,quad_inst_n_1119,quad_inst_n_1120,quad_inst_n_1121,quad_inst_n_1122,quad_inst_n_1123,quad_inst_n_1124,quad_inst_n_1125,quad_inst_n_1126,quad_inst_n_1127,quad_inst_n_1128}),
        .CH3_RXCTRL1({quad_inst_n_1129,quad_inst_n_1130,quad_inst_n_1131,quad_inst_n_1132,quad_inst_n_1133,quad_inst_n_1134,quad_inst_n_1135,quad_inst_n_1136,quad_inst_n_1137,quad_inst_n_1138,quad_inst_n_1139,quad_inst_n_1140,quad_inst_n_1141,quad_inst_n_1142,quad_inst_n_1143,quad_inst_n_1144}),
        .CH3_RXCTRL2({quad_inst_n_1727,quad_inst_n_1728,quad_inst_n_1729,quad_inst_n_1730,quad_inst_n_1731,quad_inst_n_1732,quad_inst_n_1733,quad_inst_n_1734}),
        .CH3_RXCTRL3({quad_inst_n_1735,quad_inst_n_1736,quad_inst_n_1737,quad_inst_n_1738,quad_inst_n_1739,quad_inst_n_1740,quad_inst_n_1741,quad_inst_n_1742}),
        .CH3_RXDAPICODEOVRDEN(1'b0),
        .CH3_RXDAPICODERESET(1'b0),
        .CH3_RXDAPIRESET(1'b0),
        .CH3_RXDAPIRESETDONE(quad_inst_n_236),
        .CH3_RXDAPIRESETMASK({1'b0,1'b0}),
        .CH3_RXDATA({quad_inst_n_761,quad_inst_n_762,quad_inst_n_763,quad_inst_n_764,quad_inst_n_765,quad_inst_n_766,quad_inst_n_767,quad_inst_n_768,quad_inst_n_769,quad_inst_n_770,quad_inst_n_771,quad_inst_n_772,quad_inst_n_773,quad_inst_n_774,quad_inst_n_775,quad_inst_n_776,quad_inst_n_777,quad_inst_n_778,quad_inst_n_779,quad_inst_n_780,quad_inst_n_781,quad_inst_n_782,quad_inst_n_783,quad_inst_n_784,quad_inst_n_785,quad_inst_n_786,quad_inst_n_787,quad_inst_n_788,quad_inst_n_789,quad_inst_n_790,quad_inst_n_791,quad_inst_n_792,quad_inst_n_793,quad_inst_n_794,quad_inst_n_795,quad_inst_n_796,quad_inst_n_797,quad_inst_n_798,quad_inst_n_799,quad_inst_n_800,quad_inst_n_801,quad_inst_n_802,quad_inst_n_803,quad_inst_n_804,quad_inst_n_805,quad_inst_n_806,quad_inst_n_807,quad_inst_n_808,quad_inst_n_809,quad_inst_n_810,quad_inst_n_811,quad_inst_n_812,quad_inst_n_813,quad_inst_n_814,quad_inst_n_815,quad_inst_n_816,quad_inst_n_817,quad_inst_n_818,quad_inst_n_819,quad_inst_n_820,quad_inst_n_821,quad_inst_n_822,quad_inst_n_823,quad_inst_n_824,quad_inst_n_825,quad_inst_n_826,quad_inst_n_827,quad_inst_n_828,quad_inst_n_829,quad_inst_n_830,quad_inst_n_831,quad_inst_n_832,quad_inst_n_833,quad_inst_n_834,quad_inst_n_835,quad_inst_n_836,quad_inst_n_837,quad_inst_n_838,quad_inst_n_839,quad_inst_n_840,quad_inst_n_841,quad_inst_n_842,quad_inst_n_843,quad_inst_n_844,quad_inst_n_845,quad_inst_n_846,quad_inst_n_847,quad_inst_n_848,quad_inst_n_849,quad_inst_n_850,quad_inst_n_851,quad_inst_n_852,quad_inst_n_853,quad_inst_n_854,quad_inst_n_855,quad_inst_n_856,quad_inst_n_857,quad_inst_n_858,quad_inst_n_859,quad_inst_n_860,quad_inst_n_861,quad_inst_n_862,quad_inst_n_863,quad_inst_n_864,quad_inst_n_865,quad_inst_n_866,quad_inst_n_867,quad_inst_n_868,quad_inst_n_869,quad_inst_n_870,quad_inst_n_871,quad_inst_n_872,quad_inst_n_873,quad_inst_n_874,quad_inst_n_875,quad_inst_n_876,quad_inst_n_877,quad_inst_n_878,quad_inst_n_879,quad_inst_n_880,quad_inst_n_881,quad_inst_n_882,quad_inst_n_883,quad_inst_n_884,quad_inst_n_885,quad_inst_n_886,quad_inst_n_887,quad_inst_n_888}),
        .CH3_RXDATAVALID({quad_inst_n_1201,quad_inst_n_1202}),
        .CH3_RXDEBUGPCSOUT(quad_inst_n_237),
        .CH3_RXDLYALIGNERR(quad_inst_n_238),
        .CH3_RXDLYALIGNPROG(quad_inst_n_239),
        .CH3_RXDLYALIGNREQ(1'b0),
        .CH3_RXELECIDLE(quad_inst_n_240),
        .CH3_RXEQTRAINING(1'b0),
        .CH3_RXFINEALIGNDONE(quad_inst_n_241),
        .CH3_RXGEARBOXSLIP(1'b0),
        .CH3_RXHEADER({quad_inst_n_1629,quad_inst_n_1630,quad_inst_n_1631,quad_inst_n_1632,quad_inst_n_1633,quad_inst_n_1634}),
        .CH3_RXHEADERVALID({quad_inst_n_1203,quad_inst_n_1204}),
        .CH3_RXLATCLK(1'b0),
        .CH3_RXLPMEN(1'b0),
        .CH3_RXMLDCHAINDONE(1'b0),
        .CH3_RXMLDCHAINREQ(1'b0),
        .CH3_RXMLFINEALIGNREQ(1'b0),
        .CH3_RXOOBRESET(1'b0),
        .CH3_RXOSINTDONE(quad_inst_n_242),
        .CH3_RXOUTCLK(quad_inst_n_243),
        .CH3_RXPCSRESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH3_RXPD({1'b0,1'b0}),
        .CH3_RXPHALIGNDONE(quad_inst_n_244),
        .CH3_RXPHALIGNERR(quad_inst_n_245),
        .CH3_RXPHALIGNREQ(1'b0),
        .CH3_RXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH3_RXPHDLYPD(1'b0),
        .CH3_RXPHDLYRESET(1'b0),
        .CH3_RXPHDLYRESETDONE(quad_inst_n_246),
        .CH3_RXPHSETINITDONE(quad_inst_n_247),
        .CH3_RXPHSETINITREQ(1'b0),
        .CH3_RXPHSHIFT180(1'b0),
        .CH3_RXPHSHIFT180DONE(quad_inst_n_248),
        .CH3_RXPKDET(quad_inst_n_249),
        .CH3_RXPMARESETDONE(ch3_rxpmaresetdone_int),
        .CH3_RXPMARESETMASK({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CH3_RXPOLARITY(1'b0),
        .CH3_RXPRBSCNTRESET(1'b0),
        .CH3_RXPRBSERR(quad_inst_n_251),
        .CH3_RXPRBSLOCKED(quad_inst_n_252),
        .CH3_RXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH3_RXPROGDIVRESET(1'b0),
        .CH3_RXPROGDIVRESETDONE(quad_inst_n_253),
        .CH3_RXQPIEN(1'b0),
        .CH3_RXQPISENN(quad_inst_n_254),
        .CH3_RXQPISENP(quad_inst_n_255),
        .CH3_RXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_RXRESETDONE(ch3_rxresetdone_int),
        .CH3_RXRESETMODE({1'b0,1'b0}),
        .CH3_RXSIMPLEXPHYSTATUS(quad_inst_n_257),
        .CH3_RXSLIDE(1'b0),
        .CH3_RXSLIDERDY(quad_inst_n_258),
        .CH3_RXSLIPDONE(quad_inst_n_259),
        .CH3_RXSTARTOFSEQ({quad_inst_n_1205,quad_inst_n_1206}),
        .CH3_RXSTATUS({quad_inst_n_1240,quad_inst_n_1241,quad_inst_n_1242}),
        .CH3_RXSYNCALLIN(1'b0),
        .CH3_RXSYNCDONE(quad_inst_n_260),
        .CH3_RXTERMINATION(1'b0),
        .CH3_RXUSERRDY(1'b0),
        .CH3_RXUSRCLK(1'b0),
        .CH3_RXVALID(quad_inst_n_261),
        .CH3_TSTCLK0(apb3clk),
        .CH3_TSTCLK1(apb3clk),
        .CH3_TX10GSTAT(quad_inst_n_262),
        .CH3_TXBUFSTATUS({quad_inst_n_1207,quad_inst_n_1208}),
        .CH3_TXCOMFINISH(quad_inst_n_263),
        .CH3_TXCOMINIT(1'b0),
        .CH3_TXCOMSAS(1'b0),
        .CH3_TXCOMWAKE(1'b0),
        .CH3_TXCTRL0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXCTRL1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXCTRL2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXDAPICODEOVRDEN(1'b0),
        .CH3_TXDAPICODERESET(1'b0),
        .CH3_TXDAPIRESET(1'b0),
        .CH3_TXDAPIRESETDONE(quad_inst_n_264),
        .CH3_TXDAPIRESETMASK({1'b0,1'b0}),
        .CH3_TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXDCCDONE(quad_inst_n_265),
        .CH3_TXDEBUGPCSOUT(quad_inst_n_266),
        .CH3_TXDEEMPH({1'b0,1'b0}),
        .CH3_TXDETECTRX(1'b0),
        .CH3_TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .CH3_TXDLYALIGNERR(quad_inst_n_267),
        .CH3_TXDLYALIGNPROG(quad_inst_n_268),
        .CH3_TXDLYALIGNREQ(1'b0),
        .CH3_TXELECIDLE(1'b0),
        .CH3_TXHEADER({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXINHIBIT(1'b0),
        .CH3_TXLATCLK(1'b0),
        .CH3_TXMAINCURSOR({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .CH3_TXMARGIN({1'b0,1'b0,1'b0}),
        .CH3_TXMLDCHAINDONE(1'b0),
        .CH3_TXMLDCHAINREQ(1'b0),
        .CH3_TXONESZEROS(1'b0),
        .CH3_TXOUTCLK(quad_inst_n_269),
        .CH3_TXPAUSEDELAYALIGN(1'b0),
        .CH3_TXPCSRESETMASK(1'b1),
        .CH3_TXPD({1'b0,1'b0}),
        .CH3_TXPHALIGNDONE(quad_inst_n_270),
        .CH3_TXPHALIGNERR(quad_inst_n_271),
        .CH3_TXPHALIGNOUTRSVD(quad_inst_n_272),
        .CH3_TXPHALIGNREQ(1'b0),
        .CH3_TXPHALIGNRESETMASK({1'b1,1'b1}),
        .CH3_TXPHDLYPD(1'b0),
        .CH3_TXPHDLYRESET(1'b0),
        .CH3_TXPHDLYRESETDONE(quad_inst_n_273),
        .CH3_TXPHDLYTSTCLK(1'b0),
        .CH3_TXPHSETINITDONE(quad_inst_n_274),
        .CH3_TXPHSETINITREQ(1'b0),
        .CH3_TXPHSHIFT180(1'b0),
        .CH3_TXPHSHIFT180DONE(quad_inst_n_275),
        .CH3_TXPICODEOVRDEN(1'b0),
        .CH3_TXPICODERESET(1'b0),
        .CH3_TXPIPPMEN(1'b0),
        .CH3_TXPIPPMSTEPSIZE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXPISOPD(1'b0),
        .CH3_TXPMARESETDONE(ch3_txpmaresetdone_int),
        .CH3_TXPMARESETMASK({1'b1,1'b1,1'b1}),
        .CH3_TXPOLARITY(1'b0),
        .CH3_TXPOSTCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXPRBSFORCEERR(1'b0),
        .CH3_TXPRBSSEL({1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXPRECURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXPROGDIVRESET(1'b0),
        .CH3_TXPROGDIVRESETDONE(quad_inst_n_277),
        .CH3_TXQPIBIASEN(1'b0),
        .CH3_TXQPISENN(quad_inst_n_278),
        .CH3_TXQPISENP(quad_inst_n_279),
        .CH3_TXQPIWEAKPU(1'b0),
        .CH3_TXRATE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXRESETDONE(ch3_txresetdone_int),
        .CH3_TXRESETMODE({1'b0,1'b0}),
        .CH3_TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CH3_TXSIMPLEXPHYSTATUS(quad_inst_n_281),
        .CH3_TXSWING(1'b0),
        .CH3_TXSWINGOUTHIGH(quad_inst_n_282),
        .CH3_TXSWINGOUTLOW(quad_inst_n_283),
        .CH3_TXSYNCALLIN(1'b0),
        .CH3_TXSYNCDONE(quad_inst_n_284),
        .CH3_TXUSERRDY(1'b0),
        .CH3_TXUSRCLK(1'b0),
        .CH3_XPIPE5_PIPELINE_EN(quad_inst_n_285),
        .COESTATUSDEBUG(1'b0),
        .CORRECTERR(quad_inst_n_286),
        .CTRLRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CTRLRSVDOUT({quad_inst_n_1743,quad_inst_n_1744,quad_inst_n_1745,quad_inst_n_1746,quad_inst_n_1747,quad_inst_n_1748,quad_inst_n_1749,quad_inst_n_1750}),
        .DEBUGTRACECLK(1'b0),
        .DEBUGTRACEREADY(1'b0),
        .DEBUGTRACETDATA({quad_inst_n_1145,quad_inst_n_1146,quad_inst_n_1147,quad_inst_n_1148,quad_inst_n_1149,quad_inst_n_1150,quad_inst_n_1151,quad_inst_n_1152,quad_inst_n_1153,quad_inst_n_1154,quad_inst_n_1155,quad_inst_n_1156,quad_inst_n_1157,quad_inst_n_1158,quad_inst_n_1159,quad_inst_n_1160}),
        .DEBUGTRACETVALID(quad_inst_n_287),
        .GPI({gpi[31:8],gpi_to_gt_int}),
        .GPO({gpo[31:8],gpoToLogic}),
        .GTPOWERGOOD(gtpowergood_int),
        .HSCLK0_LCPLLFBCLKLOST(quad_inst_n_289),
        .HSCLK0_LCPLLFBDIV({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK0_LCPLLGTGREFCLK(1'b0),
        .HSCLK0_LCPLLGTREFCLK0(GT_REFCLK0),
        .HSCLK0_LCPLLGTREFCLK1(1'b0),
        .HSCLK0_LCPLLLOCK(hsclk0_lcplllock),
        .HSCLK0_LCPLLNORTHREFCLK0(1'b0),
        .HSCLK0_LCPLLNORTHREFCLK1(1'b0),
        .HSCLK0_LCPLLPD(1'b0),
        .HSCLK0_LCPLLREFCLKLOST(quad_inst_n_291),
        .HSCLK0_LCPLLREFCLKMONITOR(quad_inst_n_292),
        .HSCLK0_LCPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .HSCLK0_LCPLLRESET(1'b0),
        .HSCLK0_LCPLLRESETBYPASSMODE(1'b0),
        .HSCLK0_LCPLLRESETMASK({1'b1,1'b1}),
        .HSCLK0_LCPLLSDMDATA({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .HSCLK0_LCPLLSDMTOGGLE(1'b0),
        .HSCLK0_LCPLLSOUTHREFCLK0(1'b0),
        .HSCLK0_LCPLLSOUTHREFCLK1(1'b0),
        .HSCLK0_RPLLFBCLKLOST(quad_inst_n_293),
        .HSCLK0_RPLLFBDIV({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK0_RPLLGTGREFCLK(1'b0),
        .HSCLK0_RPLLGTREFCLK0(1'b0),
        .HSCLK0_RPLLGTREFCLK1(1'b0),
        .HSCLK0_RPLLLOCK(quad_inst_n_294),
        .HSCLK0_RPLLNORTHREFCLK0(1'b0),
        .HSCLK0_RPLLNORTHREFCLK1(1'b0),
        .HSCLK0_RPLLPD(1'b0),
        .HSCLK0_RPLLREFCLKLOST(quad_inst_n_295),
        .HSCLK0_RPLLREFCLKMONITOR(quad_inst_n_296),
        .HSCLK0_RPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .HSCLK0_RPLLRESET(1'b0),
        .HSCLK0_RPLLRESETBYPASSMODE(1'b0),
        .HSCLK0_RPLLRESETMASK({1'b1,1'b1}),
        .HSCLK0_RPLLSDMDATA({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK0_RPLLSDMTOGGLE(1'b0),
        .HSCLK0_RPLLSOUTHREFCLK0(1'b0),
        .HSCLK0_RPLLSOUTHREFCLK1(1'b0),
        .HSCLK0_RXRECCLKOUT0(quad_inst_n_297),
        .HSCLK0_RXRECCLKOUT1(quad_inst_n_298),
        .HSCLK0_RXRECCLKSEL({quad_inst_n_1209,quad_inst_n_1210}),
        .HSCLK1_LCPLLFBCLKLOST(quad_inst_n_299),
        .HSCLK1_LCPLLFBDIV({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK1_LCPLLGTGREFCLK(1'b0),
        .HSCLK1_LCPLLGTREFCLK0(1'b0),
        .HSCLK1_LCPLLGTREFCLK1(1'b0),
        .HSCLK1_LCPLLLOCK(quad_inst_n_300),
        .HSCLK1_LCPLLNORTHREFCLK0(1'b0),
        .HSCLK1_LCPLLNORTHREFCLK1(1'b0),
        .HSCLK1_LCPLLPD(1'b0),
        .HSCLK1_LCPLLREFCLKLOST(quad_inst_n_301),
        .HSCLK1_LCPLLREFCLKMONITOR(quad_inst_n_302),
        .HSCLK1_LCPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .HSCLK1_LCPLLRESET(1'b0),
        .HSCLK1_LCPLLRESETBYPASSMODE(1'b0),
        .HSCLK1_LCPLLRESETMASK({1'b1,1'b1}),
        .HSCLK1_LCPLLSDMDATA({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .HSCLK1_LCPLLSDMTOGGLE(1'b0),
        .HSCLK1_LCPLLSOUTHREFCLK0(1'b0),
        .HSCLK1_LCPLLSOUTHREFCLK1(1'b0),
        .HSCLK1_RPLLFBCLKLOST(quad_inst_n_303),
        .HSCLK1_RPLLFBDIV({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK1_RPLLGTGREFCLK(1'b0),
        .HSCLK1_RPLLGTREFCLK0(1'b0),
        .HSCLK1_RPLLGTREFCLK1(1'b0),
        .HSCLK1_RPLLLOCK(quad_inst_n_304),
        .HSCLK1_RPLLNORTHREFCLK0(1'b0),
        .HSCLK1_RPLLNORTHREFCLK1(1'b0),
        .HSCLK1_RPLLPD(1'b0),
        .HSCLK1_RPLLREFCLKLOST(quad_inst_n_305),
        .HSCLK1_RPLLREFCLKMONITOR(quad_inst_n_306),
        .HSCLK1_RPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .HSCLK1_RPLLRESET(1'b0),
        .HSCLK1_RPLLRESETBYPASSMODE(1'b0),
        .HSCLK1_RPLLRESETMASK({1'b1,1'b1}),
        .HSCLK1_RPLLSDMDATA({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .HSCLK1_RPLLSDMTOGGLE(1'b0),
        .HSCLK1_RPLLSOUTHREFCLK0(1'b0),
        .HSCLK1_RPLLSOUTHREFCLK1(1'b0),
        .HSCLK1_RXRECCLKOUT0(quad_inst_n_307),
        .HSCLK1_RXRECCLKOUT1(quad_inst_n_308),
        .HSCLK1_RXRECCLKSEL({quad_inst_n_1211,quad_inst_n_1212}),
        .M0_AXIS_TDATA(NLW_quad_inst_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_quad_inst_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(1'b0),
        .M0_AXIS_TVALID(NLW_quad_inst_M0_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_quad_inst_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_quad_inst_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(1'b0),
        .M1_AXIS_TVALID(NLW_quad_inst_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_quad_inst_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_quad_inst_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_quad_inst_M2_AXIS_TVALID_UNCONNECTED),
        .MSTRXRESET({1'b0,1'b0,1'b0,1'b0}),
        .MSTRXRESETDONE(mstrxresetdone_int),
        .MSTTXRESET({1'b0,1'b0,1'b0,1'b0}),
        .MSTTXRESETDONE(msttxresetdone_int),
        .PCIELINKREACHTARGET(1'b0),
        .PCIELTSSM({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPENORTHIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPENORTHOUT({quad_inst_n_1635,quad_inst_n_1636,quad_inst_n_1637,quad_inst_n_1638,quad_inst_n_1639,quad_inst_n_1640}),
        .PIPESOUTHIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPESOUTHOUT({quad_inst_n_1641,quad_inst_n_1642,quad_inst_n_1643,quad_inst_n_1644,quad_inst_n_1645,quad_inst_n_1646}),
        .RCALENB(1'b0),
        .REFCLK0_CLKTESTSIG(1'b0),
        .REFCLK0_CLKTESTSIGINT(quad_inst_n_315),
        .REFCLK0_GTREFCLKPD(1'b0),
        .REFCLK0_GTREFCLKPDINT(quad_inst_n_316),
        .REFCLK1_CLKTESTSIG(1'b0),
        .REFCLK1_CLKTESTSIGINT(quad_inst_n_317),
        .REFCLK1_GTREFCLKPD(1'b0),
        .REFCLK1_GTREFCLKPDINT(quad_inst_n_318),
        .RESETDONE_NORTHIN({1'b0,1'b0}),
        .RESETDONE_NORTHOUT({quad_inst_n_1213,quad_inst_n_1214}),
        .RESETDONE_SOUTHIN({1'b0,1'b0}),
        .RESETDONE_SOUTHOUT({quad_inst_n_1215,quad_inst_n_1216}),
        .RXMARGINCLK(1'b0),
        .RXMARGINREQACK(quad_inst_n_319),
        .RXMARGINREQCMD({1'b0,1'b0,1'b0,1'b0}),
        .RXMARGINREQLANENUM({1'b0,1'b0}),
        .RXMARGINREQPAYLD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .RXMARGINREQREQ(1'b0),
        .RXMARGINRESACK(1'b0),
        .RXMARGINRESCMD({quad_inst_n_1571,quad_inst_n_1572,quad_inst_n_1573,quad_inst_n_1574}),
        .RXMARGINRESLANENUM({quad_inst_n_1217,quad_inst_n_1218}),
        .RXMARGINRESPAYLD({quad_inst_n_1751,quad_inst_n_1752,quad_inst_n_1753,quad_inst_n_1754,quad_inst_n_1755,quad_inst_n_1756,quad_inst_n_1757,quad_inst_n_1758}),
        .RXMARGINRESREQ(quad_inst_n_320),
        .RXPINORTHIN({1'b0,1'b0,1'b0,1'b0}),
        .RXPINORTHOUT({quad_inst_n_1575,quad_inst_n_1576,quad_inst_n_1577,quad_inst_n_1578}),
        .RXPISOUTHIN({1'b0,1'b0,1'b0,1'b0}),
        .RXPISOUTHOUT({quad_inst_n_1579,quad_inst_n_1580,quad_inst_n_1581,quad_inst_n_1582}),
        .S0_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXIS_TLAST(1'b0),
        .S0_AXIS_TREADY(NLW_quad_inst_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXIS_TLAST(1'b0),
        .S1_AXIS_TREADY(NLW_quad_inst_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(1'b0),
        .S2_AXIS_TDATA({1'b0,cmd_to_axi[30:28],1'b0,cmd_to_axi[26:24],1'b0,cmd_to_axi[22:20],1'b0,cmd_to_axi[18:0]}),
        .S2_AXIS_TLAST(quad_inst_i_1_n_0),
        .S2_AXIS_TREADY(s2_axis_tready),
        .S2_AXIS_TVALID(tvalid_r),
        .TRIGACKIN0(quad_inst_n_324),
        .TRIGACKOUT0(1'b0),
        .TRIGIN0(1'b0),
        .TRIGOUT0(quad_inst_n_325),
        .TXPINORTHIN({1'b0,1'b0,1'b0,1'b0}),
        .TXPINORTHOUT({quad_inst_n_1583,quad_inst_n_1584,quad_inst_n_1585,quad_inst_n_1586}),
        .TXPISOUTHIN({1'b0,1'b0,1'b0,1'b0}),
        .TXPISOUTHOUT({quad_inst_n_1587,quad_inst_n_1588,quad_inst_n_1589,quad_inst_n_1590}),
        .UBENABLE(1'b1),
        .UBINTERRUPT(quad_inst_n_326),
        .UBINTR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .UBIOLMBRST(1'b0),
        .UBMBRST(1'b0),
        .UBRXUART(1'b0),
        .UBTXUART(quad_inst_n_327),
        .UNCORRECTERR(quad_inst_n_328));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'h02FF0200)) 
    quad_inst_i_1
       (.I0(\state_reg[0]_bret__1_n_0 ),
        .I1(\state_reg[0]_bret__0_n_0 ),
        .I2(\state_reg[0]_bret_n_0 ),
        .I3(\state_reg[0]_bret__3_n_0 ),
        .I4(\state_reg[0]_bret__2_n_0 ),
        .O(quad_inst_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \state[0]_bret__0_i_1 
       (.I0(\state_reg[0]_bret__1_n_0 ),
        .I1(\state_reg[0]_bret__0_n_0 ),
        .I2(\state_reg[0]_bret_n_0 ),
        .O(\state[0]_bret__0_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \state[1]_i_2 
       (.I0(\state_reg[0]_bret__1_n_0 ),
        .I1(\state_reg[0]_bret__0_n_0 ),
        .I2(\state_reg[0]_bret_n_0 ),
        .I3(state),
        .O(\state[1]_i_2_n_0 ));
  FDRE \state_reg[0]_bret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(state),
        .Q(\state_reg[0]_bret_n_0 ),
        .R(p_0_in));
  FDRE \state_reg[0]_bret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\state[0]_bret__0_i_1_n_0 ),
        .Q(\state_reg[0]_bret__0_n_0 ),
        .R(p_0_in));
  FDRE \state_reg[0]_bret__1 
       (.C(apb3clk),
        .CE(1'b1),
        .D(s2_axis_tready),
        .Q(\state_reg[0]_bret__1_n_0 ),
        .R(p_0_in));
  FDRE \state_reg[0]_bret__2 
       (.C(apb3clk),
        .CE(1'b1),
        .D(quad_inst_i_1_n_0),
        .Q(\state_reg[0]_bret__2_n_0 ),
        .R(p_0_in));
  FDRE \state_reg[0]_bret__3 
       (.C(apb3clk),
        .CE(1'b1),
        .D(tvalid_r_i_1_n_0),
        .Q(\state_reg[0]_bret__3_n_0 ),
        .R(p_0_in));
  FDRE \state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\state[1]_i_2_n_0 ),
        .Q(state),
        .R(p_0_in));
  LUT4 #(
    .INIT(16'hFDFF)) 
    tvalid_r_i_1
       (.I0(\state_reg[0]_bret__1_n_0 ),
        .I1(\state_reg[0]_bret__0_n_0 ),
        .I2(\state_reg[0]_bret_n_0 ),
        .I3(state),
        .O(tvalid_r_i_1_n_0));
  LUT4 #(
    .INIT(16'h00FD)) 
    tvalid_r_i_2
       (.I0(\state_reg[0]_bret__1_n_0 ),
        .I1(\state_reg[0]_bret__0_n_0 ),
        .I2(\state_reg[0]_bret_n_0 ),
        .I3(state),
        .O(tvalid_r_i_2_n_0));
  FDRE tvalid_r_reg
       (.C(apb3clk),
        .CE(tvalid_r_i_1_n_0),
        .D(tvalid_r_i_2_n_0),
        .Q(tvalid_r),
        .R(p_0_in));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__25 u_ch0_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch0_pcsrsvdout(ch0_pcsrsvdout[10]),
        .src_in(ch0_pcsrsvdout_int[10]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__29 u_ch0_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch0_pcsrsvdout(ch0_pcsrsvdout[11]),
        .src_in(ch0_pcsrsvdout_int[11]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__21 u_ch0_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .src_in(mstrxresetdone_int[0]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__17 u_ch0_msttxresetdone
       (.apb3clk(apb3clk),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .src_in(msttxresetdone_int[0]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__5 u_ch0_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .src_in(ch0_rxpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__13 u_ch0_rxresetdone
       (.apb3clk(apb3clk),
        .ch0_rxresetdone(ch0_rxresetdone),
        .src_in(ch0_rxresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__1 u_ch0_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .src_in(ch0_txpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__9 u_ch0_txresetdone
       (.apb3clk(apb3clk),
        .ch0_txresetdone(ch0_txresetdone),
        .src_in(ch0_txresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__26 u_ch1_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch1_pcsrsvdout(ch1_pcsrsvdout[10]),
        .src_in(ch1_pcsrsvdout_int[10]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__30 u_ch1_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch1_pcsrsvdout(ch1_pcsrsvdout[11]),
        .src_in(ch1_pcsrsvdout_int[11]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__22 u_ch1_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch1_rxmstresetdone(ch1_rxmstresetdone),
        .src_in(mstrxresetdone_int[1]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__18 u_ch1_msttxresetdone
       (.apb3clk(apb3clk),
        .ch1_txmstresetdone(ch1_txmstresetdone),
        .src_in(msttxresetdone_int[1]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__6 u_ch1_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch1_rxpmaresetdone(ch1_rxpmaresetdone),
        .src_in(ch1_rxpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__14 u_ch1_rxresetdone
       (.apb3clk(apb3clk),
        .ch1_rxresetdone(ch1_rxresetdone),
        .src_in(ch1_rxresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__2 u_ch1_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch1_txpmaresetdone(ch1_txpmaresetdone),
        .src_in(ch1_txpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__10 u_ch1_txresetdone
       (.apb3clk(apb3clk),
        .ch1_txresetdone(ch1_txresetdone),
        .src_in(ch1_txresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__27 u_ch2_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch2_pcsrsvdout(ch2_pcsrsvdout[10]),
        .src_in(ch2_pcsrsvdout_int[10]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__31 u_ch2_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch2_pcsrsvdout(ch2_pcsrsvdout[11]),
        .src_in(ch2_pcsrsvdout_int[11]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__23 u_ch2_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch2_rxmstresetdone(ch2_rxmstresetdone),
        .src_in(mstrxresetdone_int[2]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__19 u_ch2_msttxresetdone
       (.apb3clk(apb3clk),
        .ch2_txmstresetdone(ch2_txmstresetdone),
        .src_in(msttxresetdone_int[2]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__7 u_ch2_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch2_rxpmaresetdone(ch2_rxpmaresetdone),
        .src_in(ch2_rxpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__15 u_ch2_rxresetdone
       (.apb3clk(apb3clk),
        .ch2_rxresetdone(ch2_rxresetdone),
        .src_in(ch2_rxresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__3 u_ch2_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch2_txpmaresetdone(ch2_txpmaresetdone),
        .src_in(ch2_txpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__11 u_ch2_txresetdone
       (.apb3clk(apb3clk),
        .ch2_txresetdone(ch2_txresetdone),
        .src_in(ch2_txresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__28 u_ch3_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch3_pcsrsvdout(ch3_pcsrsvdout[10]),
        .src_in(ch3_pcsrsvdout_int[10]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone u_ch3_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch3_pcsrsvdout(ch3_pcsrsvdout[11]),
        .src_in(ch3_pcsrsvdout_int[11]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__24 u_ch3_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch3_rxmstresetdone(ch3_rxmstresetdone),
        .src_in(mstrxresetdone_int[3]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__20 u_ch3_msttxresetdone
       (.apb3clk(apb3clk),
        .ch3_txmstresetdone(ch3_txmstresetdone),
        .src_in(msttxresetdone_int[3]));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__8 u_ch3_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch3_rxpmaresetdone(ch3_rxpmaresetdone),
        .src_in(ch3_rxpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__16 u_ch3_rxresetdone
       (.apb3clk(apb3clk),
        .ch3_rxresetdone(ch3_rxresetdone),
        .src_in(ch3_rxresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__4 u_ch3_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch3_txpmaresetdone(ch3_txpmaresetdone),
        .src_in(ch3_txpmaresetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_gtyp_rstdone__xdcDup__12 u_ch3_txresetdone
       (.apb3clk(apb3clk),
        .ch3_txresetdone(ch3_txresetdone),
        .src_in(ch3_txresetdone_int));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function
   (out,
    gpo,
    rrst,
    GPI,
    p_0_in,
    Q,
    apb3clk,
    gpi,
    \rrst_r_reg[3]_0 ,
    gtpowergood_int,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output rrst;
  output [0:0]GPI;
  output p_0_in;
  output [2:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input [0:0]\rrst_r_reg[3]_0 ;
  input gtpowergood_int;
  input [3:0]D;

  wire \Command[0]_i_1__6_n_0 ;
  wire \Command[1]_i_1__6_n_0 ;
  wire \Command[2]_i_1__6_n_0 ;
  wire \Command[2]_i_2__2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__6_n_0 ;
  wire \arb_state[1]_i_4__5_n_0 ;
  wire \arb_state[1]_i_5__5_n_0 ;
  wire \arb_state[3]_i_2__6_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__6_n_0 ;
  wire \counter[1]_i_1__6_n_0 ;
  wire \counter[2]_i_1__6_n_0 ;
  wire \counter[3]_i_1__6_n_0 ;
  wire \counter[4]_i_1__6_n_0 ;
  wire \counter[5]_i_1__6_n_0 ;
  wire \counter[6]_i_1__6_n_0 ;
  wire \counter[7]_i_2__6_n_0 ;
  wire \counter[7]_i_3__6_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__6_n_0 ;
  wire \en[0][1]_i_1__6_n_0 ;
  wire \en[1][0]_i_1__6_n_0 ;
  wire \en[1][0]_i_2__6_n_0 ;
  wire \en[1][1]_i_1__2_n_0 ;
  wire \en[1][1]_i_2__5_n_0 ;
  wire \en[2][0]_i_1__6_n_0 ;
  wire \en[2][0]_i_2__6_n_0 ;
  wire \en[2][1]_i_1__2_n_0 ;
  wire \en[2][1]_i_2__5_n_0 ;
  wire \en[3][0]_i_1__6_n_0 ;
  wire \en[3][0]_i_2__6_n_0 ;
  wire \en[3][1]_i_1__2_n_0 ;
  wire \en[3][1]_i_2__2_n_0 ;
  wire \en[4][0]_i_1__6_n_0 ;
  wire \en[4][0]_i_2__6_n_0 ;
  wire \en[4][1]_i_1__6_n_0 ;
  wire \en[4][1]_i_2__6_n_0 ;
  wire \en[5][0]_i_1__6_n_0 ;
  wire \en[5][0]_i_2__6_n_0 ;
  wire \en[5][1]_i_1__6_n_0 ;
  wire \en[5][1]_i_2__2_n_0 ;
  wire \en[6][0]_i_1__6_n_0 ;
  wire \en[6][0]_i_2__6_n_0 ;
  wire \en[6][1]_i_1__6_n_0 ;
  wire \en[6][1]_i_2__6_n_0 ;
  wire \en[7][0]_i_1__6_n_0 ;
  wire \en[7][0]_i_2__6_n_0 ;
  wire \en[7][1]_i_1__6_n_0 ;
  wire \en[7][1]_i_2__6_n_0 ;
  wire [1:0]en__2;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_6;
  wire gpi_i_1__6_n_0;
  wire gpi_i_2__6_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_5;
  wire gtpowergood_int;
  wire idx;
  wire \idx[0]_i_1__6_n_0 ;
  wire \idx[1]_fret__0_i_1__6_n_0 ;
  wire \idx[1]_fret_i_1__6_n_0 ;
  wire \idx[1]_i_1__6_n_0 ;
  wire \idx[2]_i_2__2_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__6_n_0;
  wire needService_i_2__6_n_0;
  wire needService_i_3__2_n_0;
  wire p_0_in;
  wire [3:0]p_0_in_4;
  wire [4:1]p_0_in__0;
  wire p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire [2:0]rrst_r;
  wire [0:0]\rrst_r_reg[3]_0 ;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__2_n_0 ;
  wire \rxrate_counter[1]_i_1__2_n_0 ;
  wire \rxrate_counter[2]_i_1__2_n_0 ;
  wire \rxrate_counter[3]_i_2__2_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__2_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__2_n_0 ;
  wire \rxrate_state[1]_i_3__2_n_0 ;
  wire \rxrate_state[1]_i_4__2_n_0 ;
  wire \rxrate_state[2]_i_1__2_n_0 ;
  wire \rxrate_state[3]_i_2__2_n_0 ;
  wire \rxrate_state[3]_i_3__2_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__6_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__6 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__2 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[0]_i_1__6_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[1]_i_1__6_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[2]_i_2__2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    FSM_sequential_gpoState_i_1
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_5));
  (* FSM_ENCODED_STATES = "iSTATE:0,iSTATE0:1" *) 
  FDRE FSM_sequential_gpoState_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_5),
        .Q(gpo),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__198 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(1'b0));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__6 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__0[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__5 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg[1]_fret_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__5 
       (.I0(\arb_state[1]_i_4__5_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__5_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__5 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_0 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_1 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_4__5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_5__5 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_3 [0]),
        .O(\arb_state[1]_i_5__5_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__6_n_0 ),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__6_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__6_n_0 ),
        .O(\counter[5]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__6 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__6_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__6 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__6 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__6_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__6 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__6_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__6_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__6 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__2 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT5 #(
    .INIT(32'hFEFF0000)) 
    \en[0][1]_i_1__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][0]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[1][1]_i_1__2 
       (.I0(\en[1][0]_i_1__6_n_0 ),
        .I1(\en_reg[1]_2 [1]),
        .I2(\en[1][1]_i_2__5_n_0 ),
        .O(\en[1][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][0]_i_1__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[2][1]_i_1__2 
       (.I0(\en[2][0]_i_1__6_n_0 ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\en[2][1]_i_2__5_n_0 ),
        .O(\en[2][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][0]_i_1__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[3][1]_i_1__2 
       (.I0(\en[3][0]_i_1__6_n_0 ),
        .I1(\en_reg_n_0_[3][1] ),
        .I2(\en[3][1]_i_2__2_n_0 ),
        .O(\en[3][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][0]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__6 
       (.I0(\en[4][0]_i_1__6_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__6_n_0 ),
        .O(\en[4][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][0]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__6 
       (.I0(\en[5][0]_i_1__6_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__2_n_0 ),
        .O(\en[5][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_1 [0]),
        .I5(\en_reg[5]_1 [1]),
        .O(\en[5][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][0]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_2__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__6 
       (.I0(\en[6][0]_i_1__6_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__6_n_0 ),
        .O(\en[6][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][0]_i_1__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in__1),
        .O(\en[7][0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][0]_i_3__2 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__6 
       (.I0(\en[7][0]_i_1__6_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__6_n_0 ),
        .O(\en[7][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__6_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__6_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__6_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__6_n_0 ),
        .D(\en[1][0]_i_2__6_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__2_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__6_n_0 ),
        .D(\en[2][0]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__6_n_0 ),
        .D(\en[3][0]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__6_n_0 ),
        .D(\en[4][0]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__6_n_0 ),
        .D(\en[5][0]_i_2__6_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__6_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__6_n_0 ),
        .D(\en[6][0]_i_2__6_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__6_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__6_n_0 ),
        .D(\en[7][0]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__6
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__6_n_0),
        .I4(gpi_6),
        .I5(GPI),
        .O(gpi_i_1__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__6
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__2
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_6));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__6_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFEEF0F0)) 
    \idx[0]_i_1__6 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .I4(idx),
        .O(\idx[0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret__0_i_1__6 
       (.I0(\en[7][1]_i_1__6_n_0 ),
        .I1(\en[6][1]_i_1__6_n_0 ),
        .I2(\idx[1]_i_1__6_n_0 ),
        .I3(\en[5][1]_i_1__6_n_0 ),
        .I4(\idx[0]_i_1__6_n_0 ),
        .I5(\en[4][1]_i_1__6_n_0 ),
        .O(\idx[1]_fret__0_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret_i_1__6 
       (.I0(\en[3][1]_i_1__2_n_0 ),
        .I1(\en[2][1]_i_1__2_n_0 ),
        .I2(\idx[1]_i_1__6_n_0 ),
        .I3(\en[1][1]_i_1__2_n_0 ),
        .I4(\idx[0]_i_1__6_n_0 ),
        .I5(\en[0][1]_i_1__6_n_0 ),
        .O(\idx[1]_fret_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hEFFEEEEEFF00FF00)) 
    \idx[1]_i_1__6 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .I5(idx),
        .O(\idx[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__6 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__6_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__6_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__6_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__6_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_1__6
       (.I0(needService_i_2__6_n_0),
        .I1(\en_reg[0]_3 [1]),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg_n_0_[7][0] ),
        .I4(needService_i_3__2_n_0),
        .O(needService_i_1__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__6
       (.I0(\en_reg[6]_0 [1]),
        .I1(\en_reg[6]_0 [0]),
        .I2(\en_reg[5]_1 [1]),
        .I3(\en_reg[5]_1 [0]),
        .O(needService_i_2__6_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__2
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_2 [0]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__2_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__6_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in__1),
        .R(rrst));
  FDPE \rrst_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_0_in),
        .Q(rrst_r[0]));
  FDPE \rrst_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[0]),
        .PRE(p_0_in),
        .Q(rrst_r[1]));
  FDPE \rrst_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[1]),
        .PRE(p_0_in),
        .Q(rrst_r[2]));
  FDPE \rrst_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[2]),
        .PRE(p_0_in),
        .Q(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__2_n_0 ),
        .O(\rxrate_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__2 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__2_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__2_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__2
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__2_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__2_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__2 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__2_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in_4[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__2 
       (.I0(\rxrate_state[1]_i_2__2_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__2_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in_4[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__2 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__2_n_0 ),
        .I5(\rxrate_state[1]_i_4__2_n_0 ),
        .O(\rxrate_state[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__2 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__2 
       (.I0(\rxrate_state[3]_i_2__2_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__2 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in_4[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__2_n_0 ),
        .O(\rxrate_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__2 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__2_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in_4[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in_4[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__2_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in_4[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h7)) 
    \state[1]_i_1 
       (.I0(\rrst_r_reg[3]_0 ),
        .I1(gtpowergood_int),
        .O(p_0_in));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__190 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__191 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__192 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__193 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__194 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__195 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__196 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__197 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(1'b0));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__1
   (out,
    gpo,
    GPI,
    Q,
    ch0_rxrate,
    apb3clk,
    gpi,
    ch0_rxmstreset,
    ch0_rxmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input [7:0]ch0_rxrate;
  input apb3clk;
  input [0:0]gpi;
  input ch0_rxmstreset;
  input ch0_rxmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__3_n_0 ;
  wire \Command[1]_i_1__3_n_0 ;
  wire \Command[2]_i_1__3_n_0 ;
  wire \Command[2]_i_2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__3_n_0 ;
  wire \arb_state[1]_i_4__2_n_0 ;
  wire \arb_state[1]_i_5__2_n_0 ;
  wire \arb_state[3]_i_2__3_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire [7:0]ch0_rxrate;
  wire counter;
  wire \counter[0]_i_1__3_n_0 ;
  wire \counter[1]_i_1__3_n_0 ;
  wire \counter[2]_i_1__3_n_0 ;
  wire \counter[3]_i_1__3_n_0 ;
  wire \counter[4]_i_1__3_n_0 ;
  wire \counter[5]_i_1__3_n_0 ;
  wire \counter[6]_i_1__3_n_0 ;
  wire \counter[7]_i_2__3_n_0 ;
  wire \counter[7]_i_3__3_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__3_n_0 ;
  wire \en[0][1]_i_1__3_n_0 ;
  wire \en[1][0]_i_1__3_n_0 ;
  wire \en[1][0]_i_2__3_n_0 ;
  wire \en[1][1]_i_1_n_0 ;
  wire \en[1][1]_i_2__2_n_0 ;
  wire \en[2][0]_i_1__3_n_0 ;
  wire \en[2][0]_i_2__3_n_0 ;
  wire \en[2][1]_i_1_n_0 ;
  wire \en[2][1]_i_2__2_n_0 ;
  wire \en[3][0]_i_1__3_n_0 ;
  wire \en[3][0]_i_2__3_n_0 ;
  wire \en[3][1]_i_1_n_0 ;
  wire \en[3][1]_i_2_n_0 ;
  wire \en[4][0]_i_1__3_n_0 ;
  wire \en[4][0]_i_2__3_n_0 ;
  wire \en[4][1]_i_1__3_n_0 ;
  wire \en[4][1]_i_2__3_n_0 ;
  wire \en[5][0]_i_1__3_n_0 ;
  wire \en[5][0]_i_2__3_n_0 ;
  wire \en[5][1]_i_1__3_n_0 ;
  wire \en[5][1]_i_2_n_0 ;
  wire \en[6][0]_i_1__3_n_0 ;
  wire \en[6][0]_i_2__3_n_0 ;
  wire \en[6][1]_i_1__3_n_0 ;
  wire \en[6][1]_i_2__3_n_0 ;
  wire \en[7][0]_i_1__3_n_0 ;
  wire \en[7][0]_i_2__3_n_0 ;
  wire \en[7][1]_i_1__3_n_0 ;
  wire \en[7][1]_i_2__3_n_0 ;
  wire [1:0]en__2;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__3_n_0;
  wire gpi_i_2__3_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1__3_n_0 ;
  wire \idx[1]_fret__0_i_1__3_n_0 ;
  wire \idx[1]_fret_i_1__3_n_0 ;
  wire \idx[1]_i_1__3_n_0 ;
  wire \idx[2]_i_2_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__3_n_0;
  wire needService_i_2__3_n_0;
  wire needService_i_3_n_0;
  wire [3:0]p_0_in;
  wire [4:1]p_0_in__0;
  wire p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1_n_0 ;
  wire \rxrate_counter[1]_i_1_n_0 ;
  wire \rxrate_counter[2]_i_1_n_0 ;
  wire \rxrate_counter[3]_i_2_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2_n_0 ;
  wire \rxrate_state[1]_i_3_n_0 ;
  wire \rxrate_state[1]_i_4_n_0 ;
  wire \rxrate_state[2]_i_1_n_0 ;
  wire \rxrate_state[3]_i_2_n_0 ;
  wire \rxrate_state[3]_i_3_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__3_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__3 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[2]_i_2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__168 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(ch0_rxmstreset));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__169 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(ch0_rxmstdatapathreset));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__22 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__3 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__0[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__2 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg[1]_fret_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__2 
       (.I0(\arb_state[1]_i_4__2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__2_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__2 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_0 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_1 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_5__2 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_3 [0]),
        .O(\arb_state[1]_i_5__2_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__3_n_0 ),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__3_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__3_n_0 ),
        .O(\counter[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__3 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__3 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__3 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__3 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__3_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__3_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__3 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT5 #(
    .INIT(32'hFEFF0000)) 
    \en[0][1]_i_1__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][0]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[1][1]_i_1 
       (.I0(\en[1][0]_i_1__3_n_0 ),
        .I1(\en_reg[1]_2 [1]),
        .I2(\en[1][1]_i_2__2_n_0 ),
        .O(\en[1][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][0]_i_1__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[2][1]_i_1 
       (.I0(\en[2][0]_i_1__3_n_0 ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\en[2][1]_i_2__2_n_0 ),
        .O(\en[2][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][0]_i_1__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[3][1]_i_1 
       (.I0(\en[3][0]_i_1__3_n_0 ),
        .I1(\en_reg_n_0_[3][1] ),
        .I2(\en[3][1]_i_2_n_0 ),
        .O(\en[3][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][0]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__3 
       (.I0(\en[4][0]_i_1__3_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__3_n_0 ),
        .O(\en[4][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][0]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__3 
       (.I0(\en[5][0]_i_1__3_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2_n_0 ),
        .O(\en[5][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_1 [0]),
        .I5(\en_reg[5]_1 [1]),
        .O(\en[5][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][0]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__3 
       (.I0(\en[6][0]_i_1__3_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__3_n_0 ),
        .O(\en[6][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][0]_i_1__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in__1),
        .O(\en[7][0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][0]_i_3 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__3 
       (.I0(\en[7][0]_i_1__3_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__3_n_0 ),
        .O(\en[7][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__3_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__3_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__3_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__3_n_0 ),
        .D(\en[1][0]_i_2__3_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__3_n_0 ),
        .D(\en[2][0]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__3_n_0 ),
        .D(\en[3][0]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__3_n_0 ),
        .D(\en[4][0]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__3_n_0 ),
        .D(\en[5][0]_i_2__3_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__3_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__3_n_0 ),
        .D(\en[6][0]_i_2__3_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__3_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__3_n_0 ),
        .D(\en[7][0]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__3
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__3_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__3
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__3_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__3
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT5 #(
    .INIT(32'hEFEEF0F0)) 
    \idx[0]_i_1__3 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .I4(idx),
        .O(\idx[0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret__0_i_1__3 
       (.I0(\en[7][1]_i_1__3_n_0 ),
        .I1(\en[6][1]_i_1__3_n_0 ),
        .I2(\idx[1]_i_1__3_n_0 ),
        .I3(\en[5][1]_i_1__3_n_0 ),
        .I4(\idx[0]_i_1__3_n_0 ),
        .I5(\en[4][1]_i_1__3_n_0 ),
        .O(\idx[1]_fret__0_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret_i_1__3 
       (.I0(\en[3][1]_i_1_n_0 ),
        .I1(\en[2][1]_i_1_n_0 ),
        .I2(\idx[1]_i_1__3_n_0 ),
        .I3(\en[1][1]_i_1_n_0 ),
        .I4(\idx[0]_i_1__3_n_0 ),
        .I5(\en[0][1]_i_1__3_n_0 ),
        .O(\idx[1]_fret_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hEFFEEEEEFF00FF00)) 
    \idx[1]_i_1__3 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .I5(idx),
        .O(\idx[1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__3 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__3_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__3_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__3_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__3_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_1__3
       (.I0(needService_i_2__3_n_0),
        .I1(\en_reg[0]_3 [1]),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg_n_0_[7][0] ),
        .I4(needService_i_3_n_0),
        .O(needService_i_1__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__3
       (.I0(\en_reg[6]_0 [1]),
        .I1(\en_reg[6]_0 [0]),
        .I2(\en_reg[5]_1 [1]),
        .I3(\en_reg[5]_1 [0]),
        .O(needService_i_2__3_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_2 [0]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__3_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in__1),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2_n_0 ),
        .O(\rxrate_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1 
       (.I0(\rxrate_state[1]_i_2_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3_n_0 ),
        .I5(\rxrate_state[1]_i_4_n_0 ),
        .O(\rxrate_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1 
       (.I0(\rxrate_state[3]_i_2_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3_n_0 ),
        .O(\rxrate_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__160 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(ch0_rxrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__161 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(ch0_rxrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__162 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(ch0_rxrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__163 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(ch0_rxrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__164 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(ch0_rxrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__165 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(ch0_rxrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__166 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(ch0_rxrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__167 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(ch0_rxrate[7]));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__2
   (out,
    gpo,
    GPI,
    Q,
    apb3clk,
    gpi,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__4_n_0 ;
  wire \Command[1]_i_1__4_n_0 ;
  wire \Command[2]_i_1__4_n_0 ;
  wire \Command[2]_i_2__0_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__4_n_0 ;
  wire \arb_state[1]_i_4__3_n_0 ;
  wire \arb_state[1]_i_5__3_n_0 ;
  wire \arb_state[3]_i_2__4_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__4_n_0 ;
  wire \counter[1]_i_1__4_n_0 ;
  wire \counter[2]_i_1__4_n_0 ;
  wire \counter[3]_i_1__4_n_0 ;
  wire \counter[4]_i_1__4_n_0 ;
  wire \counter[5]_i_1__4_n_0 ;
  wire \counter[6]_i_1__4_n_0 ;
  wire \counter[7]_i_2__4_n_0 ;
  wire \counter[7]_i_3__4_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__4_n_0 ;
  wire \en[0][1]_i_1__4_n_0 ;
  wire \en[1][0]_i_1__4_n_0 ;
  wire \en[1][0]_i_2__4_n_0 ;
  wire \en[1][1]_i_1__0_n_0 ;
  wire \en[1][1]_i_2__3_n_0 ;
  wire \en[2][0]_i_1__4_n_0 ;
  wire \en[2][0]_i_2__4_n_0 ;
  wire \en[2][1]_i_1__0_n_0 ;
  wire \en[2][1]_i_2__3_n_0 ;
  wire \en[3][0]_i_1__4_n_0 ;
  wire \en[3][0]_i_2__4_n_0 ;
  wire \en[3][1]_i_1__0_n_0 ;
  wire \en[3][1]_i_2__0_n_0 ;
  wire \en[4][0]_i_1__4_n_0 ;
  wire \en[4][0]_i_2__4_n_0 ;
  wire \en[4][1]_i_1__4_n_0 ;
  wire \en[4][1]_i_2__4_n_0 ;
  wire \en[5][0]_i_1__4_n_0 ;
  wire \en[5][0]_i_2__4_n_0 ;
  wire \en[5][1]_i_1__4_n_0 ;
  wire \en[5][1]_i_2__0_n_0 ;
  wire \en[6][0]_i_1__4_n_0 ;
  wire \en[6][0]_i_2__4_n_0 ;
  wire \en[6][1]_i_1__4_n_0 ;
  wire \en[6][1]_i_2__4_n_0 ;
  wire \en[7][0]_i_1__4_n_0 ;
  wire \en[7][0]_i_2__4_n_0 ;
  wire \en[7][1]_i_1__4_n_0 ;
  wire \en[7][1]_i_2__4_n_0 ;
  wire [1:0]en__2;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__4_n_0;
  wire gpi_i_2__4_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1__4_n_0 ;
  wire \idx[1]_fret__0_i_1__4_n_0 ;
  wire \idx[1]_fret_i_1__4_n_0 ;
  wire \idx[1]_i_1__4_n_0 ;
  wire \idx[2]_i_2__0_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__4_n_0;
  wire needService_i_2__4_n_0;
  wire needService_i_3__0_n_0;
  wire [3:0]p_0_in;
  wire [4:1]p_0_in__0;
  wire p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__0_n_0 ;
  wire \rxrate_counter[1]_i_1__0_n_0 ;
  wire \rxrate_counter[2]_i_1__0_n_0 ;
  wire \rxrate_counter[3]_i_2__0_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__0_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__0_n_0 ;
  wire \rxrate_state[1]_i_3__0_n_0 ;
  wire \rxrate_state[1]_i_4__0_n_0 ;
  wire \rxrate_state[2]_i_1__0_n_0 ;
  wire \rxrate_state[3]_i_2__0_n_0 ;
  wire \rxrate_state[3]_i_3__0_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__4 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__0 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__0_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[2]_i_2__0_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__178 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(1'b0));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__179 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__23 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__4 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__0[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__3 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg[1]_fret_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__3 
       (.I0(\arb_state[1]_i_4__3_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__3_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__3 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_0 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_1 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_4__3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_5__3 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_3 [0]),
        .O(\arb_state[1]_i_5__3_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__4_n_0 ),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__4_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__4_n_0 ),
        .O(\counter[5]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__4 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__4_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__4 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__4 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__4_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__4 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__4_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__4_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__4 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__0 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT5 #(
    .INIT(32'hFEFF0000)) 
    \en[0][1]_i_1__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][0]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[1][1]_i_1__0 
       (.I0(\en[1][0]_i_1__4_n_0 ),
        .I1(\en_reg[1]_2 [1]),
        .I2(\en[1][1]_i_2__3_n_0 ),
        .O(\en[1][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][0]_i_1__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[2][1]_i_1__0 
       (.I0(\en[2][0]_i_1__4_n_0 ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\en[2][1]_i_2__3_n_0 ),
        .O(\en[2][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][0]_i_1__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[3][1]_i_1__0 
       (.I0(\en[3][0]_i_1__4_n_0 ),
        .I1(\en_reg_n_0_[3][1] ),
        .I2(\en[3][1]_i_2__0_n_0 ),
        .O(\en[3][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][0]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__4 
       (.I0(\en[4][0]_i_1__4_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__4_n_0 ),
        .O(\en[4][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][0]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__4 
       (.I0(\en[5][0]_i_1__4_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__0_n_0 ),
        .O(\en[5][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_1 [0]),
        .I5(\en_reg[5]_1 [1]),
        .O(\en[5][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][0]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__4 
       (.I0(\en[6][0]_i_1__4_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__4_n_0 ),
        .O(\en[6][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][0]_i_1__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in__1),
        .O(\en[7][0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][0]_i_3__0 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__4 
       (.I0(\en[7][0]_i_1__4_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__4_n_0 ),
        .O(\en[7][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__4_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__4_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__4_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__4_n_0 ),
        .D(\en[1][0]_i_2__4_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__0_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__4_n_0 ),
        .D(\en[2][0]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__4_n_0 ),
        .D(\en[3][0]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__4_n_0 ),
        .D(\en[4][0]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__4_n_0 ),
        .D(\en[5][0]_i_2__4_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__4_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__4_n_0 ),
        .D(\en[6][0]_i_2__4_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__4_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__4_n_0 ),
        .D(\en[7][0]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__4
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__4_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__4
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__0
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__4_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__4
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT5 #(
    .INIT(32'hEFEEF0F0)) 
    \idx[0]_i_1__4 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .I4(idx),
        .O(\idx[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret__0_i_1__4 
       (.I0(\en[7][1]_i_1__4_n_0 ),
        .I1(\en[6][1]_i_1__4_n_0 ),
        .I2(\idx[1]_i_1__4_n_0 ),
        .I3(\en[5][1]_i_1__4_n_0 ),
        .I4(\idx[0]_i_1__4_n_0 ),
        .I5(\en[4][1]_i_1__4_n_0 ),
        .O(\idx[1]_fret__0_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret_i_1__4 
       (.I0(\en[3][1]_i_1__0_n_0 ),
        .I1(\en[2][1]_i_1__0_n_0 ),
        .I2(\idx[1]_i_1__4_n_0 ),
        .I3(\en[1][1]_i_1__0_n_0 ),
        .I4(\idx[0]_i_1__4_n_0 ),
        .I5(\en[0][1]_i_1__4_n_0 ),
        .O(\idx[1]_fret_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hEFFEEEEEFF00FF00)) 
    \idx[1]_i_1__4 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .I5(idx),
        .O(\idx[1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__4 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__0 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__4_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__4_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__4_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__4_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__0_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_1__4
       (.I0(needService_i_2__4_n_0),
        .I1(\en_reg[0]_3 [1]),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg_n_0_[7][0] ),
        .I4(needService_i_3__0_n_0),
        .O(needService_i_1__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__4
       (.I0(\en_reg[6]_0 [1]),
        .I1(\en_reg[6]_0 [0]),
        .I2(\en_reg[5]_1 [1]),
        .I3(\en_reg[5]_1 [0]),
        .O(needService_i_2__4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__0
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_2 [0]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__0_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__4_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in__1),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__0_n_0 ),
        .O(\rxrate_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__0 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__0_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__0_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__0
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__0_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__0_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__0 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__0_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__0 
       (.I0(\rxrate_state[1]_i_2__0_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__0_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__0 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__0_n_0 ),
        .I5(\rxrate_state[1]_i_4__0_n_0 ),
        .O(\rxrate_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__0 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__0 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__0 
       (.I0(\rxrate_state[3]_i_2__0_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__0 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__0 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__0_n_0 ),
        .O(\rxrate_state[3]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__0 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__0_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__0_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__170 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__171 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__172 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__173 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__174 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__175 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__176 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__177 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(1'b0));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_rx_function__xdcDup__3
   (out,
    gpo,
    GPI,
    Q,
    apb3clk,
    gpi,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__5_n_0 ;
  wire \Command[1]_i_1__5_n_0 ;
  wire \Command[2]_i_1__5_n_0 ;
  wire \Command[2]_i_2__1_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__5_n_0 ;
  wire \arb_state[1]_i_4__4_n_0 ;
  wire \arb_state[1]_i_5__4_n_0 ;
  wire \arb_state[3]_i_2__5_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__5_n_0 ;
  wire \counter[1]_i_1__5_n_0 ;
  wire \counter[2]_i_1__5_n_0 ;
  wire \counter[3]_i_1__5_n_0 ;
  wire \counter[4]_i_1__5_n_0 ;
  wire \counter[5]_i_1__5_n_0 ;
  wire \counter[6]_i_1__5_n_0 ;
  wire \counter[7]_i_2__5_n_0 ;
  wire \counter[7]_i_3__5_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__5_n_0 ;
  wire \en[0][1]_i_1__5_n_0 ;
  wire \en[1][0]_i_1__5_n_0 ;
  wire \en[1][0]_i_2__5_n_0 ;
  wire \en[1][1]_i_1__1_n_0 ;
  wire \en[1][1]_i_2__4_n_0 ;
  wire \en[2][0]_i_1__5_n_0 ;
  wire \en[2][0]_i_2__5_n_0 ;
  wire \en[2][1]_i_1__1_n_0 ;
  wire \en[2][1]_i_2__4_n_0 ;
  wire \en[3][0]_i_1__5_n_0 ;
  wire \en[3][0]_i_2__5_n_0 ;
  wire \en[3][1]_i_1__1_n_0 ;
  wire \en[3][1]_i_2__1_n_0 ;
  wire \en[4][0]_i_1__5_n_0 ;
  wire \en[4][0]_i_2__5_n_0 ;
  wire \en[4][1]_i_1__5_n_0 ;
  wire \en[4][1]_i_2__5_n_0 ;
  wire \en[5][0]_i_1__5_n_0 ;
  wire \en[5][0]_i_2__5_n_0 ;
  wire \en[5][1]_i_1__5_n_0 ;
  wire \en[5][1]_i_2__1_n_0 ;
  wire \en[6][0]_i_1__5_n_0 ;
  wire \en[6][0]_i_2__5_n_0 ;
  wire \en[6][1]_i_1__5_n_0 ;
  wire \en[6][1]_i_2__5_n_0 ;
  wire \en[7][0]_i_1__5_n_0 ;
  wire \en[7][0]_i_2__5_n_0 ;
  wire \en[7][1]_i_1__5_n_0 ;
  wire \en[7][1]_i_2__5_n_0 ;
  wire [1:0]en__2;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__5_n_0;
  wire gpi_i_2__5_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1__5_n_0 ;
  wire \idx[1]_fret__0_i_1__5_n_0 ;
  wire \idx[1]_fret_i_1__5_n_0 ;
  wire \idx[1]_i_1__5_n_0 ;
  wire \idx[2]_i_2__1_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__5_n_0;
  wire needService_i_2__5_n_0;
  wire needService_i_3__1_n_0;
  wire [3:0]p_0_in;
  wire [4:1]p_0_in__0;
  wire p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__1_n_0 ;
  wire \rxrate_counter[1]_i_1__1_n_0 ;
  wire \rxrate_counter[2]_i_1__1_n_0 ;
  wire \rxrate_counter[3]_i_2__1_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__1_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__1_n_0 ;
  wire \rxrate_state[1]_i_3__1_n_0 ;
  wire \rxrate_state[1]_i_4__1_n_0 ;
  wire \rxrate_state[2]_i_1__1_n_0 ;
  wire \rxrate_state[3]_i_2__1_n_0 ;
  wire \rxrate_state[3]_i_3__1_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__5_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__5 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__1 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__1_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[0]_i_1__5_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[1]_i_1__5_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[2]_i_2__1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__188 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(1'b0));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__189 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__24 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__5 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__0[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__4 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg[1]_fret_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__4 
       (.I0(\arb_state[1]_i_4__4_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__4_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__4 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_0 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_1 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_4__4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_5__4 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_3 [0]),
        .O(\arb_state[1]_i_5__4_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__5_n_0 ),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__5_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__5_n_0 ),
        .O(\counter[5]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__5 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__5_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__5 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__5 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__5_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__5 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__5_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__5_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__5 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__1 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT5 #(
    .INIT(32'hFEFF0000)) 
    \en[0][1]_i_1__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][0]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[1][1]_i_1__1 
       (.I0(\en[1][0]_i_1__5_n_0 ),
        .I1(\en_reg[1]_2 [1]),
        .I2(\en[1][1]_i_2__4_n_0 ),
        .O(\en[1][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][0]_i_1__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[2][1]_i_1__1 
       (.I0(\en[2][0]_i_1__5_n_0 ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\en[2][1]_i_2__4_n_0 ),
        .O(\en[2][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][0]_i_1__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[3][1]_i_1__1 
       (.I0(\en[3][0]_i_1__5_n_0 ),
        .I1(\en_reg_n_0_[3][1] ),
        .I2(\en[3][1]_i_2__1_n_0 ),
        .O(\en[3][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][0]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__5 
       (.I0(\en[4][0]_i_1__5_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__5_n_0 ),
        .O(\en[4][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][0]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__5 
       (.I0(\en[5][0]_i_1__5_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__1_n_0 ),
        .O(\en[5][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_1 [0]),
        .I5(\en_reg[5]_1 [1]),
        .O(\en[5][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][0]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__5 
       (.I0(\en[6][0]_i_1__5_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__5_n_0 ),
        .O(\en[6][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][0]_i_1__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in__1),
        .O(\en[7][0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][0]_i_3__1 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__5 
       (.I0(\en[7][0]_i_1__5_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__5_n_0 ),
        .O(\en[7][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__5_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__5_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__5_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__5_n_0 ),
        .D(\en[1][0]_i_2__5_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__1_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__5_n_0 ),
        .D(\en[2][0]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__5_n_0 ),
        .D(\en[3][0]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__5_n_0 ),
        .D(\en[4][0]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__5_n_0 ),
        .D(\en[5][0]_i_2__5_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__5_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__5_n_0 ),
        .D(\en[6][0]_i_2__5_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__5_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__5_n_0 ),
        .D(\en[7][0]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__5
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__5_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__5
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__1
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__5_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__5
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT5 #(
    .INIT(32'hEFEEF0F0)) 
    \idx[0]_i_1__5 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .I4(idx),
        .O(\idx[0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret__0_i_1__5 
       (.I0(\en[7][1]_i_1__5_n_0 ),
        .I1(\en[6][1]_i_1__5_n_0 ),
        .I2(\idx[1]_i_1__5_n_0 ),
        .I3(\en[5][1]_i_1__5_n_0 ),
        .I4(\idx[0]_i_1__5_n_0 ),
        .I5(\en[4][1]_i_1__5_n_0 ),
        .O(\idx[1]_fret__0_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \idx[1]_fret_i_1__5 
       (.I0(\en[3][1]_i_1__1_n_0 ),
        .I1(\en[2][1]_i_1__1_n_0 ),
        .I2(\idx[1]_i_1__5_n_0 ),
        .I3(\en[1][1]_i_1__1_n_0 ),
        .I4(\idx[0]_i_1__5_n_0 ),
        .I5(\en[0][1]_i_1__5_n_0 ),
        .O(\idx[1]_fret_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hEFFEEEEEFF00FF00)) 
    \idx[1]_i_1__5 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .I5(idx),
        .O(\idx[1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__5 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__1 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__5_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__5_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__5_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__5_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_1__5
       (.I0(needService_i_2__5_n_0),
        .I1(\en_reg[0]_3 [1]),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg_n_0_[7][0] ),
        .I4(needService_i_3__1_n_0),
        .O(needService_i_1__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__5
       (.I0(\en_reg[6]_0 [1]),
        .I1(\en_reg[6]_0 [0]),
        .I2(\en_reg[5]_1 [1]),
        .I3(\en_reg[5]_1 [0]),
        .O(needService_i_2__5_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__1
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_2 [0]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__1_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__5_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in__1),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__1_n_0 ),
        .O(\rxrate_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__1_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__1_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__1
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__1_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__1_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__1_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__1 
       (.I0(\rxrate_state[1]_i_2__1_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__1_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__1 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__1_n_0 ),
        .I5(\rxrate_state[1]_i_4__1_n_0 ),
        .O(\rxrate_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__1 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__1 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__1 
       (.I0(\rxrate_state[3]_i_2__1_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__1 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__1 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__1_n_0 ),
        .O(\rxrate_state[3]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__1 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__1_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__1_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__180 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__181 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__182 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__183 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__184 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__185 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__186 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__187 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(1'b0));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function
   (out,
    gpo,
    GPI,
    Q,
    apb3clk,
    gpi,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__2_n_0 ;
  wire \Command[1]_i_1__2_n_0 ;
  wire \Command[2]_i_1__2_n_0 ;
  wire \Command[3]_i_1__2_n_0 ;
  wire \Command[3]_i_2__2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[3]_i_2__2_n_0 ;
  wire \arb_state[3]_i_3_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__2_n_0 ;
  wire \counter[1]_i_1__2_n_0 ;
  wire \counter[2]_i_1__2_n_0 ;
  wire \counter[3]_i_1__2_n_0 ;
  wire \counter[4]_i_1__2_n_0 ;
  wire \counter[5]_i_1__2_n_0 ;
  wire \counter[6]_i_1__2_n_0 ;
  wire \counter[7]_i_2__2_n_0 ;
  wire \counter[7]_i_3__2_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__2_n_0 ;
  wire \en[0][1]_i_1__2_n_0 ;
  wire \en[10][0]_i_1__2_n_0 ;
  wire \en[10][0]_i_4_n_0 ;
  wire \en[10][0]_i_5_n_0 ;
  wire \en[10][0]_i_6_n_0 ;
  wire \en[10][0]_i_7_n_0 ;
  wire \en[10][1]_i_1__2_n_0 ;
  wire \en[10][1]_i_2__2_n_0 ;
  wire \en[1][0]_i_1__2_n_0 ;
  wire \en[1][0]_i_2__2_n_0 ;
  wire \en[1][0]_i_2__2_n_1 ;
  wire \en[1][1]_i_1__6_n_0 ;
  wire \en[2][0]_i_1__2_n_0 ;
  wire \en[2][0]_i_2__2_n_0 ;
  wire \en[2][1]_i_1__6_n_0 ;
  wire \en[3][0]_i_1__2_n_0 ;
  wire \en[3][0]_i_2__2_n_0 ;
  wire \en[3][0]_i_3__2_n_0 ;
  wire \en[3][1]_i_1__6_n_0 ;
  wire \en[4][0]_i_1__2_n_0 ;
  wire \en[4][0]_i_2__2_n_0 ;
  wire \en[4][1]_i_1__2_n_0 ;
  wire \en[4][1]_i_2__2_n_0 ;
  wire \en[5][0]_i_1__2_n_0 ;
  wire \en[5][0]_i_2__2_n_0 ;
  wire \en[5][0]_i_3__2_n_0 ;
  wire \en[5][1]_i_1__2_n_0 ;
  wire \en[5][1]_i_2__6_n_0 ;
  wire \en[6][0]_i_1__2_n_0 ;
  wire \en[6][0]_i_2__2_n_0 ;
  wire \en[6][1]_i_1__2_n_0 ;
  wire \en[6][1]_i_2__2_n_0 ;
  wire \en[7][0]_i_1__2_n_0 ;
  wire \en[7][0]_i_2__2_n_0 ;
  wire \en[7][1]_i_1__2_n_0 ;
  wire \en[7][1]_i_2__2_n_0 ;
  wire \en[8][0]_i_1__2_n_0 ;
  wire \en[8][0]_i_2__2_n_0 ;
  wire \en[8][0]_i_3__2_n_0 ;
  wire \en[8][1]_i_1__2_n_0 ;
  wire \en[8][1]_i_2__2_n_0 ;
  wire \en[9][0]_i_1__2_n_0 ;
  wire \en[9][0]_i_2__2_n_0 ;
  wire \en[9][0]_i_3__2_n_0 ;
  wire \en[9][1]_fret_i_1__2_n_0 ;
  wire \en[9][1]_i_1__2_n_0 ;
  wire \en[9][1]_i_2__2_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg[9][1]_fret_n_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__2_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_i_1__2_n_0 ;
  wire \idx[1]_fret__0_i_1__2_n_0 ;
  wire \idx[1]_fret_i_1__2_n_0 ;
  wire \idx[1]_i_1__2_n_0 ;
  wire \idx[1]_i_2__2_n_0 ;
  wire \idx[2]_i_1__2_n_0 ;
  wire \idx[3]_fret_i_1__2_n_0 ;
  wire \idx[3]_i_2__2_n_0 ;
  wire \idx[3]_i_3__2_n_0 ;
  wire \idx[3]_i_4__2_n_0 ;
  wire \idx[3]_i_6_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg[3]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__2_n_0;
  wire needService_i_2__2_n_0;
  wire needService_i_3__6_n_0;
  wire [1:0]p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:0]p_0_in__1;
  wire p_0_in__2;
  wire [9:0]p_0_out;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__2_n_0 ;
  wire \txprbs_counter[1]_i_1__2_n_0 ;
  wire \txprbs_counter[2]_i_1__2_n_0 ;
  wire \txprbs_counter[3]_i_2__2_n_0 ;
  wire \txprbs_counter[3]_i_3__2_n_0 ;
  wire \txprbs_counter[3]_i_4__2_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__2_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__2_n_0 ;
  wire \txrate_counter[1]_i_1__2_n_0 ;
  wire \txrate_counter[2]_i_1__2_n_0 ;
  wire \txrate_counter[3]_i_2__2_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__2_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__2_n_0 ;
  wire \txrate_state[1]_i_3__2_n_0 ;
  wire \txrate_state[1]_i_4__2_n_0 ;
  wire \txrate_state[2]_i_1__2_n_0 ;
  wire \txrate_state[3]_i_2__2_n_0 ;
  wire \txrate_state[3]_i_3__2_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__2 
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__2 
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__2 
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Command[3]_i_1__2 
       (.I0(\idx[3]_i_3__2_n_0 ),
        .I1(arb_state[0]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .O(\Command[3]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__2 
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[3]_i_2__2_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__157 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(1'b0));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__158 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__159 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__21 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__2 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[0]));
  LUT5 #(
    .INIT(32'h8080F080)) 
    \arb_state[1]_i_1__2 
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(arb_state[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .O(p_0_in__1[1]));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__2 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__2 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[0]),
        .I2(\arb_state[3]_i_2__2_n_0 ),
        .I3(\arb_state[3]_i_3_n_0 ),
        .O(p_0_in__1[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[3]_i_2__2 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_3 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[2]),
        .O(\arb_state[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__2 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__2 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__2 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__2 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__2 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__2 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__2 
       (.I0(\counter[7]_i_3__2_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__2_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h00010006)) 
    \counter[7]_i_1__2 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .I2(arb_state[1]),
        .I3(arb_state[4]),
        .I4(arb_state[0]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__2_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__2 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__2_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__2_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .O(\en[0][0]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8FFFFFF)) 
    \en[10][0]_i_1__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[10][0]_i_4_n_0 ),
        .O(\en[10][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \en[10][0]_i_2__2 
       (.I0(\en[10][0]_i_5_n_0 ),
        .I1(\en[10][0]_i_6_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en[10][0]_i_7_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \en[10][0]_i_3__2 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg[1]_fret_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en_reg[9][1]_fret_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_4 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \en[10][0]_i_5 
       (.I0(\en_reg_n_0_[2][0] ),
        .I1(\en_reg[0]_3 [0]),
        .I2(\en_reg_n_0_[3][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[1]_2 [0]),
        .O(\en[10][0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \en[10][0]_i_6 
       (.I0(\en_reg[6]_0 [0]),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[5]_1 [0]),
        .O(\en[10][0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \en[10][0]_i_7 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[3]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\en[10][0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in__2),
        .O(\en[10][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFFFF00000000)) 
    \en[10][1]_i_2__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx[3]_i_4__2_n_0 ),
        .O(\en[10][1]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[10][1]_i_3 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_20_out__0));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__2 
       (.I0(\en[9][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__2_n_0 ));
  LUT6_2 #(
    .INIT(64'hFFFFFFFFFFF8FFFF)) 
    \en[1][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__2_n_0 ),
        .O5(\en[1][0]_i_2__2_n_0 ),
        .O6(\en[1][0]_i_2__2_n_1 ));
  LUT5 #(
    .INIT(32'hEEEEE000)) 
    \en[1][1]_i_1__6 
       (.I0(\en[9][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_1__6_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__2 
       (.I0(\en[10][0]_i_4_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF8FF)) 
    \en[2][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_20_out__0),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\en[10][0]_i_4_n_0 ),
        .O(\en[2][0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hEEEEE000)) 
    \en[2][1]_i_1__6 
       (.I0(\en[10][0]_i_4_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_1__6_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \en[3][0]_i_1__2 
       (.I0(request[3]),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\en[3][0]_i_3__2_n_0 ),
        .O(\en[3][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF8FF)) 
    \en[3][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_20_out__0),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\idx[3]_i_6_n_0 ),
        .O(\en[3][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .O(\en[3][0]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'hFCFCA800)) 
    \en[3][1]_i_1__6 
       (.I0(request[3]),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\en[3][0]_i_3__2_n_0 ),
        .I3(\en_reg_n_0_[3][0] ),
        .I4(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[4][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[8][0]_i_3__2_n_0 ),
        .O(\en[4][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__2 
       (.I0(\en[4][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__2_n_0 ),
        .O(\en[4][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFDFFFDFFFDF0000)) 
    \en[4][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(\en[8][0]_i_3__2_n_0 ),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(p_20_out__0),
        .I2(\en[5][0]_i_3__2_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[5][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__2_n_0 ),
        .O(\en[5][0]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__2 
       (.I0(\en[5][0]_i_1__2_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__6_n_0 ),
        .O(\en[5][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEE0E)) 
    \en[5][1]_i_2__6 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\en[5][0]_i_3__2_n_0 ),
        .O(\en[5][1]_i_2__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__2 
       (.I0(\en[10][0]_i_4_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[6][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[10][0]_i_4_n_0 ),
        .O(\en[6][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__2 
       (.I0(\en[6][0]_i_1__2_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__2_n_0 ),
        .O(\en[6][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFDFFFDFFFDF0000)) 
    \en[6][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(\en[10][0]_i_4_n_0 ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[7][0]_i_1__2 
       (.I0(\idx[3]_i_6_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(p_20_out__0),
        .I4(request[7]),
        .O(\en[7][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FFFFFFFFFF)) 
    \en[7][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx[3]_i_6_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[3] ),
        .I5(p_20_out__0),
        .O(\en[7][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__2 
       (.I0(\en[7][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__2_n_0 ),
        .O(\en[7][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[7][1]_i_2__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en[5][0]_i_3__2_n_0 ),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8FFFFFF)) 
    \en[8][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[8][0]_i_3__2_n_0 ),
        .O(\en[8][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__2 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__2 
       (.I0(\en[8][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__2_n_0 ),
        .O(\en[8][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[8][1]_i_2__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\en[8][0]_i_3__2_n_0 ),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__2_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8FFFFFF)) 
    \en[9][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__2_n_0 ),
        .O(\en[9][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \en[9][1]_fret_i_1__2 
       (.I0(\en[9][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__2_n_0 ),
        .I3(\idx[3]_fret_i_1__2_n_0 ),
        .I4(\en[8][1]_i_1__2_n_0 ),
        .I5(\idx[0]_i_1__2_n_0 ),
        .O(\en[9][1]_fret_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__2 
       (.I0(\en[9][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__2_n_0 ),
        .O(\en[9][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[9][1]_i_2__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\en[9][0]_i_3__2_n_0 ),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__2_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__2_n_0 ),
        .D(\en[1][0]_i_2__2_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__2_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__2_n_0 ),
        .D(\en[10][0]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__2_n_0 ),
        .D(\en[10][1]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__2_n_0 ),
        .D(\en[1][0]_i_2__2_n_1 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__6_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__2_n_0 ),
        .D(\en[2][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__2_n_0 ),
        .D(\en[3][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__2_n_0 ),
        .D(\en[4][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__2_n_0 ),
        .D(\en[5][0]_i_2__2_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__2_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__2_n_0 ),
        .D(\en[6][0]_i_2__2_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__2_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__2_n_0 ),
        .D(\en[7][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__2_n_0 ),
        .D(\en[8][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__2_n_0 ),
        .D(\en[9][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  FDRE \en_reg[9][1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_fret_i_1__2_n_0 ),
        .Q(\en_reg[9][1]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__2
       (.I0(\arb_state[3]_i_2__2_n_0 ),
        .I1(\idx[3]_i_3__2_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__2
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .I2(arb_state[4]),
        .I3(arb_state[0]),
        .I4(arb_state[1]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__2_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF1F0F0F0F0F0D0F0)) 
    gpo_i_1__2
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(gpoFromGTsync_r[3]),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__2 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__2_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \idx[1]_fret__0_i_1__2 
       (.I0(\en[2][1]_i_1__6_n_0 ),
        .I1(\en[0][1]_i_1__2_n_0 ),
        .I2(\en[3][1]_i_1__6_n_0 ),
        .I3(\idx[1]_i_1__2_n_0 ),
        .I4(\idx[0]_i_1__2_n_0 ),
        .I5(\en[1][1]_i_1__6_n_0 ),
        .O(\idx[1]_fret__0_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \idx[1]_fret_i_1__2 
       (.I0(\en[6][1]_i_1__2_n_0 ),
        .I1(\en[4][1]_i_1__2_n_0 ),
        .I2(\en[7][1]_i_1__2_n_0 ),
        .I3(\idx[1]_i_1__2_n_0 ),
        .I4(\idx[0]_i_1__2_n_0 ),
        .I5(\en[5][1]_i_1__2_n_0 ),
        .O(\idx[1]_fret_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__2 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__2_n_0 ),
        .O(\idx[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(\en[9][0]_i_3__2_n_0 ),
        .I2(\en[10][0]_i_4_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'h4100)) 
    \idx[2]_i_1__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(idx1__1),
        .O(\idx[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[3]_fret_i_1__2 
       (.I0(\idx[1]_i_2__2_n_0 ),
        .I1(\idx[2]_i_1__2_n_0 ),
        .I2(\idx[3]_i_2__2_n_0 ),
        .I3(idx),
        .I4(\idx_reg[3]_fret_n_0 ),
        .O(\idx[3]_fret_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__2 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__2_n_0 ),
        .O(idx));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT5 #(
    .INIT(32'hEAAEEAEA)) 
    \idx[3]_i_2__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx[3]_i_6_n_0 ),
        .I4(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__2 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__2 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT5 #(
    .INIT(32'hAAAAAA2A)) 
    \idx[3]_i_5__2 
       (.I0(needService),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .O(idx1__1));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \idx[3]_i_6 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\idx[3]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__2_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__2_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__2_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  FDRE \idx_reg[3]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[3]_fret_i_1__2_n_0 ),
        .Q(\idx_reg[3]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__2
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[6]_0 [1]),
        .I3(\en_reg[6]_0 [0]),
        .I4(needService_i_2__2_n_0),
        .I5(needService_i_3__6_n_0),
        .O(needService_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__2
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__6
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[2][0] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\en_reg[1]_2 [1]),
        .I5(\en_reg_n_0_[4][0] ),
        .O(needService_i_3__6_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__2_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in__2),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__153 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__154 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__155 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__156 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__145 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__146 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__147 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__148 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__149 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__150 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__151 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__152 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(1'b0));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__2_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__2_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__2_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__2 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__2 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__2_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__2 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__2_n_0 ),
        .O(\txprbs_counter[3]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__2 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__2_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__2_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__2 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__2 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__2 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__2_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__2_n_0 ),
        .O(\txrate_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__2 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__2_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__2_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__2_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__2_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__2_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__2
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__2_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__2_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__2 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__2_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__2 
       (.I0(\txrate_state[1]_i_2__2_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__2_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__2 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__2_n_0 ),
        .I5(\txrate_state[1]_i_4__2_n_0 ),
        .O(\txrate_state[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__2 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__2 
       (.I0(\txrate_state[3]_i_2__2_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__2 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__2_n_0 ),
        .O(\txrate_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__2 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__2_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__2_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__1
   (out,
    gpo,
    GPI,
    Q,
    ch0_txrate,
    apb3clk,
    ch0_txprbssel,
    gpi,
    ch0_txmstreset,
    ch0_txmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input [7:0]ch0_txrate;
  input apb3clk;
  input [3:0]ch0_txprbssel;
  input [0:0]gpi;
  input ch0_txmstreset;
  input ch0_txmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1_n_0 ;
  wire \Command[1]_i_1_n_0 ;
  wire \Command[2]_i_1_n_0 ;
  wire \Command[3]_i_1_n_0 ;
  wire \Command[3]_i_2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2_n_0 ;
  wire \arb_state[1]_i_5_n_0 ;
  wire \arb_state[1]_i_6_n_0 ;
  wire \arb_state[1]_i_7_n_0 ;
  wire \arb_state[3]_i_2_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire [3:0]ch0_txprbssel;
  wire [7:0]ch0_txrate;
  wire counter;
  wire \counter[0]_i_1_n_0 ;
  wire \counter[1]_i_1_n_0 ;
  wire \counter[2]_i_1_n_0 ;
  wire \counter[3]_i_1_n_0 ;
  wire \counter[4]_i_1_n_0 ;
  wire \counter[5]_i_1_n_0 ;
  wire \counter[6]_i_1_n_0 ;
  wire \counter[7]_i_2_n_0 ;
  wire \counter[7]_i_3_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1_n_0 ;
  wire \en[0][0]_i_2__3_n_0 ;
  wire \en[0][1]_i_1_n_0 ;
  wire \en[10][0]_i_1_n_0 ;
  wire \en[10][0]_i_3_n_0 ;
  wire \en[10][1]_i_1_n_0 ;
  wire \en[10][1]_i_2_n_0 ;
  wire \en[1][0]_i_1_n_0 ;
  wire \en[1][0]_i_2_n_0 ;
  wire \en[1][1]_i_1__3_n_0 ;
  wire \en[1][1]_i_2_n_0 ;
  wire \en[2][0]_i_1_n_0 ;
  wire \en[2][0]_i_2_n_0 ;
  wire \en[2][1]_i_1__3_n_0 ;
  wire \en[2][1]_i_2_n_0 ;
  wire \en[3][0]_i_1_n_0 ;
  wire \en[3][0]_i_2_n_0 ;
  wire \en[3][0]_i_3_n_0 ;
  wire \en[3][1]_i_1__3_n_0 ;
  wire \en[4][0]_i_1_n_0 ;
  wire \en[4][0]_i_2_n_0 ;
  wire \en[4][1]_i_1_n_0 ;
  wire \en[4][1]_i_2_n_0 ;
  wire \en[5][0]_i_1_n_0 ;
  wire \en[5][0]_i_2_n_0 ;
  wire \en[5][0]_i_3_n_0 ;
  wire \en[5][1]_i_1_n_0 ;
  wire \en[5][1]_i_2__3_n_0 ;
  wire \en[6][0]_i_1_n_0 ;
  wire \en[6][0]_i_2_n_0 ;
  wire \en[6][1]_i_1_n_0 ;
  wire \en[6][1]_i_2_n_0 ;
  wire \en[7][0]_i_1_n_0 ;
  wire \en[7][0]_i_2_n_0 ;
  wire \en[7][1]_i_1_n_0 ;
  wire \en[7][1]_i_2_n_0 ;
  wire \en[8][0]_i_1_n_0 ;
  wire \en[8][0]_i_2_n_0 ;
  wire \en[8][0]_i_3_n_0 ;
  wire \en[8][1]_i_1_n_0 ;
  wire \en[8][1]_i_2_n_0 ;
  wire \en[9][0]_i_1_n_0 ;
  wire \en[9][0]_i_2_n_0 ;
  wire \en[9][0]_i_3_n_0 ;
  wire \en[9][1]_fret_i_1_n_0 ;
  wire \en[9][1]_i_1_n_0 ;
  wire \en[9][1]_i_2_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg[9][1]_fret_n_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r1_reg_fret_n_0;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_i_1_n_0 ;
  wire \idx[1]_fret__0_i_1_n_0 ;
  wire \idx[1]_fret_i_1_n_0 ;
  wire \idx[1]_i_1_n_0 ;
  wire \idx[1]_i_2_n_0 ;
  wire \idx[2]_i_1_n_0 ;
  wire \idx[3]_fret_i_1_n_0 ;
  wire \idx[3]_i_2_n_0 ;
  wire \idx[3]_i_3_n_0 ;
  wire \idx[3]_i_4_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg[3]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1_n_0;
  wire needService_i_2_n_0;
  wire needService_i_3__3_n_0;
  wire [1:0]p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:0]p_0_in__1;
  wire p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1_n_0 ;
  wire \txprbs_counter[1]_i_1_n_0 ;
  wire \txprbs_counter[2]_i_1_n_0 ;
  wire \txprbs_counter[3]_i_2_n_0 ;
  wire \txprbs_counter[3]_i_3_n_0 ;
  wire \txprbs_counter[3]_i_4_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1_n_0 ;
  wire \txrate_counter[1]_i_1_n_0 ;
  wire \txrate_counter[2]_i_1_n_0 ;
  wire \txrate_counter[3]_i_2_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2_n_0 ;
  wire \txrate_state[1]_i_3_n_0 ;
  wire \txrate_state[1]_i_4_n_0 ;
  wire \txrate_state[2]_i_1_n_0 ;
  wire \txrate_state[3]_i_2_n_0 ;
  wire \txrate_state[3]_i_3_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3_n_0 ),
        .O(\Command[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[3]_i_2_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__112 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(ch0_txmstreset));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__113 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(ch0_txmstdatapathreset));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__114 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__18 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3 
       (.I0(\idx_reg[1]_fret_n_0 ),
        .I1(\idx_reg[1]_fret__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en_reg[9][1]_fret_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4 
       (.I0(\arb_state[1]_i_5_n_0 ),
        .I1(\arb_state[1]_i_6_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[3]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2_n_0 ),
        .O(p_0_in__1[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1 
       (.I0(\counter[7]_i_3_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .O(\en[0][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__3 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[10][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in__2),
        .O(\en[10][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(\idx[3]_i_4_n_0 ),
        .O(\en[10][1]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1 
       (.I0(\en[9][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3_n_0 ),
        .O(\en[1][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__3 
       (.I0(\en[9][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2_n_0 ),
        .O(\en[1][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3_n_0 ),
        .O(\en[2][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__3 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2_n_0 ),
        .O(\en[2][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3_n_0 ),
        .O(\en[3][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[3][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3_n_0 ),
        .O(\en[4][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1 
       (.I0(\en[4][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2_n_0 ),
        .O(\en[4][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\en[5][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3_n_0 ),
        .O(\en[5][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1 
       (.I0(\en[5][0]_i_1_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__3_n_0 ),
        .O(\en[5][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__3 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3_n_0 ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[5][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3_n_0 ),
        .O(\en[6][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1 
       (.I0(\en[6][0]_i_1_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2_n_0 ),
        .O(\en[6][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(request[7]),
        .O(\en[7][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[7][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1 
       (.I0(\en[7][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2_n_0 ),
        .O(\en[7][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en[8][0]_i_3_n_0 ),
        .O(\en[8][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1 
       (.I0(\en[8][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2_n_0 ),
        .O(\en[8][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[9][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \en[9][1]_fret_i_1 
       (.I0(\en[9][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2_n_0 ),
        .I3(\idx[3]_fret_i_1_n_0 ),
        .I4(\en[8][1]_i_1_n_0 ),
        .I5(\idx[0]_i_1_n_0 ),
        .O(\en[9][1]_fret_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1 
       (.I0(\en[9][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2_n_0 ),
        .O(\en[9][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1_n_0 ),
        .D(\en[0][0]_i_2__3_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1_n_0 ),
        .D(\en[10][0]_i_1_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1_n_0 ),
        .D(\en[10][1]_i_2_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1_n_0 ),
        .D(\en[1][0]_i_2_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__3_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1_n_0 ),
        .D(\en[2][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1_n_0 ),
        .D(\en[3][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1_n_0 ),
        .D(\en[4][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1_n_0 ),
        .D(\en[5][0]_i_2_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1_n_0 ),
        .D(\en[6][0]_i_2_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1_n_0 ),
        .D(\en[7][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1_n_0 ),
        .D(\en[8][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1_n_0 ),
        .D(\en[9][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  FDRE \en_reg[9][1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_fret_i_1_n_0 ),
        .Q(\en_reg[9][1]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx[3]_i_3_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1_n_0),
        .Q(GPI),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    gpoFromGTsync_r1_fret_i_1
       (.I0(gpoFromGTsync_r[3]),
        .I1(gpoFromGTsync_r1),
        .O(p_20_out__0));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg_fret
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_20_out__0),
        .Q(gpoFromGTsync_r1_reg_fret_n_0),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1 
       (.I0(\en[5][1]_i_1_n_0 ),
        .I1(\en[7][1]_i_1_n_0 ),
        .I2(\en[4][1]_i_1_n_0 ),
        .I3(\idx[1]_i_1_n_0 ),
        .I4(\idx[0]_i_1_n_0 ),
        .I5(\en[6][1]_i_1_n_0 ),
        .O(\idx[1]_fret__0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret_i_1 
       (.I0(\en[1][1]_i_1__3_n_0 ),
        .I1(\en[3][1]_i_1__3_n_0 ),
        .I2(\en[0][1]_i_1_n_0 ),
        .I3(\idx[1]_i_1_n_0 ),
        .I4(\idx[0]_i_1_n_0 ),
        .I5(\en[2][1]_i_1__3_n_0 ),
        .O(\idx[1]_fret_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2_n_0 ),
        .O(\idx[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(\en[9][0]_i_3_n_0 ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[3]_fret_i_1 
       (.I0(\idx[1]_i_2_n_0 ),
        .I1(\idx[2]_i_1_n_0 ),
        .I2(\idx[3]_i_2_n_0 ),
        .I3(idx),
        .I4(\idx_reg[3]_fret_n_0 ),
        .O(\idx[3]_fret_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  FDRE \idx_reg[3]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[3]_fret_i_1_n_0 ),
        .Q(\idx_reg[3]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2_n_0),
        .I5(needService_i_3__3_n_0),
        .O(needService_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__3
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__3_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in__2),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__108 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(ch0_txprbssel[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__109 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(ch0_txprbssel[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__110 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(ch0_txprbssel[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__111 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(ch0_txprbssel[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__100 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(ch0_txrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__101 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(ch0_txrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__102 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(ch0_txrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__103 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(ch0_txrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__104 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(ch0_txrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__105 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(ch0_txrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__106 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(ch0_txrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__107 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(ch0_txrate[7]));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4_n_0 ),
        .O(\txprbs_counter[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2_n_0 ),
        .O(\txrate_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1 
       (.I0(\txrate_state[1]_i_2_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3_n_0 ),
        .I5(\txrate_state[1]_i_4_n_0 ),
        .O(\txrate_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1 
       (.I0(\txrate_state[3]_i_2_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3_n_0 ),
        .O(\txrate_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__2
   (out,
    gpo,
    GPI,
    Q,
    apb3clk,
    gpi,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__0_n_0 ;
  wire \Command[1]_i_1__0_n_0 ;
  wire \Command[2]_i_1__0_n_0 ;
  wire \Command[3]_i_1__0_n_0 ;
  wire \Command[3]_i_2__0_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2__0_n_0 ;
  wire \arb_state[1]_i_5__0_n_0 ;
  wire \arb_state[1]_i_6__0_n_0 ;
  wire \arb_state[1]_i_7__0_n_0 ;
  wire \arb_state[3]_i_2__0_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__0_n_0 ;
  wire \counter[1]_i_1__0_n_0 ;
  wire \counter[2]_i_1__0_n_0 ;
  wire \counter[3]_i_1__0_n_0 ;
  wire \counter[4]_i_1__0_n_0 ;
  wire \counter[5]_i_1__0_n_0 ;
  wire \counter[6]_i_1__0_n_0 ;
  wire \counter[7]_i_2__0_n_0 ;
  wire \counter[7]_i_3__0_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__0_n_0 ;
  wire \en[0][0]_i_2__4_n_0 ;
  wire \en[0][1]_i_1__0_n_0 ;
  wire \en[10][0]_i_1__0_n_0 ;
  wire \en[10][0]_i_3__0_n_0 ;
  wire \en[10][1]_i_1__0_n_0 ;
  wire \en[10][1]_i_2__0_n_0 ;
  wire \en[1][0]_i_1__0_n_0 ;
  wire \en[1][0]_i_2__0_n_0 ;
  wire \en[1][1]_i_1__4_n_0 ;
  wire \en[1][1]_i_2__0_n_0 ;
  wire \en[2][0]_i_1__0_n_0 ;
  wire \en[2][0]_i_2__0_n_0 ;
  wire \en[2][1]_i_1__4_n_0 ;
  wire \en[2][1]_i_2__0_n_0 ;
  wire \en[3][0]_i_1__0_n_0 ;
  wire \en[3][0]_i_2__0_n_0 ;
  wire \en[3][0]_i_3__0_n_0 ;
  wire \en[3][1]_i_1__4_n_0 ;
  wire \en[4][0]_i_1__0_n_0 ;
  wire \en[4][0]_i_2__0_n_0 ;
  wire \en[4][1]_i_1__0_n_0 ;
  wire \en[4][1]_i_2__0_n_0 ;
  wire \en[5][0]_i_1__0_n_0 ;
  wire \en[5][0]_i_2__0_n_0 ;
  wire \en[5][0]_i_3__0_n_0 ;
  wire \en[5][1]_i_1__0_n_0 ;
  wire \en[5][1]_i_2__4_n_0 ;
  wire \en[6][0]_i_1__0_n_0 ;
  wire \en[6][0]_i_2__0_n_0 ;
  wire \en[6][1]_i_1__0_n_0 ;
  wire \en[6][1]_i_2__0_n_0 ;
  wire \en[7][0]_i_1__0_n_0 ;
  wire \en[7][0]_i_2__0_n_0 ;
  wire \en[7][1]_i_1__0_n_0 ;
  wire \en[7][1]_i_2__0_n_0 ;
  wire \en[8][0]_i_1__0_n_0 ;
  wire \en[8][0]_i_2__0_n_0 ;
  wire \en[8][0]_i_3__0_n_0 ;
  wire \en[8][1]_i_1__0_n_0 ;
  wire \en[8][1]_i_2__0_n_0 ;
  wire \en[9][0]_i_1__0_n_0 ;
  wire \en[9][0]_i_2__0_n_0 ;
  wire \en[9][0]_i_3__0_n_0 ;
  wire \en[9][1]_fret_i_1__0_n_0 ;
  wire \en[9][1]_i_1__0_n_0 ;
  wire \en[9][1]_i_2__0_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg[9][1]_fret_n_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__0_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r1_reg_fret_n_0;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_i_1__0_n_0 ;
  wire \idx[1]_fret__0_i_1__0_n_0 ;
  wire \idx[1]_fret_i_1__0_n_0 ;
  wire \idx[1]_i_1__0_n_0 ;
  wire \idx[1]_i_2__0_n_0 ;
  wire \idx[2]_i_1__0_n_0 ;
  wire \idx[3]_fret_i_1__0_n_0 ;
  wire \idx[3]_i_2__0_n_0 ;
  wire \idx[3]_i_3__0_n_0 ;
  wire \idx[3]_i_4__0_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg[3]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__0_n_0;
  wire needService_i_2__0_n_0;
  wire needService_i_3__4_n_0;
  wire [1:0]p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:0]p_0_in__1;
  wire p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__0_n_0 ;
  wire \txprbs_counter[1]_i_1__0_n_0 ;
  wire \txprbs_counter[2]_i_1__0_n_0 ;
  wire \txprbs_counter[3]_i_2__0_n_0 ;
  wire \txprbs_counter[3]_i_3__0_n_0 ;
  wire \txprbs_counter[3]_i_4__0_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__0_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__0_n_0 ;
  wire \txrate_counter[1]_i_1__0_n_0 ;
  wire \txrate_counter[2]_i_1__0_n_0 ;
  wire \txrate_counter[3]_i_2__0_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__0_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__0_n_0 ;
  wire \txrate_state[1]_i_3__0_n_0 ;
  wire \txrate_state[1]_i_4__0_n_0 ;
  wire \txrate_state[2]_i_1__0_n_0 ;
  wire \txrate_state[3]_i_2__0_n_0 ;
  wire \txrate_state[3]_i_3__0_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1__0 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3__0_n_0 ),
        .O(\Command[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__0_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[3]_i_2__0_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__127 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(1'b0));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__128 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__129 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__19 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__0 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1__0 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2__0_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2__0 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3__0 
       (.I0(\idx_reg[1]_fret_n_0 ),
        .I1(\idx_reg[1]_fret__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en_reg[9][1]_fret_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4__0 
       (.I0(\arb_state[1]_i_5__0_n_0 ),
        .I1(\arb_state[1]_i_6__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7__0_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5__0 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6__0 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7__0 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[3]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__0 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__0 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__0_n_0 ),
        .O(p_0_in__1[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2__0 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2__0_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__0 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__0 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__0 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__0 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__0 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__0 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__0 
       (.I0(\counter[7]_i_3__0_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__0 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__0_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1__0 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__0 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__0_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__0 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__0_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__0_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .O(\en[0][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__4 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[10][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2__0 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3__0 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__0 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in__2),
        .O(\en[10][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(\idx[3]_i_4__0_n_0 ),
        .O(\en[10][1]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__0 
       (.I0(\en[9][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3__0_n_0 ),
        .O(\en[1][0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__4 
       (.I0(\en[9][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2__0_n_0 ),
        .O(\en[1][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__0 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3__0_n_0 ),
        .O(\en[2][0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__4 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2__0_n_0 ),
        .O(\en[2][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1__0 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3__0_n_0 ),
        .O(\en[3][0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[3][0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__4 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3__0_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3__0_n_0 ),
        .O(\en[4][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__0 
       (.I0(\en[4][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__0_n_0 ),
        .O(\en[4][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\en[5][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3__0_n_0 ),
        .O(\en[5][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__0 
       (.I0(\en[5][0]_i_1__0_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__4_n_0 ),
        .O(\en[5][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__4 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3__0_n_0 ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[5][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__0 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3__0_n_0 ),
        .O(\en[6][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__0 
       (.I0(\en[6][0]_i_1__0_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__0_n_0 ),
        .O(\en[6][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(request[7]),
        .O(\en[7][0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[7][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__0 
       (.I0(\en[7][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__0_n_0 ),
        .O(\en[7][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__0 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en[8][0]_i_3__0_n_0 ),
        .O(\en[8][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__0 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__0 
       (.I0(\en[8][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__0_n_0 ),
        .O(\en[8][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__0 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[9][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \en[9][1]_fret_i_1__0 
       (.I0(\en[9][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__0_n_0 ),
        .I3(\idx[3]_fret_i_1__0_n_0 ),
        .I4(\en[8][1]_i_1__0_n_0 ),
        .I5(\idx[0]_i_1__0_n_0 ),
        .O(\en[9][1]_fret_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__0 
       (.I0(\en[9][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__0_n_0 ),
        .O(\en[9][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__0_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__0_n_0 ),
        .D(\en[0][0]_i_2__4_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__0_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__0_n_0 ),
        .D(\en[10][0]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__0_n_0 ),
        .D(\en[10][1]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__0_n_0 ),
        .D(\en[1][0]_i_2__0_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__4_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__0_n_0 ),
        .D(\en[2][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__0_n_0 ),
        .D(\en[3][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__0_n_0 ),
        .D(\en[4][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__0_n_0 ),
        .D(\en[5][0]_i_2__0_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__0_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__0_n_0 ),
        .D(\en[6][0]_i_2__0_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__0_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__0_n_0 ),
        .D(\en[7][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__0_n_0 ),
        .D(\en[8][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__0_n_0 ),
        .D(\en[9][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  FDRE \en_reg[9][1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_fret_i_1__0_n_0 ),
        .Q(\en_reg[9][1]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__0
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx[3]_i_3__0_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__0
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__0_n_0),
        .Q(GPI),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    gpoFromGTsync_r1_fret_i_1__0
       (.I0(gpoFromGTsync_r[3]),
        .I1(gpoFromGTsync_r1),
        .O(p_20_out__0));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg_fret
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_20_out__0),
        .Q(gpoFromGTsync_r1_reg_fret_n_0),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1__0
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__0 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__0_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1__0 
       (.I0(\en[5][1]_i_1__0_n_0 ),
        .I1(\en[7][1]_i_1__0_n_0 ),
        .I2(\en[4][1]_i_1__0_n_0 ),
        .I3(\idx[1]_i_1__0_n_0 ),
        .I4(\idx[0]_i_1__0_n_0 ),
        .I5(\en[6][1]_i_1__0_n_0 ),
        .O(\idx[1]_fret__0_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret_i_1__0 
       (.I0(\en[1][1]_i_1__4_n_0 ),
        .I1(\en[3][1]_i_1__4_n_0 ),
        .I2(\en[0][1]_i_1__0_n_0 ),
        .I3(\idx[1]_i_1__0_n_0 ),
        .I4(\idx[0]_i_1__0_n_0 ),
        .I5(\en[2][1]_i_1__4_n_0 ),
        .O(\idx[1]_fret_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__0 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__0_n_0 ),
        .O(\idx[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(\en[9][0]_i_3__0_n_0 ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[3]_fret_i_1__0 
       (.I0(\idx[1]_i_2__0_n_0 ),
        .I1(\idx[2]_i_1__0_n_0 ),
        .I2(\idx[3]_i_2__0_n_0 ),
        .I3(idx),
        .I4(\idx_reg[3]_fret_n_0 ),
        .O(\idx[3]_fret_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__0 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__0_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__0 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__0 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5__0 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__0_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__0_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__0_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  FDRE \idx_reg[3]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[3]_fret_i_1__0_n_0 ),
        .Q(\idx_reg[3]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__0
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2__0_n_0),
        .I5(needService_i_3__4_n_0),
        .O(needService_i_1__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__0
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__4
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__4_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__0_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in__2),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__123 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__124 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__125 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__126 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__115 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__116 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__117 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__118 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__119 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__120 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__121 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__122 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(1'b0));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__0_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__0_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__0_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__0 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__0 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__0_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__0 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__0_n_0 ),
        .O(\txprbs_counter[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__0 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__0_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__0_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__0 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__0 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__0 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__0_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__0_n_0 ),
        .O(\txrate_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__0 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__0_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__0_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__0_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__0_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__0_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__0
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__0_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__0_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__0 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__0_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__0 
       (.I0(\txrate_state[1]_i_2__0_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__0_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__0 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__0_n_0 ),
        .I5(\txrate_state[1]_i_4__0_n_0 ),
        .O(\txrate_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__0 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__0 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__0 
       (.I0(\txrate_state[3]_i_2__0_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__0 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__0 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__0_n_0 ),
        .O(\txrate_state[3]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__0 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__0_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__0_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_tx_function__xdcDup__3
   (out,
    gpo,
    GPI,
    Q,
    apb3clk,
    gpi,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input apb3clk;
  input [0:0]gpi;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__1_n_0 ;
  wire \Command[1]_i_1__1_n_0 ;
  wire \Command[2]_i_1__1_n_0 ;
  wire \Command[3]_i_1__1_n_0 ;
  wire \Command[3]_i_2__1_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2__1_n_0 ;
  wire \arb_state[1]_i_5__1_n_0 ;
  wire \arb_state[1]_i_6__1_n_0 ;
  wire \arb_state[1]_i_7__1_n_0 ;
  wire \arb_state[3]_i_2__1_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire counter;
  wire \counter[0]_i_1__1_n_0 ;
  wire \counter[1]_i_1__1_n_0 ;
  wire \counter[2]_i_1__1_n_0 ;
  wire \counter[3]_i_1__1_n_0 ;
  wire \counter[4]_i_1__1_n_0 ;
  wire \counter[5]_i_1__1_n_0 ;
  wire \counter[6]_i_1__1_n_0 ;
  wire \counter[7]_i_2__1_n_0 ;
  wire \counter[7]_i_3__1_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__1_n_0 ;
  wire \en[0][0]_i_2__5_n_0 ;
  wire \en[0][1]_i_1__1_n_0 ;
  wire \en[10][0]_i_1__1_n_0 ;
  wire \en[10][0]_i_3__1_n_0 ;
  wire \en[10][1]_i_1__1_n_0 ;
  wire \en[10][1]_i_2__1_n_0 ;
  wire \en[1][0]_i_1__1_n_0 ;
  wire \en[1][0]_i_2__1_n_0 ;
  wire \en[1][1]_i_1__5_n_0 ;
  wire \en[1][1]_i_2__1_n_0 ;
  wire \en[2][0]_i_1__1_n_0 ;
  wire \en[2][0]_i_2__1_n_0 ;
  wire \en[2][1]_i_1__5_n_0 ;
  wire \en[2][1]_i_2__1_n_0 ;
  wire \en[3][0]_i_1__1_n_0 ;
  wire \en[3][0]_i_2__1_n_0 ;
  wire \en[3][0]_i_3__1_n_0 ;
  wire \en[3][1]_i_1__5_n_0 ;
  wire \en[4][0]_i_1__1_n_0 ;
  wire \en[4][0]_i_2__1_n_0 ;
  wire \en[4][1]_i_1__1_n_0 ;
  wire \en[4][1]_i_2__1_n_0 ;
  wire \en[5][0]_i_1__1_n_0 ;
  wire \en[5][0]_i_2__1_n_0 ;
  wire \en[5][0]_i_3__1_n_0 ;
  wire \en[5][1]_i_1__1_n_0 ;
  wire \en[5][1]_i_2__5_n_0 ;
  wire \en[6][0]_i_1__1_n_0 ;
  wire \en[6][0]_i_2__1_n_0 ;
  wire \en[6][1]_i_1__1_n_0 ;
  wire \en[6][1]_i_2__1_n_0 ;
  wire \en[7][0]_i_1__1_n_0 ;
  wire \en[7][0]_i_2__1_n_0 ;
  wire \en[7][1]_i_1__1_n_0 ;
  wire \en[7][1]_i_2__1_n_0 ;
  wire \en[8][0]_i_1__1_n_0 ;
  wire \en[8][0]_i_2__1_n_0 ;
  wire \en[8][0]_i_3__1_n_0 ;
  wire \en[8][1]_i_1__1_n_0 ;
  wire \en[8][1]_i_2__1_n_0 ;
  wire \en[9][0]_i_1__1_n_0 ;
  wire \en[9][0]_i_2__1_n_0 ;
  wire \en[9][0]_i_3__1_n_0 ;
  wire \en[9][1]_fret_i_1__1_n_0 ;
  wire \en[9][1]_i_1__1_n_0 ;
  wire \en[9][1]_i_2__1_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg[9][1]_fret_n_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__1_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r1_reg_fret_n_0;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_i_1__1_n_0 ;
  wire \idx[1]_fret__0_i_1__1_n_0 ;
  wire \idx[1]_fret_i_1__1_n_0 ;
  wire \idx[1]_i_1__1_n_0 ;
  wire \idx[1]_i_2__1_n_0 ;
  wire \idx[2]_i_1__1_n_0 ;
  wire \idx[3]_fret_i_1__1_n_0 ;
  wire \idx[3]_i_2__1_n_0 ;
  wire \idx[3]_i_3__1_n_0 ;
  wire \idx[3]_i_4__1_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg[3]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__1_n_0;
  wire needService_i_2__1_n_0;
  wire needService_i_3__5_n_0;
  wire [1:0]p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:0]p_0_in__1;
  wire p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__1_n_0 ;
  wire \txprbs_counter[1]_i_1__1_n_0 ;
  wire \txprbs_counter[2]_i_1__1_n_0 ;
  wire \txprbs_counter[3]_i_2__1_n_0 ;
  wire \txprbs_counter[3]_i_3__1_n_0 ;
  wire \txprbs_counter[3]_i_4__1_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__1_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__1_n_0 ;
  wire \txrate_counter[1]_i_1__1_n_0 ;
  wire \txrate_counter[2]_i_1__1_n_0 ;
  wire \txrate_counter[3]_i_2__1_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__1_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__1_n_0 ;
  wire \txrate_state[1]_i_3__1_n_0 ;
  wire \txrate_state[1]_i_4__1_n_0 ;
  wire \txrate_state[2]_i_1__1_n_0 ;
  wire \txrate_state[3]_i_2__1_n_0 ;
  wire \txrate_state[3]_i_3__1_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__1 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__1 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__1 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1__1 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3__1_n_0 ),
        .O(\Command[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__1 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__1_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[3]_i_2__1_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__142 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(1'b0));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__143 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(1'b0));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__144 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__20 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__1 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1__1 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2__1_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2__1 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3__1 
       (.I0(\idx_reg[1]_fret_n_0 ),
        .I1(\idx_reg[1]_fret__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en_reg[9][1]_fret_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4__1 
       (.I0(\arb_state[1]_i_5__1_n_0 ),
        .I1(\arb_state[1]_i_6__1_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7__1_n_0 ),
        .I4(\idx_reg[3]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5__1 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6__1 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7__1 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[3]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7__1_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__1 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__1 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__1_n_0 ),
        .O(p_0_in__1[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2__1 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2__1_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__1 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__1 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__1 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__1 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__1 
       (.I0(\counter[7]_i_3__1_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__1_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1__1 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__1_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__1 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__1_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__1_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .O(\en[0][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__5 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[10][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3__1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in__2),
        .O(\en[10][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(\idx[3]_i_4__1_n_0 ),
        .O(\en[10][1]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__1 
       (.I0(\en[9][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3__1_n_0 ),
        .O(\en[1][0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__5 
       (.I0(\en[9][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2__1_n_0 ),
        .O(\en[1][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__1 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3__1_n_0 ),
        .O(\en[2][0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__5 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2__1_n_0 ),
        .O(\en[2][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1__1 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3__1_n_0 ),
        .O(\en[3][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[3][0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__5 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3__1_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3__1_n_0 ),
        .O(\en[4][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__1 
       (.I0(\en[4][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__1_n_0 ),
        .O(\en[4][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\en[5][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3__1_n_0 ),
        .O(\en[5][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__1 
       (.I0(\en[5][0]_i_1__1_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__5_n_0 ),
        .O(\en[5][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__5 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3__1_n_0 ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[5][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__1 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(gpoFromGTsync_r1_reg_fret_n_0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(gpoFromGTsync_r1_reg_fret_n_0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3__1_n_0 ),
        .O(\en[6][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__1 
       (.I0(\en[6][0]_i_1__1_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__1_n_0 ),
        .O(\en[6][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .I5(request[7]),
        .O(\en[7][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[7][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__1 
       (.I0(\en[7][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__1_n_0 ),
        .O(\en[7][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en[8][0]_i_3__1_n_0 ),
        .O(\en[8][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__1 
       (.I0(\en[8][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__1_n_0 ),
        .O(\en[8][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__1 
       (.I0(gpoFromGTsync_r1_reg_fret_n_0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(gpoFromGTsync_r1_reg_fret_n_0),
        .O(\en[9][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \en[9][1]_fret_i_1__1 
       (.I0(\en[9][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__1_n_0 ),
        .I3(\idx[3]_fret_i_1__1_n_0 ),
        .I4(\en[8][1]_i_1__1_n_0 ),
        .I5(\idx[0]_i_1__1_n_0 ),
        .O(\en[9][1]_fret_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__1 
       (.I0(\en[9][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__1_n_0 ),
        .O(\en[9][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__1_n_0 ),
        .I3(gpoFromGTsync_r1_reg_fret_n_0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__1_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__1_n_0 ),
        .D(\en[0][0]_i_2__5_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__1_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__1_n_0 ),
        .D(\en[10][0]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__1_n_0 ),
        .D(\en[10][1]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__1_n_0 ),
        .D(\en[1][0]_i_2__1_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__5_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__1_n_0 ),
        .D(\en[2][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__1_n_0 ),
        .D(\en[3][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__1_n_0 ),
        .D(\en[4][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__1_n_0 ),
        .D(\en[5][0]_i_2__1_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__1_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__1_n_0 ),
        .D(\en[6][0]_i_2__1_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__1_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__1_n_0 ),
        .D(\en[7][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__1_n_0 ),
        .D(\en[8][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__1_n_0 ),
        .D(\en[9][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  FDRE \en_reg[9][1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_fret_i_1__1_n_0 ),
        .Q(\en_reg[9][1]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__1
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx[3]_i_3__1_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__1
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__1_n_0),
        .Q(GPI),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    gpoFromGTsync_r1_fret_i_1__1
       (.I0(gpoFromGTsync_r[3]),
        .I1(gpoFromGTsync_r1),
        .O(p_20_out__0));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg_fret
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_20_out__0),
        .Q(gpoFromGTsync_r1_reg_fret_n_0),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1__1
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__1_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1__1 
       (.I0(\en[5][1]_i_1__1_n_0 ),
        .I1(\en[7][1]_i_1__1_n_0 ),
        .I2(\en[4][1]_i_1__1_n_0 ),
        .I3(\idx[1]_i_1__1_n_0 ),
        .I4(\idx[0]_i_1__1_n_0 ),
        .I5(\en[6][1]_i_1__1_n_0 ),
        .O(\idx[1]_fret__0_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret_i_1__1 
       (.I0(\en[1][1]_i_1__5_n_0 ),
        .I1(\en[3][1]_i_1__5_n_0 ),
        .I2(\en[0][1]_i_1__1_n_0 ),
        .I3(\idx[1]_i_1__1_n_0 ),
        .I4(\idx[0]_i_1__1_n_0 ),
        .I5(\en[2][1]_i_1__5_n_0 ),
        .O(\idx[1]_fret_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__1 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__1_n_0 ),
        .O(\idx[1]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(\en[9][0]_i_3__1_n_0 ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[3]_fret_i_1__1 
       (.I0(\idx[1]_i_2__1_n_0 ),
        .I1(\idx[2]_i_1__1_n_0 ),
        .I2(\idx[3]_i_2__1_n_0 ),
        .I3(idx),
        .I4(\idx_reg[3]_fret_n_0 ),
        .O(\idx[3]_fret_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__1 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__1_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__1 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__1 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5__1 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__1_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__1_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__1_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  FDRE \idx_reg[3]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[3]_fret_i_1__1_n_0 ),
        .Q(\idx_reg[3]_fret_n_0 ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__1
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2__1_n_0),
        .I5(needService_i_3__5_n_0),
        .O(needService_i_1__1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__1
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__5
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__5_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__1_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in__2),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__138 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__139 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__140 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__141 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__130 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__131 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__132 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__133 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__134 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__135 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__136 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__137 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(1'b0));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__1_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__1_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__1_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__1 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__1_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__1 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__1_n_0 ),
        .O(\txprbs_counter[3]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__1 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__1_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__1_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__1_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__1_n_0 ),
        .O(\txrate_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__1_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__1_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__1_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__1_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__1_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__1
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__1_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__1_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__1_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__1 
       (.I0(\txrate_state[1]_i_2__1_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__1_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__1 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__1_n_0 ),
        .I5(\txrate_state[1]_i_4__1_n_0 ),
        .O(\txrate_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__1 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__1 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__1 
       (.I0(\txrate_state[3]_i_2__1_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__1 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__1 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__1_n_0 ),
        .O(\txrate_state[3]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__1 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__1_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__1_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* C_Component_Name = "extended_phy_layer_gtwiz_versal_0_0" *) (* INTF0_CHANNEL_MAPING = "INTF0_RX0 QUAD0_RX0 INTF0_TX0 QUAD0_TX0" *) (* INTF0_LANE_MAPING = "INTF0 {QUAD0_RX0 QUAD0_TX0}" *) 
(* INTF1_CHANNEL_MAPING = "INTF1_RX0 QUAD0_RX0 INTF1_RX1 QUAD0_RX1 INTF1_RX2 QUAD0_RX2 INTF1_RX3 QUAD0_RX3 INTF1_TX0 QUAD0_TX0 INTF1_TX1 QUAD0_TX1 INTF1_TX2 QUAD0_TX2 INTF1_TX3 QUAD0_TX3" *) (* INTF1_LANE_MAPING = "INTF1 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) (* INTF2_CHANNEL_MAPING = "INTF2_RX0 QUAD0_RX0 INTF2_RX1 QUAD0_RX1 INTF2_RX2 QUAD0_RX2 INTF2_RX3 QUAD0_RX3 INTF2_TX0 QUAD0_TX0 INTF2_TX1 QUAD0_TX1 INTF2_TX2 QUAD0_TX2 INTF2_TX3 QUAD0_TX3" *) 
(* INTF2_LANE_MAPING = "INTF2 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) (* INTF3_CHANNEL_MAPING = "INTF3_RX0 QUAD0_RX0 INTF3_RX1 QUAD0_RX1 INTF3_RX2 QUAD0_RX2 INTF3_RX3 QUAD0_RX3 INTF3_TX0 QUAD0_TX0 INTF3_TX1 QUAD0_TX1 INTF3_TX2 QUAD0_TX2 INTF3_TX3 QUAD0_TX3" *) (* INTF3_LANE_MAPING = "INTF3 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
(* INTF4_CHANNEL_MAPING = "INTF4_RX0 QUAD0_RX0 INTF4_RX1 QUAD0_RX1 INTF4_RX2 QUAD0_RX2 INTF4_RX3 QUAD0_RX3 INTF4_TX0 QUAD0_TX0 INTF4_TX1 QUAD0_TX1 INTF4_TX2 QUAD0_TX2 INTF4_TX3 QUAD0_TX3" *) (* INTF4_LANE_MAPING = "INTF4 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) (* INTF5_CHANNEL_MAPING = "INTF5_RX0 QUAD0_RX0 INTF5_RX1 QUAD0_RX1 INTF5_RX2 QUAD0_RX2 INTF5_RX3 QUAD0_RX3 INTF5_TX0 QUAD0_TX0 INTF5_TX1 QUAD0_TX1 INTF5_TX2 QUAD0_TX2 INTF5_TX3 QUAD0_TX3" *) 
(* INTF5_LANE_MAPING = "INTF5 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) (* INTF6_CHANNEL_MAPING = "INTF6_RX0 QUAD0_RX0 INTF6_RX1 QUAD0_RX1 INTF6_RX2 QUAD0_RX2 INTF6_RX3 QUAD0_RX3 INTF6_TX0 QUAD0_TX0 INTF6_TX1 QUAD0_TX1 INTF6_TX2 QUAD0_TX2 INTF6_TX3 QUAD0_TX3" *) (* INTF6_LANE_MAPING = "INTF6 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) 
(* INTF7_CHANNEL_MAPING = "INTF7_RX0 QUAD0_RX0 INTF7_RX1 QUAD0_RX1 INTF7_RX2 QUAD0_RX2 INTF7_RX3 QUAD0_RX3 INTF7_TX0 QUAD0_TX0 INTF7_TX1 QUAD0_TX1 INTF7_TX2 QUAD0_TX2 INTF7_TX3 QUAD0_TX3" *) (* INTF7_LANE_MAPING = "INTF7 {QUAD0_RX0 QUAD0_RX1 QUAD0_RX2 QUAD0_RX3 QUAD0_TX0 QUAD0_TX1 QUAD0_TX2 QUAD0_TX3}" *) (* INTF_CHANNEL_NUMBERING = "QUAD0_RX0 0 QUAD0_TX0 0" *) 
(* INTF_LANE_MAP_LIST = "QUAD0_RX0 QUAD0_TX0" *) (* INTF_PARENT_PIN_LIST = "QUAD0_RX0 {{}} QUAD0_TX0 {{}}" *) (* INTF_QUAD_MAP_CKECK = "" *) 
(* IS_KSB = "1'b0" *) (* QUAD0_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}}" *) (* QUAD0_INTF_LANESEL_DICT = "INTF0 {{RX0 TX0}} unconnected {{RX1 RX2 RX3 TX1 TX2 TX3}}" *) 
(* QUAD0_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1 tx 0 rxrate PROT0.D1 rx 0}" *) (* QUAD0_LANE_SATISFIED = "1 {}" *) (* QUAD0_LANE_SEL_DICT = "PROT0 {RX0 TX0} unconnected {RX1 RX2 RX3 TX1 TX2 TX3}" *) 
(* QUAD0_MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) (* QUAD0_PACK = "" *) (* QUAD0_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD0_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD0_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD0_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD0_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD0_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD0_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD0_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD0_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_100_MHz_unique1" *) (* QUAD0_RX0_LANE_SEL = "PROT0" *) 
(* QUAD0_RX1_LANE_SEL = "unconnected" *) (* QUAD0_RX2_LANE_SEL = "unconnected" *) (* QUAD0_RX3_LANE_SEL = "unconnected" *) 
(* QUAD0_TX0_LANE_SEL = "PROT0" *) (* QUAD0_TX1_LANE_SEL = "unconnected" *) (* QUAD0_TX2_LANE_SEL = "unconnected" *) 
(* QUAD0_TX3_LANE_SEL = "unconnected" *) (* QUAD1_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) (* QUAD1_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD1_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) (* QUAD1_LANE_SATISFIED = "1 {}" *) (* QUAD1_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD1_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) (* QUAD1_PACK = "" *) (* QUAD1_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD1_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD1_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD1_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD1_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD1_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD1_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD1_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD1_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) (* QUAD1_RX0_LANE_SEL = "PROT0" *) 
(* QUAD1_RX1_LANE_SEL = "PROT0" *) (* QUAD1_RX2_LANE_SEL = "PROT0" *) (* QUAD1_RX3_LANE_SEL = "PROT0" *) 
(* QUAD1_TX0_LANE_SEL = "PROT0" *) (* QUAD1_TX1_LANE_SEL = "PROT0" *) (* QUAD1_TX2_LANE_SEL = "PROT0" *) 
(* QUAD1_TX3_LANE_SEL = "PROT0" *) (* QUAD2_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) (* QUAD2_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD2_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) (* QUAD2_LANE_SATISFIED = "1 {}" *) (* QUAD2_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD2_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) (* QUAD2_PACK = "" *) (* QUAD2_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD2_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD2_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD2_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD2_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD2_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD2_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD2_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD2_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) (* QUAD2_RX0_LANE_SEL = "PROT0" *) 
(* QUAD2_RX1_LANE_SEL = "PROT0" *) (* QUAD2_RX2_LANE_SEL = "PROT0" *) (* QUAD2_RX3_LANE_SEL = "PROT0" *) 
(* QUAD2_TX0_LANE_SEL = "PROT0" *) (* QUAD2_TX1_LANE_SEL = "PROT0" *) (* QUAD2_TX2_LANE_SEL = "PROT0" *) 
(* QUAD2_TX3_LANE_SEL = "PROT0" *) (* QUAD3_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) (* QUAD3_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD3_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) (* QUAD3_LANE_SATISFIED = "1 {}" *) (* QUAD3_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD3_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) (* QUAD3_PACK = "" *) (* QUAD3_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD3_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD3_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD3_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD3_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD3_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD3_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD3_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD3_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) (* QUAD3_RX0_LANE_SEL = "PROT0" *) 
(* QUAD3_RX1_LANE_SEL = "PROT0" *) (* QUAD3_RX2_LANE_SEL = "PROT0" *) (* QUAD3_RX3_LANE_SEL = "PROT0" *) 
(* QUAD3_TX0_LANE_SEL = "PROT0" *) (* QUAD3_TX1_LANE_SEL = "PROT0" *) (* QUAD3_TX2_LANE_SEL = "PROT0" *) 
(* QUAD3_TX3_LANE_SEL = "PROT0" *) (* QUAD4_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) (* QUAD4_INTF_LANESEL_DICT = "INTF0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD4_LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) (* QUAD4_LANE_SATISFIED = "1 {}" *) (* QUAD4_LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
(* QUAD4_MSTCLK_SRC_DICT = "TX {1,0,0,0,} RX {1,0,0,0,} " *) (* QUAD4_PACK = "" *) (* QUAD4_PROT0_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD4_PROT1_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD4_PROT2_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD4_PROT3_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD4_PROT4_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD4_PROT5_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD4_PROT6_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* QUAD4_PROT7_SETTINGS = "LR0_SETTINGS {GT_DIRECTION DUPLEX GT_TYPE GTYP INS_LOSS_NYQ 20 INTERNAL_PRESET None OOB_ENABLE false PCIE_ENABLE false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 PRESET None RESET_SEQUENCE_INTERVAL 0 RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 150.000000 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 RX_64B66B_CRC false RX_64B66B_DECODER false RX_64B66B_DESCRAMBLER false RX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_MODE 1 RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RX_CB_DISP_0_0 false RX_CB_DISP_0_1 false RX_CB_DISP_0_2 false RX_CB_DISP_0_3 false RX_CB_DISP_1_0 false RX_CB_DISP_1_1 false RX_CB_DISP_1_2 false RX_CB_DISP_1_3 false RX_CB_K_0_0 false RX_CB_K_0_1 false RX_CB_K_0_2 false RX_CB_K_0_3 false RX_CB_K_1_0 false RX_CB_K_1_1 false RX_CB_K_1_2 false RX_CB_K_1_3 false RX_CB_LEN_SEQ 1 RX_CB_MASK_0_0 false RX_CB_MASK_0_1 false RX_CB_MASK_0_2 false RX_CB_MASK_0_3 false RX_CB_MASK_1_0 false RX_CB_MASK_1_1 false RX_CB_MASK_1_2 false RX_CB_MASK_1_3 false RX_CB_MAX_LEVEL 1 RX_CB_MAX_SKEW 1 RX_CB_NUM_SEQ 0 RX_CB_VAL_0_0 00000000 RX_CB_VAL_0_1 00000000 RX_CB_VAL_0_2 00000000 RX_CB_VAL_0_3 00000000 RX_CB_VAL_1_0 00000000 RX_CB_VAL_1_1 00000000 RX_CB_VAL_1_2 00000000 RX_CB_VAL_1_3 00000000 RX_CC_DISP_0_0 false RX_CC_DISP_0_1 false RX_CC_DISP_0_2 false RX_CC_DISP_0_3 false RX_CC_DISP_1_0 false RX_CC_DISP_1_1 false RX_CC_DISP_1_2 false RX_CC_DISP_1_3 false RX_CC_KEEP_IDLE DISABLE RX_CC_K_0_0 true RX_CC_K_0_1 false RX_CC_K_0_2 false RX_CC_K_0_3 false RX_CC_K_1_0 false RX_CC_K_1_1 false RX_CC_K_1_2 false RX_CC_K_1_3 false RX_CC_LEN_SEQ 4 RX_CC_MASK_0_0 false RX_CC_MASK_0_1 false RX_CC_MASK_0_2 false RX_CC_MASK_0_3 false RX_CC_MASK_1_0 false RX_CC_MASK_1_1 false RX_CC_MASK_1_2 false RX_CC_MASK_1_3 false RX_CC_NUM_SEQ 1 RX_CC_PERIODICITY 20000 RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000001111111000111111100110011100011111100 RX_CC_VAL_0_0 11111100 RX_CC_VAL_0_1 11001110 RX_CC_VAL_0_2 01111111 RX_CC_VAL_0_3 01111111 RX_CC_VAL_1_0 00000000 RX_CC_VAL_1_1 00000000 RX_CC_VAL_1_2 00000000 RX_CC_VAL_1_3 00000000 RX_COMMA_ALIGN_WORD 4 RX_COMMA_DOUBLE_ENABLE false RX_COMMA_MASK 0001111111 RX_COMMA_M_ENABLE true RX_COMMA_M_VAL 1010000011 RX_COMMA_PRESET NONE RX_COMMA_P_ENABLE true RX_COMMA_P_VAL 0101111100 RX_COMMA_SHOW_REALIGN_ENABLE true RX_COMMA_VALID_ONLY 0 RX_COUPLING AC RX_DATA_DECODING 8B10B RX_EQ_MODE AUTO RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_FRACN_OVRD false RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_HD_EN 0 RX_INT_DATA_WIDTH 40 RX_JTOL_FC 3.5992801 RX_JTOL_LF_SLOPE -20 RX_LINE_RATE 6 RX_OUTCLK_SOURCE RXOUTCLKPMA RX_PAM_SEL NRZ RX_PLL_TYPE LCPLL RX_PPM_OFFSET 0 RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false RX_RATE_GROUP A RX_REFCLK_FREQUENCY 100 RX_REFCLK_SOURCE R0 RX_SLIDE_MODE PCS RX_SSC_PPM 0 RX_TERMINATION PROGRAMMABLE RX_TERMINATION_PROG_VALUE 800 RX_USER_DATA_WIDTH 32 TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 150.000000 TX_64B66B_CRC false TX_64B66B_ENCODER false TX_64B66B_SCRAMBLER false TX_ACTUAL_REFCLK_FREQUENCY 100.000000000000 TX_BUFFER_BYPASS_MODE Fast_Sync TX_BUFFER_MODE 1 TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_DATA_ENCODING 8B10B TX_DIFF_SWING_EMPH_MODE CUSTOM TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_FRACN_OVRD false TX_GRAY_BYP true TX_GRAY_LITTLEENDIAN true TX_HD_EN 0 TX_INT_DATA_WIDTH 40 TX_LANE_DESKEW_HDMI_ENABLE false TX_LINE_RATE 6 TX_OUTCLK_SOURCE TXOUTCLKPMA TX_PAM_SEL NRZ TX_PIPM_ENABLE false TX_PLL_TYPE LCPLL TX_PRECODE_BYP true TX_PRECODE_LITTLEENDIAN false TX_RATE_GROUP A TX_REFCLK_FREQUENCY 100 TX_REFCLK_SOURCE R0 TX_USER_DATA_WIDTH 32} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* QUAD4_REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_156.250000_MHz_unique1" *) (* QUAD4_RX0_LANE_SEL = "PROT0" *) 
(* QUAD4_RX1_LANE_SEL = "PROT0" *) (* QUAD4_RX2_LANE_SEL = "PROT0" *) (* QUAD4_RX3_LANE_SEL = "PROT0" *) 
(* QUAD4_TX0_LANE_SEL = "PROT0" *) (* QUAD4_TX1_LANE_SEL = "PROT0" *) (* QUAD4_TX2_LANE_SEL = "PROT0" *) 
(* QUAD4_TX3_LANE_SEL = "PROT0" *) (* keep_hierarchy = "soft" *) 
module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_inst
   (QUAD0_GTREFCLK0,
    INTF0_TX0_ch_txdata,
    INTF0_TX0_ch_txbufstatus,
    INTF0_TX0_ch_txdccdone,
    INTF0_TX0_ch_gttxreset,
    INTF0_TX0_ch_txdebugpcsout,
    INTF0_TX0_ch_txprogdivresetdone,
    INTF0_TX0_ch_txresetdone,
    INTF0_TX0_ch_txinhibit,
    INTF0_TX0_ch_txlatclk,
    INTF0_TX0_ch_txmaincursor,
    INTF0_TX0_ch_txpcsresetmask,
    INTF0_TX0_ch_txpd,
    INTF0_TX0_ch_txpisopd,
    INTF0_TX0_ch_txpmaresetmask,
    INTF0_TX0_ch_txpolarity,
    INTF0_TX0_ch_txpostcursor,
    INTF0_TX0_ch_txprbsforceerr,
    INTF0_TX0_ch_txprbssel,
    INTF0_TX0_ch_txprecursor,
    INTF0_TX0_ch_txprogdivreset,
    INTF0_TX0_ch_txrate,
    INTF0_TX0_ch_txresetmode,
    INTF0_TX0_ch_txheader,
    INTF0_TX0_ch_txsequence,
    INTF0_TX0_ch_txphalignresetmask,
    INTF0_TX0_ch_txcominit,
    INTF0_TX0_ch_txcomsas,
    INTF0_TX0_ch_txcomwake,
    INTF0_TX0_ch_txdapicodeovrden,
    INTF0_TX0_ch_txdapicodereset,
    INTF0_TX0_ch_txdetectrx,
    INTF0_TX0_ch_txphdlytstclk,
    INTF0_TX0_ch_txdlyalignreq,
    INTF0_TX0_ch_txelecidle,
    INTF0_TX0_ch_txmldchaindone,
    INTF0_TX0_ch_txmldchainreq,
    INTF0_TX0_ch_txoneszeros,
    INTF0_TX0_ch_txpausedelayalign,
    INTF0_TX0_ch_txphalignreq,
    INTF0_TX0_ch_txphdlypd,
    INTF0_TX0_ch_txphdlyreset,
    INTF0_TX0_ch_txphsetinitreq,
    INTF0_TX0_ch_txphshift180,
    INTF0_TX0_ch_txpicodeovrden,
    INTF0_TX0_ch_txpicodereset,
    INTF0_TX0_ch_txpippmen,
    INTF0_TX0_ch_txswing,
    INTF0_TX0_ch_txsyncallin,
    INTF0_TX0_ch_tx10gstat,
    INTF0_TX0_ch_txcomfinish,
    INTF0_TX0_ch_txdlyalignerr,
    INTF0_TX0_ch_txdlyalignprog,
    INTF0_TX0_ch_txphaligndone,
    INTF0_TX0_ch_txphalignerr,
    INTF0_TX0_ch_txphalignoutrsvd,
    INTF0_TX0_ch_txphdlyresetdone,
    INTF0_TX0_ch_txphsetinitdone,
    INTF0_TX0_ch_txphshift180done,
    INTF0_TX0_ch_txsyncdone,
    INTF0_TX0_ch_txctrl0,
    INTF0_TX0_ch_txctrl1,
    INTF0_TX0_ch_txctrl2,
    INTF0_TX0_ch_txdeemph,
    INTF0_TX0_ch_txmargin,
    INTF0_TX0_ch_txdiffctrl,
    INTF0_TX0_ch_txpippmstepsize,
    INTF0_TX0_ch_txdapiresetdone,
    INTF0_TX0_ch_txqpisenn,
    INTF0_TX0_ch_txqpisenp,
    INTF0_TX0_ch_txswingouthigh,
    INTF0_TX0_ch_txswingoutlow,
    INTF0_TX0_ch_txdapireset,
    INTF0_TX0_ch_txdapiresetmask,
    INTF0_TX0_ch_txqpibiasen,
    INTF0_TX0_ch_txqpiweakpu,
    INTF0_RX0_ch_rxbufstatus,
    INTF0_RX0_ch_rxcdrlock,
    INTF0_RX0_ch_rxdebugpcsout,
    INTF0_RX0_ch_rxprbserr,
    INTF0_RX0_ch_rxprbslocked,
    INTF0_RX0_ch_rxcdrhold,
    INTF0_RX0_ch_rxcdrovrden,
    INTF0_RX0_ch_rxlatclk,
    INTF0_RX0_ch_rxpcsresetmask,
    INTF0_RX0_ch_rxpd,
    INTF0_RX0_ch_rxpmaresetmask,
    INTF0_RX0_ch_rxpolarity,
    INTF0_RX0_ch_rxprbscntreset,
    INTF0_RX0_ch_rxrate,
    INTF0_RX0_ch_rxresetmode,
    INTF0_RX0_ch_rxdata,
    INTF0_RX0_ch_rx10gstat,
    INTF0_RX0_ch_rxdatavalid,
    INTF0_RX0_ch_rxheader,
    INTF0_RX0_ch_rxchanisaligned,
    INTF0_RX0_ch_rxchanrealign,
    INTF0_RX0_ch_rxchbondi,
    INTF0_RX0_ch_rxchbondo,
    INTF0_RX0_ch_rxclkcorcnt,
    INTF0_RX0_ch_rxcominitdet,
    INTF0_RX0_ch_rxcommadet,
    INTF0_RX0_ch_rxbyteisaligned,
    INTF0_RX0_ch_rxbyterealign,
    INTF0_RX0_ch_rxcomsasdet,
    INTF0_RX0_ch_rxcomwakedet,
    INTF0_RX0_ch_rxctrl0,
    INTF0_RX0_ch_rxctrl1,
    INTF0_RX0_ch_rxctrl2,
    INTF0_RX0_ch_rxctrl3,
    INTF0_RX0_ch_rxdapicodeovrden,
    INTF0_RX0_ch_rxdapicodereset,
    INTF0_RX0_ch_rxdlyalignerr,
    INTF0_RX0_ch_rxdlyalignprog,
    INTF0_RX0_ch_rxdlyalignreq,
    INTF0_RX0_ch_rxelecidle,
    INTF0_RX0_ch_rxeqtraining,
    INTF0_RX0_ch_rxfinealigndone,
    INTF0_RX0_ch_rxgearboxslip,
    INTF0_RX0_ch_rxheadervalid,
    INTF0_RX0_ch_rxlpmen,
    INTF0_RX0_ch_rxmldchaindone,
    INTF0_RX0_ch_rxmldchainreq,
    INTF0_RX0_ch_rxmlfinealignreq,
    INTF0_RX0_ch_rxoobreset,
    INTF0_RX0_ch_rxosintdone,
    INTF0_RX0_ch_rxphaligndone,
    INTF0_RX0_ch_rxphalignerr,
    INTF0_RX0_ch_rxphalignreq,
    INTF0_RX0_ch_rxphalignresetmask,
    INTF0_RX0_ch_rxphdlypd,
    INTF0_RX0_ch_rxphdlyreset,
    INTF0_RX0_ch_rxphdlyresetdone,
    INTF0_RX0_ch_rxphsetinitreq,
    INTF0_RX0_ch_rxphshift180,
    INTF0_RX0_ch_rxphshift180done,
    INTF0_RX0_ch_rxphsetinitdone,
    INTF0_RX0_ch_rxslide,
    INTF0_RX0_ch_rxsliderdy,
    INTF0_RX0_ch_rxstartofseq,
    INTF0_RX0_ch_rxstatus,
    INTF0_RX0_ch_rxsyncallin,
    INTF0_RX0_ch_rxsyncdone,
    INTF0_RX0_ch_rxtermination,
    INTF0_RX0_ch_rxvalid,
    INTF0_RX0_ch_rxchanbondseq,
    INTF0_RX0_ch_rxchanbond_busy,
    INTF0_RX0_ch_rxchanbond_en,
    INTF0_RX0_ch_rxchanbond_master,
    INTF0_RX0_ch_rxchanbond_slave,
    INTF0_RX0_ch_rxchanbond_level,
    INTF0_RX0_ch_cdrbmcdrreq,
    INTF0_RX0_ch_cdrfreqos,
    INTF0_RX0_ch_cdrincpctrl,
    INTF0_RX0_ch_cdrstepdir,
    INTF0_RX0_ch_cdrstepsq,
    INTF0_RX0_ch_cdrstepsx,
    INTF0_RX0_ch_eyescanreset,
    INTF0_RX0_ch_eyescantrigger,
    INTF0_RX0_ch_eyescandataerror,
    INTF0_RX0_ch_refdebugout,
    INTF0_RX0_ch_rxdapiresetdone,
    INTF0_RX0_ch_rxpkdet,
    INTF0_RX0_ch_rxqpisenn,
    INTF0_RX0_ch_rxqpisenp,
    INTF0_RX0_ch_rxsimplexphystatus,
    INTF0_RX0_ch_rxslipdone,
    INTF0_RX0_ch_dfehold,
    INTF0_RX0_ch_dfeovrd,
    INTF0_RX0_ch_rxdapireset,
    INTF0_RX0_ch_rxdapiresetmask,
    INTF0_RX0_ch_rxqpien,
    INTF0_RX0_ch_rxcdrphdone,
    INTF0_RX0_ch_gtrxreset,
    INTF0_RX0_ch_rxprogdivresetdone,
    INTF0_RX0_ch_rxresetdone,
    INTF0_RX0_ch_rxcdrreset,
    INTF0_RX0_ch_rxprbssel,
    INTF0_RX0_ch_rxprogdivreset,
    gtwiz_freerun_clk,
    QUAD0_gpi,
    QUAD0_gpo,
    QUAD0_ch0_loopback,
    QUAD0_hsclk0_lcplllock,
    QUAD0_rxp,
    QUAD0_rxn,
    QUAD0_txp,
    QUAD0_txn,
    QUAD0_TX0_outclk,
    QUAD0_RX0_outclk,
    INTF0_TX_clr_out,
    INTF0_TX_clrb_leaf_out,
    INTF0_RX_clr_out,
    INTF0_RX_clrb_leaf_out,
    INTF0_rst_all_in,
    INTF0_rst_tx_pll_and_datapath_in,
    INTF0_rst_tx_datapath_in,
    INTF0_rst_tx_done_out,
    INTF0_rst_rx_pll_and_datapath_in,
    INTF0_rst_rx_datapath_in,
    INTF0_rst_rx_done_out,
    QUAD0_TX0_usrclk,
    QUAD0_RX0_usrclk,
    gtpowergood);
  input QUAD0_GTREFCLK0;
  input [127:0]INTF0_TX0_ch_txdata;
  output [1:0]INTF0_TX0_ch_txbufstatus;
  output INTF0_TX0_ch_txdccdone;
  input INTF0_TX0_ch_gttxreset;
  output INTF0_TX0_ch_txdebugpcsout;
  output INTF0_TX0_ch_txprogdivresetdone;
  output INTF0_TX0_ch_txresetdone;
  input INTF0_TX0_ch_txinhibit;
  input INTF0_TX0_ch_txlatclk;
  input [6:0]INTF0_TX0_ch_txmaincursor;
  input INTF0_TX0_ch_txpcsresetmask;
  input [1:0]INTF0_TX0_ch_txpd;
  input INTF0_TX0_ch_txpisopd;
  input [2:0]INTF0_TX0_ch_txpmaresetmask;
  input INTF0_TX0_ch_txpolarity;
  input [4:0]INTF0_TX0_ch_txpostcursor;
  input INTF0_TX0_ch_txprbsforceerr;
  input [3:0]INTF0_TX0_ch_txprbssel;
  input [4:0]INTF0_TX0_ch_txprecursor;
  input INTF0_TX0_ch_txprogdivreset;
  input [7:0]INTF0_TX0_ch_txrate;
  input [1:0]INTF0_TX0_ch_txresetmode;
  input [5:0]INTF0_TX0_ch_txheader;
  input [6:0]INTF0_TX0_ch_txsequence;
  input [1:0]INTF0_TX0_ch_txphalignresetmask;
  input INTF0_TX0_ch_txcominit;
  input INTF0_TX0_ch_txcomsas;
  input INTF0_TX0_ch_txcomwake;
  input INTF0_TX0_ch_txdapicodeovrden;
  input INTF0_TX0_ch_txdapicodereset;
  input INTF0_TX0_ch_txdetectrx;
  input INTF0_TX0_ch_txphdlytstclk;
  input INTF0_TX0_ch_txdlyalignreq;
  input INTF0_TX0_ch_txelecidle;
  input INTF0_TX0_ch_txmldchaindone;
  input INTF0_TX0_ch_txmldchainreq;
  input INTF0_TX0_ch_txoneszeros;
  input INTF0_TX0_ch_txpausedelayalign;
  input INTF0_TX0_ch_txphalignreq;
  input INTF0_TX0_ch_txphdlypd;
  input INTF0_TX0_ch_txphdlyreset;
  input INTF0_TX0_ch_txphsetinitreq;
  input INTF0_TX0_ch_txphshift180;
  input INTF0_TX0_ch_txpicodeovrden;
  input INTF0_TX0_ch_txpicodereset;
  input INTF0_TX0_ch_txpippmen;
  input INTF0_TX0_ch_txswing;
  input INTF0_TX0_ch_txsyncallin;
  output INTF0_TX0_ch_tx10gstat;
  output INTF0_TX0_ch_txcomfinish;
  output INTF0_TX0_ch_txdlyalignerr;
  output INTF0_TX0_ch_txdlyalignprog;
  output INTF0_TX0_ch_txphaligndone;
  output INTF0_TX0_ch_txphalignerr;
  output INTF0_TX0_ch_txphalignoutrsvd;
  output INTF0_TX0_ch_txphdlyresetdone;
  output INTF0_TX0_ch_txphsetinitdone;
  output INTF0_TX0_ch_txphshift180done;
  output INTF0_TX0_ch_txsyncdone;
  input [15:0]INTF0_TX0_ch_txctrl0;
  input [15:0]INTF0_TX0_ch_txctrl1;
  input [7:0]INTF0_TX0_ch_txctrl2;
  input [1:0]INTF0_TX0_ch_txdeemph;
  input [2:0]INTF0_TX0_ch_txmargin;
  input [4:0]INTF0_TX0_ch_txdiffctrl;
  input [4:0]INTF0_TX0_ch_txpippmstepsize;
  output INTF0_TX0_ch_txdapiresetdone;
  output INTF0_TX0_ch_txqpisenn;
  output INTF0_TX0_ch_txqpisenp;
  output INTF0_TX0_ch_txswingouthigh;
  output INTF0_TX0_ch_txswingoutlow;
  input INTF0_TX0_ch_txdapireset;
  input [1:0]INTF0_TX0_ch_txdapiresetmask;
  input INTF0_TX0_ch_txqpibiasen;
  input INTF0_TX0_ch_txqpiweakpu;
  output [2:0]INTF0_RX0_ch_rxbufstatus;
  output INTF0_RX0_ch_rxcdrlock;
  output INTF0_RX0_ch_rxdebugpcsout;
  output INTF0_RX0_ch_rxprbserr;
  output INTF0_RX0_ch_rxprbslocked;
  input INTF0_RX0_ch_rxcdrhold;
  input INTF0_RX0_ch_rxcdrovrden;
  input INTF0_RX0_ch_rxlatclk;
  input [4:0]INTF0_RX0_ch_rxpcsresetmask;
  input [1:0]INTF0_RX0_ch_rxpd;
  input [6:0]INTF0_RX0_ch_rxpmaresetmask;
  input INTF0_RX0_ch_rxpolarity;
  input INTF0_RX0_ch_rxprbscntreset;
  input [7:0]INTF0_RX0_ch_rxrate;
  input [1:0]INTF0_RX0_ch_rxresetmode;
  output [127:0]INTF0_RX0_ch_rxdata;
  output [7:0]INTF0_RX0_ch_rx10gstat;
  output [1:0]INTF0_RX0_ch_rxdatavalid;
  output [5:0]INTF0_RX0_ch_rxheader;
  output INTF0_RX0_ch_rxchanisaligned;
  output INTF0_RX0_ch_rxchanrealign;
  input [4:0]INTF0_RX0_ch_rxchbondi;
  output [4:0]INTF0_RX0_ch_rxchbondo;
  output [1:0]INTF0_RX0_ch_rxclkcorcnt;
  output INTF0_RX0_ch_rxcominitdet;
  output INTF0_RX0_ch_rxcommadet;
  output INTF0_RX0_ch_rxbyteisaligned;
  output INTF0_RX0_ch_rxbyterealign;
  output INTF0_RX0_ch_rxcomsasdet;
  output INTF0_RX0_ch_rxcomwakedet;
  output [15:0]INTF0_RX0_ch_rxctrl0;
  output [15:0]INTF0_RX0_ch_rxctrl1;
  output [7:0]INTF0_RX0_ch_rxctrl2;
  output [7:0]INTF0_RX0_ch_rxctrl3;
  input INTF0_RX0_ch_rxdapicodeovrden;
  input INTF0_RX0_ch_rxdapicodereset;
  output INTF0_RX0_ch_rxdlyalignerr;
  output INTF0_RX0_ch_rxdlyalignprog;
  input INTF0_RX0_ch_rxdlyalignreq;
  output INTF0_RX0_ch_rxelecidle;
  input INTF0_RX0_ch_rxeqtraining;
  output INTF0_RX0_ch_rxfinealigndone;
  input INTF0_RX0_ch_rxgearboxslip;
  output [1:0]INTF0_RX0_ch_rxheadervalid;
  input INTF0_RX0_ch_rxlpmen;
  input INTF0_RX0_ch_rxmldchaindone;
  input INTF0_RX0_ch_rxmldchainreq;
  input INTF0_RX0_ch_rxmlfinealignreq;
  input INTF0_RX0_ch_rxoobreset;
  output INTF0_RX0_ch_rxosintdone;
  output INTF0_RX0_ch_rxphaligndone;
  output INTF0_RX0_ch_rxphalignerr;
  input INTF0_RX0_ch_rxphalignreq;
  input [1:0]INTF0_RX0_ch_rxphalignresetmask;
  input INTF0_RX0_ch_rxphdlypd;
  input INTF0_RX0_ch_rxphdlyreset;
  output INTF0_RX0_ch_rxphdlyresetdone;
  input INTF0_RX0_ch_rxphsetinitreq;
  input INTF0_RX0_ch_rxphshift180;
  output INTF0_RX0_ch_rxphshift180done;
  output INTF0_RX0_ch_rxphsetinitdone;
  input INTF0_RX0_ch_rxslide;
  output INTF0_RX0_ch_rxsliderdy;
  output [1:0]INTF0_RX0_ch_rxstartofseq;
  output [2:0]INTF0_RX0_ch_rxstatus;
  input INTF0_RX0_ch_rxsyncallin;
  output INTF0_RX0_ch_rxsyncdone;
  input INTF0_RX0_ch_rxtermination;
  output INTF0_RX0_ch_rxvalid;
  output INTF0_RX0_ch_rxchanbondseq;
  output INTF0_RX0_ch_rxchanbond_busy;
  input INTF0_RX0_ch_rxchanbond_en;
  input INTF0_RX0_ch_rxchanbond_master;
  input INTF0_RX0_ch_rxchanbond_slave;
  input [2:0]INTF0_RX0_ch_rxchanbond_level;
  input INTF0_RX0_ch_cdrbmcdrreq;
  input INTF0_RX0_ch_cdrfreqos;
  input INTF0_RX0_ch_cdrincpctrl;
  input INTF0_RX0_ch_cdrstepdir;
  input INTF0_RX0_ch_cdrstepsq;
  input INTF0_RX0_ch_cdrstepsx;
  input INTF0_RX0_ch_eyescanreset;
  input INTF0_RX0_ch_eyescantrigger;
  output INTF0_RX0_ch_eyescandataerror;
  output [1:0]INTF0_RX0_ch_refdebugout;
  output INTF0_RX0_ch_rxdapiresetdone;
  output INTF0_RX0_ch_rxpkdet;
  output INTF0_RX0_ch_rxqpisenn;
  output INTF0_RX0_ch_rxqpisenp;
  output INTF0_RX0_ch_rxsimplexphystatus;
  output INTF0_RX0_ch_rxslipdone;
  input INTF0_RX0_ch_dfehold;
  input INTF0_RX0_ch_dfeovrd;
  input INTF0_RX0_ch_rxdapireset;
  input [1:0]INTF0_RX0_ch_rxdapiresetmask;
  input INTF0_RX0_ch_rxqpien;
  output INTF0_RX0_ch_rxcdrphdone;
  input INTF0_RX0_ch_gtrxreset;
  output INTF0_RX0_ch_rxprogdivresetdone;
  output INTF0_RX0_ch_rxresetdone;
  input INTF0_RX0_ch_rxcdrreset;
  input [3:0]INTF0_RX0_ch_rxprbssel;
  input INTF0_RX0_ch_rxprogdivreset;
  input gtwiz_freerun_clk;
  input [31:0]QUAD0_gpi;
  output [31:0]QUAD0_gpo;
  input [2:0]QUAD0_ch0_loopback;
  output QUAD0_hsclk0_lcplllock;
  input [3:0]QUAD0_rxp;
  input [3:0]QUAD0_rxn;
  output [3:0]QUAD0_txp;
  output [3:0]QUAD0_txn;
  output QUAD0_TX0_outclk;
  output QUAD0_RX0_outclk;
  output INTF0_TX_clr_out;
  output INTF0_TX_clrb_leaf_out;
  output INTF0_RX_clr_out;
  output INTF0_RX_clrb_leaf_out;
  input INTF0_rst_all_in;
  input INTF0_rst_tx_pll_and_datapath_in;
  input INTF0_rst_tx_datapath_in;
  output INTF0_rst_tx_done_out;
  input INTF0_rst_rx_pll_and_datapath_in;
  input INTF0_rst_rx_datapath_in;
  output INTF0_rst_rx_done_out;
  input QUAD0_TX0_usrclk;
  input QUAD0_RX0_usrclk;
  output gtpowergood;

  wire \<const0> ;
  wire INTF0_RX0_ch_cdrbmcdrreq;
  wire INTF0_RX0_ch_cdrfreqos;
  wire INTF0_RX0_ch_cdrincpctrl;
  wire INTF0_RX0_ch_cdrstepdir;
  wire INTF0_RX0_ch_cdrstepsq;
  wire INTF0_RX0_ch_cdrstepsx;
  wire INTF0_RX0_ch_dfehold;
  wire INTF0_RX0_ch_dfeovrd;
  wire INTF0_RX0_ch_eyescandataerror;
  wire INTF0_RX0_ch_eyescanreset;
  wire INTF0_RX0_ch_eyescantrigger;
  wire INTF0_RX0_ch_gtrxreset;
  wire [1:0]INTF0_RX0_ch_refdebugout;
  wire [7:0]INTF0_RX0_ch_rx10gstat;
  wire [2:0]INTF0_RX0_ch_rxbufstatus;
  wire INTF0_RX0_ch_rxbyteisaligned;
  wire INTF0_RX0_ch_rxbyterealign;
  wire INTF0_RX0_ch_rxcdrhold;
  wire INTF0_RX0_ch_rxcdrlock;
  wire INTF0_RX0_ch_rxcdrovrden;
  wire INTF0_RX0_ch_rxcdrphdone;
  wire INTF0_RX0_ch_rxcdrreset;
  wire INTF0_RX0_ch_rxchanbondseq;
  wire INTF0_RX0_ch_rxchanisaligned;
  wire INTF0_RX0_ch_rxchanrealign;
  wire [4:0]INTF0_RX0_ch_rxchbondi;
  wire [4:0]INTF0_RX0_ch_rxchbondo;
  wire [1:0]INTF0_RX0_ch_rxclkcorcnt;
  wire INTF0_RX0_ch_rxcominitdet;
  wire INTF0_RX0_ch_rxcommadet;
  wire INTF0_RX0_ch_rxcomsasdet;
  wire INTF0_RX0_ch_rxcomwakedet;
  wire [15:0]INTF0_RX0_ch_rxctrl0;
  wire [15:0]INTF0_RX0_ch_rxctrl1;
  wire [7:0]INTF0_RX0_ch_rxctrl2;
  wire [7:0]INTF0_RX0_ch_rxctrl3;
  wire INTF0_RX0_ch_rxdapicodeovrden;
  wire INTF0_RX0_ch_rxdapicodereset;
  wire INTF0_RX0_ch_rxdapireset;
  wire INTF0_RX0_ch_rxdapiresetdone;
  wire [1:0]INTF0_RX0_ch_rxdapiresetmask;
  wire [127:0]INTF0_RX0_ch_rxdata;
  wire [1:0]INTF0_RX0_ch_rxdatavalid;
  wire INTF0_RX0_ch_rxdebugpcsout;
  wire INTF0_RX0_ch_rxdlyalignerr;
  wire INTF0_RX0_ch_rxdlyalignprog;
  wire INTF0_RX0_ch_rxdlyalignreq;
  wire INTF0_RX0_ch_rxelecidle;
  wire INTF0_RX0_ch_rxeqtraining;
  wire INTF0_RX0_ch_rxfinealigndone;
  wire INTF0_RX0_ch_rxgearboxslip;
  wire [5:0]INTF0_RX0_ch_rxheader;
  wire [1:0]INTF0_RX0_ch_rxheadervalid;
  wire INTF0_RX0_ch_rxlatclk;
  wire INTF0_RX0_ch_rxlpmen;
  wire INTF0_RX0_ch_rxmldchaindone;
  wire INTF0_RX0_ch_rxmldchainreq;
  wire INTF0_RX0_ch_rxmlfinealignreq;
  wire INTF0_RX0_ch_rxoobreset;
  wire INTF0_RX0_ch_rxosintdone;
  wire [4:0]INTF0_RX0_ch_rxpcsresetmask;
  wire [1:0]INTF0_RX0_ch_rxpd;
  wire INTF0_RX0_ch_rxphaligndone;
  wire INTF0_RX0_ch_rxphalignerr;
  wire INTF0_RX0_ch_rxphalignreq;
  wire [1:0]INTF0_RX0_ch_rxphalignresetmask;
  wire INTF0_RX0_ch_rxphdlypd;
  wire INTF0_RX0_ch_rxphdlyreset;
  wire INTF0_RX0_ch_rxphdlyresetdone;
  wire INTF0_RX0_ch_rxphsetinitdone;
  wire INTF0_RX0_ch_rxphsetinitreq;
  wire INTF0_RX0_ch_rxphshift180;
  wire INTF0_RX0_ch_rxphshift180done;
  wire INTF0_RX0_ch_rxpkdet;
  wire [6:0]INTF0_RX0_ch_rxpmaresetmask;
  wire INTF0_RX0_ch_rxpolarity;
  wire INTF0_RX0_ch_rxprbscntreset;
  wire INTF0_RX0_ch_rxprbserr;
  wire INTF0_RX0_ch_rxprbslocked;
  wire [3:0]INTF0_RX0_ch_rxprbssel;
  wire INTF0_RX0_ch_rxprogdivreset;
  wire INTF0_RX0_ch_rxprogdivresetdone;
  wire INTF0_RX0_ch_rxqpien;
  wire INTF0_RX0_ch_rxqpisenn;
  wire INTF0_RX0_ch_rxqpisenp;
  wire [7:0]INTF0_RX0_ch_rxrate;
  wire INTF0_RX0_ch_rxresetdone;
  wire [1:0]INTF0_RX0_ch_rxresetmode;
  wire INTF0_RX0_ch_rxsimplexphystatus;
  wire INTF0_RX0_ch_rxslide;
  wire INTF0_RX0_ch_rxsliderdy;
  wire INTF0_RX0_ch_rxslipdone;
  wire [1:0]INTF0_RX0_ch_rxstartofseq;
  wire [2:0]INTF0_RX0_ch_rxstatus;
  wire INTF0_RX0_ch_rxsyncallin;
  wire INTF0_RX0_ch_rxsyncdone;
  wire INTF0_RX0_ch_rxtermination;
  wire INTF0_RX0_ch_rxvalid;
  wire INTF0_RX_clr_out;
  wire INTF0_RX_clrb_leaf_out;
  wire INTF0_TX0_ch_gttxreset;
  wire INTF0_TX0_ch_tx10gstat;
  wire [1:0]INTF0_TX0_ch_txbufstatus;
  wire INTF0_TX0_ch_txcomfinish;
  wire INTF0_TX0_ch_txcominit;
  wire INTF0_TX0_ch_txcomsas;
  wire INTF0_TX0_ch_txcomwake;
  wire [15:0]INTF0_TX0_ch_txctrl0;
  wire [15:0]INTF0_TX0_ch_txctrl1;
  wire [7:0]INTF0_TX0_ch_txctrl2;
  wire INTF0_TX0_ch_txdapicodeovrden;
  wire INTF0_TX0_ch_txdapicodereset;
  wire INTF0_TX0_ch_txdapireset;
  wire INTF0_TX0_ch_txdapiresetdone;
  wire [1:0]INTF0_TX0_ch_txdapiresetmask;
  wire [127:0]INTF0_TX0_ch_txdata;
  wire INTF0_TX0_ch_txdccdone;
  wire INTF0_TX0_ch_txdebugpcsout;
  wire [1:0]INTF0_TX0_ch_txdeemph;
  wire INTF0_TX0_ch_txdetectrx;
  wire [4:0]INTF0_TX0_ch_txdiffctrl;
  wire INTF0_TX0_ch_txdlyalignerr;
  wire INTF0_TX0_ch_txdlyalignprog;
  wire INTF0_TX0_ch_txdlyalignreq;
  wire INTF0_TX0_ch_txelecidle;
  wire [5:0]INTF0_TX0_ch_txheader;
  wire INTF0_TX0_ch_txinhibit;
  wire INTF0_TX0_ch_txlatclk;
  wire [6:0]INTF0_TX0_ch_txmaincursor;
  wire [2:0]INTF0_TX0_ch_txmargin;
  wire INTF0_TX0_ch_txmldchaindone;
  wire INTF0_TX0_ch_txmldchainreq;
  wire INTF0_TX0_ch_txoneszeros;
  wire INTF0_TX0_ch_txpausedelayalign;
  wire INTF0_TX0_ch_txpcsresetmask;
  wire [1:0]INTF0_TX0_ch_txpd;
  wire INTF0_TX0_ch_txphaligndone;
  wire INTF0_TX0_ch_txphalignerr;
  wire INTF0_TX0_ch_txphalignoutrsvd;
  wire INTF0_TX0_ch_txphalignreq;
  wire [1:0]INTF0_TX0_ch_txphalignresetmask;
  wire INTF0_TX0_ch_txphdlypd;
  wire INTF0_TX0_ch_txphdlyreset;
  wire INTF0_TX0_ch_txphdlyresetdone;
  wire INTF0_TX0_ch_txphdlytstclk;
  wire INTF0_TX0_ch_txphsetinitdone;
  wire INTF0_TX0_ch_txphsetinitreq;
  wire INTF0_TX0_ch_txphshift180;
  wire INTF0_TX0_ch_txphshift180done;
  wire INTF0_TX0_ch_txpicodeovrden;
  wire INTF0_TX0_ch_txpicodereset;
  wire INTF0_TX0_ch_txpippmen;
  wire [4:0]INTF0_TX0_ch_txpippmstepsize;
  wire INTF0_TX0_ch_txpisopd;
  wire [2:0]INTF0_TX0_ch_txpmaresetmask;
  wire INTF0_TX0_ch_txpolarity;
  wire [4:0]INTF0_TX0_ch_txpostcursor;
  wire INTF0_TX0_ch_txprbsforceerr;
  wire [3:0]INTF0_TX0_ch_txprbssel;
  wire [4:0]INTF0_TX0_ch_txprecursor;
  wire INTF0_TX0_ch_txprogdivreset;
  wire INTF0_TX0_ch_txprogdivresetdone;
  wire INTF0_TX0_ch_txqpibiasen;
  wire INTF0_TX0_ch_txqpisenn;
  wire INTF0_TX0_ch_txqpisenp;
  wire INTF0_TX0_ch_txqpiweakpu;
  wire [7:0]INTF0_TX0_ch_txrate;
  wire INTF0_TX0_ch_txresetdone;
  wire [1:0]INTF0_TX0_ch_txresetmode;
  wire [6:0]INTF0_TX0_ch_txsequence;
  wire INTF0_TX0_ch_txswing;
  wire INTF0_TX0_ch_txswingouthigh;
  wire INTF0_TX0_ch_txswingoutlow;
  wire INTF0_TX0_ch_txsyncallin;
  wire INTF0_TX0_ch_txsyncdone;
  wire INTF0_TX_clr_out;
  wire INTF0_TX_clrb_leaf_out;
  wire INTF0_mst_rx_dp_reset;
  wire INTF0_mst_rx_reset;
  wire INTF0_mst_rx_resetdone_int;
  wire INTF0_mst_tx_dp_reset;
  wire INTF0_mst_tx_reset;
  wire INTF0_mst_tx_resetdone_int;
  wire INTF0_rst_all_in;
  wire INTF0_rst_rx_datapath_in;
  wire INTF0_rst_rx_done_out;
  wire INTF0_rst_rx_pll_and_datapath_in;
  wire INTF0_rst_rxuserrdy;
  wire INTF0_rst_tx_datapath_in;
  wire INTF0_rst_tx_done_out;
  wire INTF0_rst_tx_pll_and_datapath_in;
  wire INTF0_rst_txuserrdy;
  wire INTF0_rst_userclk_rx_active_int;
  wire INTF0_rst_userclk_tx_active_int;
  wire QUAD0_GTREFCLK0;
  wire QUAD0_RX0_outclk;
  wire QUAD0_RX0_usrclk;
  wire QUAD0_TX0_outclk;
  wire QUAD0_TX0_usrclk;
  wire [2:0]QUAD0_ch0_loopback;
  wire [31:0]QUAD0_gpi;
  wire [31:0]QUAD0_gpo;
  wire QUAD0_hsclk0_lcplllock;
  wire [3:0]QUAD0_rxn;
  wire [3:0]QUAD0_rxp;
  wire [3:0]QUAD0_txn;
  wire [3:0]QUAD0_txp;
  wire gtpowergood;
  wire gtwiz_freerun_clk;

  assign INTF0_RX0_ch_rxchanbond_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_reset_ip extended_phy_layer_gtwiz_versal_0_0_gtreset_inst_0
       (.INTF0_RX_clr_out(INTF0_RX_clr_out),
        .INTF0_RX_clrb_leaf_out(INTF0_RX_clrb_leaf_out),
        .INTF0_TX_clr_out(INTF0_TX_clr_out),
        .INTF0_TX_clrb_leaf_out(INTF0_TX_clrb_leaf_out),
        .INTF0_rst_all_in(INTF0_rst_all_in),
        .INTF0_rst_rx_datapath_in(INTF0_rst_rx_datapath_in),
        .INTF0_rst_rx_pll_and_datapath_in(INTF0_rst_rx_pll_and_datapath_in),
        .INTF0_rst_tx_datapath_in(INTF0_rst_tx_datapath_in),
        .INTF0_rst_tx_done_out(INTF0_rst_tx_done_out),
        .INTF0_rst_tx_pll_and_datapath_in(INTF0_rst_tx_pll_and_datapath_in),
        .ch0_rxuserrdy(INTF0_rst_rxuserrdy),
        .ch0_txuserrdy(INTF0_rst_txuserrdy),
        .gtpowergood(gtpowergood),
        .gtwiz_freerun_clk(gtwiz_freerun_clk),
        .gtwiz_reset_rx_done_out(INTF0_rst_rx_done_out),
        .gtwiz_reset_userclk_rx_active_in(INTF0_rst_userclk_rx_active_int),
        .gtwiz_reset_userclk_tx_active_in(INTF0_rst_userclk_tx_active_int),
        .mst_rx_dp_reset(INTF0_mst_rx_dp_reset),
        .mst_rx_reset(INTF0_mst_rx_reset),
        .mst_rx_resetdone(INTF0_mst_rx_resetdone_int),
        .mst_tx_dp_reset(INTF0_mst_tx_dp_reset),
        .mst_tx_reset(INTF0_mst_tx_reset),
        .mst_tx_resetdone(INTF0_mst_tx_resetdone_int));
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_intf_quad_map intf_quad_map_inst
       (.INTF0_RX0_ch_cdrbmcdrreq(INTF0_RX0_ch_cdrbmcdrreq),
        .INTF0_RX0_ch_cdrfreqos(INTF0_RX0_ch_cdrfreqos),
        .INTF0_RX0_ch_cdrincpctrl(INTF0_RX0_ch_cdrincpctrl),
        .INTF0_RX0_ch_cdrstepdir(INTF0_RX0_ch_cdrstepdir),
        .INTF0_RX0_ch_cdrstepsq(INTF0_RX0_ch_cdrstepsq),
        .INTF0_RX0_ch_cdrstepsx(INTF0_RX0_ch_cdrstepsx),
        .INTF0_RX0_ch_dfehold(INTF0_RX0_ch_dfehold),
        .INTF0_RX0_ch_dfeovrd(INTF0_RX0_ch_dfeovrd),
        .INTF0_RX0_ch_eyescandataerror(INTF0_RX0_ch_eyescandataerror),
        .INTF0_RX0_ch_eyescanreset(INTF0_RX0_ch_eyescanreset),
        .INTF0_RX0_ch_eyescantrigger(INTF0_RX0_ch_eyescantrigger),
        .INTF0_RX0_ch_gtrxreset(INTF0_RX0_ch_gtrxreset),
        .INTF0_RX0_ch_refdebugout(INTF0_RX0_ch_refdebugout),
        .INTF0_RX0_ch_rx10gstat(INTF0_RX0_ch_rx10gstat),
        .INTF0_RX0_ch_rxbufstatus(INTF0_RX0_ch_rxbufstatus),
        .INTF0_RX0_ch_rxbyteisaligned(INTF0_RX0_ch_rxbyteisaligned),
        .INTF0_RX0_ch_rxbyterealign(INTF0_RX0_ch_rxbyterealign),
        .INTF0_RX0_ch_rxcdrhold(INTF0_RX0_ch_rxcdrhold),
        .INTF0_RX0_ch_rxcdrlock(INTF0_RX0_ch_rxcdrlock),
        .INTF0_RX0_ch_rxcdrovrden(INTF0_RX0_ch_rxcdrovrden),
        .INTF0_RX0_ch_rxcdrphdone(INTF0_RX0_ch_rxcdrphdone),
        .INTF0_RX0_ch_rxcdrreset(INTF0_RX0_ch_rxcdrreset),
        .INTF0_RX0_ch_rxchanbondseq(INTF0_RX0_ch_rxchanbondseq),
        .INTF0_RX0_ch_rxchanisaligned(INTF0_RX0_ch_rxchanisaligned),
        .INTF0_RX0_ch_rxchanrealign(INTF0_RX0_ch_rxchanrealign),
        .INTF0_RX0_ch_rxchbondi(INTF0_RX0_ch_rxchbondi),
        .INTF0_RX0_ch_rxchbondo(INTF0_RX0_ch_rxchbondo),
        .INTF0_RX0_ch_rxclkcorcnt(INTF0_RX0_ch_rxclkcorcnt),
        .INTF0_RX0_ch_rxcominitdet(INTF0_RX0_ch_rxcominitdet),
        .INTF0_RX0_ch_rxcommadet(INTF0_RX0_ch_rxcommadet),
        .INTF0_RX0_ch_rxcomsasdet(INTF0_RX0_ch_rxcomsasdet),
        .INTF0_RX0_ch_rxcomwakedet(INTF0_RX0_ch_rxcomwakedet),
        .INTF0_RX0_ch_rxctrl0(INTF0_RX0_ch_rxctrl0),
        .INTF0_RX0_ch_rxctrl1(INTF0_RX0_ch_rxctrl1),
        .INTF0_RX0_ch_rxctrl2(INTF0_RX0_ch_rxctrl2),
        .INTF0_RX0_ch_rxctrl3(INTF0_RX0_ch_rxctrl3),
        .INTF0_RX0_ch_rxdapicodeovrden(INTF0_RX0_ch_rxdapicodeovrden),
        .INTF0_RX0_ch_rxdapicodereset(INTF0_RX0_ch_rxdapicodereset),
        .INTF0_RX0_ch_rxdapireset(INTF0_RX0_ch_rxdapireset),
        .INTF0_RX0_ch_rxdapiresetdone(INTF0_RX0_ch_rxdapiresetdone),
        .INTF0_RX0_ch_rxdapiresetmask(INTF0_RX0_ch_rxdapiresetmask),
        .INTF0_RX0_ch_rxdata(INTF0_RX0_ch_rxdata),
        .INTF0_RX0_ch_rxdatavalid(INTF0_RX0_ch_rxdatavalid),
        .INTF0_RX0_ch_rxdebugpcsout(INTF0_RX0_ch_rxdebugpcsout),
        .INTF0_RX0_ch_rxdlyalignerr(INTF0_RX0_ch_rxdlyalignerr),
        .INTF0_RX0_ch_rxdlyalignprog(INTF0_RX0_ch_rxdlyalignprog),
        .INTF0_RX0_ch_rxdlyalignreq(INTF0_RX0_ch_rxdlyalignreq),
        .INTF0_RX0_ch_rxelecidle(INTF0_RX0_ch_rxelecidle),
        .INTF0_RX0_ch_rxeqtraining(INTF0_RX0_ch_rxeqtraining),
        .INTF0_RX0_ch_rxfinealigndone(INTF0_RX0_ch_rxfinealigndone),
        .INTF0_RX0_ch_rxgearboxslip(INTF0_RX0_ch_rxgearboxslip),
        .INTF0_RX0_ch_rxheader(INTF0_RX0_ch_rxheader),
        .INTF0_RX0_ch_rxheadervalid(INTF0_RX0_ch_rxheadervalid),
        .INTF0_RX0_ch_rxlatclk(INTF0_RX0_ch_rxlatclk),
        .INTF0_RX0_ch_rxlpmen(INTF0_RX0_ch_rxlpmen),
        .INTF0_RX0_ch_rxmldchaindone(INTF0_RX0_ch_rxmldchaindone),
        .INTF0_RX0_ch_rxmldchainreq(INTF0_RX0_ch_rxmldchainreq),
        .INTF0_RX0_ch_rxmlfinealignreq(INTF0_RX0_ch_rxmlfinealignreq),
        .INTF0_RX0_ch_rxoobreset(INTF0_RX0_ch_rxoobreset),
        .INTF0_RX0_ch_rxosintdone(INTF0_RX0_ch_rxosintdone),
        .INTF0_RX0_ch_rxpcsresetmask(INTF0_RX0_ch_rxpcsresetmask),
        .INTF0_RX0_ch_rxpd(INTF0_RX0_ch_rxpd),
        .INTF0_RX0_ch_rxphaligndone(INTF0_RX0_ch_rxphaligndone),
        .INTF0_RX0_ch_rxphalignerr(INTF0_RX0_ch_rxphalignerr),
        .INTF0_RX0_ch_rxphalignreq(INTF0_RX0_ch_rxphalignreq),
        .INTF0_RX0_ch_rxphalignresetmask(INTF0_RX0_ch_rxphalignresetmask),
        .INTF0_RX0_ch_rxphdlypd(INTF0_RX0_ch_rxphdlypd),
        .INTF0_RX0_ch_rxphdlyreset(INTF0_RX0_ch_rxphdlyreset),
        .INTF0_RX0_ch_rxphdlyresetdone(INTF0_RX0_ch_rxphdlyresetdone),
        .INTF0_RX0_ch_rxphsetinitdone(INTF0_RX0_ch_rxphsetinitdone),
        .INTF0_RX0_ch_rxphsetinitreq(INTF0_RX0_ch_rxphsetinitreq),
        .INTF0_RX0_ch_rxphshift180(INTF0_RX0_ch_rxphshift180),
        .INTF0_RX0_ch_rxphshift180done(INTF0_RX0_ch_rxphshift180done),
        .INTF0_RX0_ch_rxpkdet(INTF0_RX0_ch_rxpkdet),
        .INTF0_RX0_ch_rxpmaresetmask(INTF0_RX0_ch_rxpmaresetmask),
        .INTF0_RX0_ch_rxpolarity(INTF0_RX0_ch_rxpolarity),
        .INTF0_RX0_ch_rxprbscntreset(INTF0_RX0_ch_rxprbscntreset),
        .INTF0_RX0_ch_rxprbserr(INTF0_RX0_ch_rxprbserr),
        .INTF0_RX0_ch_rxprbslocked(INTF0_RX0_ch_rxprbslocked),
        .INTF0_RX0_ch_rxprbssel(INTF0_RX0_ch_rxprbssel),
        .INTF0_RX0_ch_rxprogdivreset(INTF0_RX0_ch_rxprogdivreset),
        .INTF0_RX0_ch_rxprogdivresetdone(INTF0_RX0_ch_rxprogdivresetdone),
        .INTF0_RX0_ch_rxqpien(INTF0_RX0_ch_rxqpien),
        .INTF0_RX0_ch_rxqpisenn(INTF0_RX0_ch_rxqpisenn),
        .INTF0_RX0_ch_rxqpisenp(INTF0_RX0_ch_rxqpisenp),
        .INTF0_RX0_ch_rxrate(INTF0_RX0_ch_rxrate),
        .INTF0_RX0_ch_rxresetdone(INTF0_RX0_ch_rxresetdone),
        .INTF0_RX0_ch_rxresetmode(INTF0_RX0_ch_rxresetmode),
        .INTF0_RX0_ch_rxsimplexphystatus(INTF0_RX0_ch_rxsimplexphystatus),
        .INTF0_RX0_ch_rxslide(INTF0_RX0_ch_rxslide),
        .INTF0_RX0_ch_rxsliderdy(INTF0_RX0_ch_rxsliderdy),
        .INTF0_RX0_ch_rxslipdone(INTF0_RX0_ch_rxslipdone),
        .INTF0_RX0_ch_rxstartofseq(INTF0_RX0_ch_rxstartofseq),
        .INTF0_RX0_ch_rxstatus(INTF0_RX0_ch_rxstatus),
        .INTF0_RX0_ch_rxsyncallin(INTF0_RX0_ch_rxsyncallin),
        .INTF0_RX0_ch_rxsyncdone(INTF0_RX0_ch_rxsyncdone),
        .INTF0_RX0_ch_rxtermination(INTF0_RX0_ch_rxtermination),
        .INTF0_RX0_ch_rxvalid(INTF0_RX0_ch_rxvalid),
        .INTF0_TX0_ch_gttxreset(INTF0_TX0_ch_gttxreset),
        .INTF0_TX0_ch_tx10gstat(INTF0_TX0_ch_tx10gstat),
        .INTF0_TX0_ch_txbufstatus(INTF0_TX0_ch_txbufstatus),
        .INTF0_TX0_ch_txcomfinish(INTF0_TX0_ch_txcomfinish),
        .INTF0_TX0_ch_txcominit(INTF0_TX0_ch_txcominit),
        .INTF0_TX0_ch_txcomsas(INTF0_TX0_ch_txcomsas),
        .INTF0_TX0_ch_txcomwake(INTF0_TX0_ch_txcomwake),
        .INTF0_TX0_ch_txctrl0(INTF0_TX0_ch_txctrl0),
        .INTF0_TX0_ch_txctrl1(INTF0_TX0_ch_txctrl1),
        .INTF0_TX0_ch_txctrl2(INTF0_TX0_ch_txctrl2),
        .INTF0_TX0_ch_txdapicodeovrden(INTF0_TX0_ch_txdapicodeovrden),
        .INTF0_TX0_ch_txdapicodereset(INTF0_TX0_ch_txdapicodereset),
        .INTF0_TX0_ch_txdapireset(INTF0_TX0_ch_txdapireset),
        .INTF0_TX0_ch_txdapiresetdone(INTF0_TX0_ch_txdapiresetdone),
        .INTF0_TX0_ch_txdapiresetmask(INTF0_TX0_ch_txdapiresetmask),
        .INTF0_TX0_ch_txdata(INTF0_TX0_ch_txdata),
        .INTF0_TX0_ch_txdccdone(INTF0_TX0_ch_txdccdone),
        .INTF0_TX0_ch_txdebugpcsout(INTF0_TX0_ch_txdebugpcsout),
        .INTF0_TX0_ch_txdeemph(INTF0_TX0_ch_txdeemph),
        .INTF0_TX0_ch_txdetectrx(INTF0_TX0_ch_txdetectrx),
        .INTF0_TX0_ch_txdiffctrl(INTF0_TX0_ch_txdiffctrl),
        .INTF0_TX0_ch_txdlyalignerr(INTF0_TX0_ch_txdlyalignerr),
        .INTF0_TX0_ch_txdlyalignprog(INTF0_TX0_ch_txdlyalignprog),
        .INTF0_TX0_ch_txdlyalignreq(INTF0_TX0_ch_txdlyalignreq),
        .INTF0_TX0_ch_txelecidle(INTF0_TX0_ch_txelecidle),
        .INTF0_TX0_ch_txheader(INTF0_TX0_ch_txheader),
        .INTF0_TX0_ch_txinhibit(INTF0_TX0_ch_txinhibit),
        .INTF0_TX0_ch_txlatclk(INTF0_TX0_ch_txlatclk),
        .INTF0_TX0_ch_txmaincursor(INTF0_TX0_ch_txmaincursor),
        .INTF0_TX0_ch_txmargin(INTF0_TX0_ch_txmargin),
        .INTF0_TX0_ch_txmldchaindone(INTF0_TX0_ch_txmldchaindone),
        .INTF0_TX0_ch_txmldchainreq(INTF0_TX0_ch_txmldchainreq),
        .INTF0_TX0_ch_txoneszeros(INTF0_TX0_ch_txoneszeros),
        .INTF0_TX0_ch_txpausedelayalign(INTF0_TX0_ch_txpausedelayalign),
        .INTF0_TX0_ch_txpcsresetmask(INTF0_TX0_ch_txpcsresetmask),
        .INTF0_TX0_ch_txpd(INTF0_TX0_ch_txpd),
        .INTF0_TX0_ch_txphaligndone(INTF0_TX0_ch_txphaligndone),
        .INTF0_TX0_ch_txphalignerr(INTF0_TX0_ch_txphalignerr),
        .INTF0_TX0_ch_txphalignoutrsvd(INTF0_TX0_ch_txphalignoutrsvd),
        .INTF0_TX0_ch_txphalignreq(INTF0_TX0_ch_txphalignreq),
        .INTF0_TX0_ch_txphalignresetmask(INTF0_TX0_ch_txphalignresetmask),
        .INTF0_TX0_ch_txphdlypd(INTF0_TX0_ch_txphdlypd),
        .INTF0_TX0_ch_txphdlyreset(INTF0_TX0_ch_txphdlyreset),
        .INTF0_TX0_ch_txphdlyresetdone(INTF0_TX0_ch_txphdlyresetdone),
        .INTF0_TX0_ch_txphdlytstclk(INTF0_TX0_ch_txphdlytstclk),
        .INTF0_TX0_ch_txphsetinitdone(INTF0_TX0_ch_txphsetinitdone),
        .INTF0_TX0_ch_txphsetinitreq(INTF0_TX0_ch_txphsetinitreq),
        .INTF0_TX0_ch_txphshift180(INTF0_TX0_ch_txphshift180),
        .INTF0_TX0_ch_txphshift180done(INTF0_TX0_ch_txphshift180done),
        .INTF0_TX0_ch_txpicodeovrden(INTF0_TX0_ch_txpicodeovrden),
        .INTF0_TX0_ch_txpicodereset(INTF0_TX0_ch_txpicodereset),
        .INTF0_TX0_ch_txpippmen(INTF0_TX0_ch_txpippmen),
        .INTF0_TX0_ch_txpippmstepsize(INTF0_TX0_ch_txpippmstepsize),
        .INTF0_TX0_ch_txpisopd(INTF0_TX0_ch_txpisopd),
        .INTF0_TX0_ch_txpmaresetmask(INTF0_TX0_ch_txpmaresetmask),
        .INTF0_TX0_ch_txpolarity(INTF0_TX0_ch_txpolarity),
        .INTF0_TX0_ch_txpostcursor(INTF0_TX0_ch_txpostcursor),
        .INTF0_TX0_ch_txprbsforceerr(INTF0_TX0_ch_txprbsforceerr),
        .INTF0_TX0_ch_txprbssel(INTF0_TX0_ch_txprbssel),
        .INTF0_TX0_ch_txprecursor(INTF0_TX0_ch_txprecursor),
        .INTF0_TX0_ch_txprogdivreset(INTF0_TX0_ch_txprogdivreset),
        .INTF0_TX0_ch_txprogdivresetdone(INTF0_TX0_ch_txprogdivresetdone),
        .INTF0_TX0_ch_txqpibiasen(INTF0_TX0_ch_txqpibiasen),
        .INTF0_TX0_ch_txqpisenn(INTF0_TX0_ch_txqpisenn),
        .INTF0_TX0_ch_txqpisenp(INTF0_TX0_ch_txqpisenp),
        .INTF0_TX0_ch_txqpiweakpu(INTF0_TX0_ch_txqpiweakpu),
        .INTF0_TX0_ch_txrate(INTF0_TX0_ch_txrate),
        .INTF0_TX0_ch_txresetdone(INTF0_TX0_ch_txresetdone),
        .INTF0_TX0_ch_txresetmode(INTF0_TX0_ch_txresetmode),
        .INTF0_TX0_ch_txsequence(INTF0_TX0_ch_txsequence),
        .INTF0_TX0_ch_txswing(INTF0_TX0_ch_txswing),
        .INTF0_TX0_ch_txswingouthigh(INTF0_TX0_ch_txswingouthigh),
        .INTF0_TX0_ch_txswingoutlow(INTF0_TX0_ch_txswingoutlow),
        .INTF0_TX0_ch_txsyncallin(INTF0_TX0_ch_txsyncallin),
        .INTF0_TX0_ch_txsyncdone(INTF0_TX0_ch_txsyncdone),
        .QUAD0_GTREFCLK0(QUAD0_GTREFCLK0),
        .QUAD0_RX0_outclk(QUAD0_RX0_outclk),
        .QUAD0_RX0_usrclk(QUAD0_RX0_usrclk),
        .QUAD0_TX0_outclk(QUAD0_TX0_outclk),
        .QUAD0_TX0_usrclk(QUAD0_TX0_usrclk),
        .QUAD0_ch0_loopback(QUAD0_ch0_loopback),
        .QUAD0_gpi(QUAD0_gpi),
        .QUAD0_gpo(QUAD0_gpo),
        .QUAD0_hsclk0_lcplllock(QUAD0_hsclk0_lcplllock),
        .QUAD0_rxn(QUAD0_rxn),
        .QUAD0_rxp(QUAD0_rxp),
        .QUAD0_txn(QUAD0_txn),
        .QUAD0_txp(QUAD0_txp),
        .ch0_rxmstresetdone(INTF0_mst_rx_resetdone_int),
        .ch0_rxpmaresetdone(INTF0_rst_userclk_rx_active_int),
        .ch0_rxuserrdy(INTF0_rst_rxuserrdy),
        .ch0_txmstresetdone(INTF0_mst_tx_resetdone_int),
        .ch0_txpmaresetdone(INTF0_rst_userclk_tx_active_int),
        .ch0_txuserrdy(INTF0_rst_txuserrdy),
        .gtpowergood(gtpowergood),
        .gtwiz_freerun_clk(gtwiz_freerun_clk),
        .mst_rx_dp_reset(INTF0_mst_rx_dp_reset),
        .mst_rx_reset(INTF0_mst_rx_reset),
        .mst_tx_dp_reset(INTF0_mst_tx_dp_reset),
        .mst_tx_reset(INTF0_mst_tx_reset));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_intf_quad_map
   (QUAD0_hsclk0_lcplllock,
    gtpowergood,
    INTF0_TX0_ch_tx10gstat,
    INTF0_TX0_ch_txcomfinish,
    INTF0_TX0_ch_txdccdone,
    INTF0_TX0_ch_txdlyalignerr,
    INTF0_TX0_ch_txdlyalignprog,
    INTF0_TX0_ch_txphaligndone,
    INTF0_TX0_ch_txphalignerr,
    INTF0_TX0_ch_txphalignoutrsvd,
    INTF0_TX0_ch_txphdlyresetdone,
    INTF0_TX0_ch_txphsetinitdone,
    INTF0_TX0_ch_txphshift180done,
    INTF0_TX0_ch_txsyncdone,
    INTF0_TX0_ch_txbufstatus,
    ch0_txmstresetdone,
    INTF0_TX0_ch_txprogdivresetdone,
    ch0_txpmaresetdone,
    INTF0_TX0_ch_txresetdone,
    INTF0_TX0_ch_txdapiresetdone,
    INTF0_TX0_ch_txdebugpcsout,
    INTF0_TX0_ch_txqpisenn,
    INTF0_TX0_ch_txqpisenp,
    INTF0_TX0_ch_txswingouthigh,
    INTF0_TX0_ch_txswingoutlow,
    QUAD0_TX0_outclk,
    INTF0_RX0_ch_rxdata,
    INTF0_RX0_ch_rxdatavalid,
    INTF0_RX0_ch_rxheader,
    INTF0_RX0_ch_rxprogdivresetdone,
    ch0_rxpmaresetdone,
    INTF0_RX0_ch_rxresetdone,
    INTF0_RX0_ch_rx10gstat,
    INTF0_RX0_ch_rxbufstatus,
    INTF0_RX0_ch_rxbyteisaligned,
    INTF0_RX0_ch_rxbyterealign,
    INTF0_RX0_ch_rxcdrlock,
    INTF0_RX0_ch_rxcdrphdone,
    INTF0_RX0_ch_rxchanbondseq,
    INTF0_RX0_ch_rxchanisaligned,
    INTF0_RX0_ch_rxchanrealign,
    INTF0_RX0_ch_rxchbondo,
    INTF0_RX0_ch_rxclkcorcnt,
    INTF0_RX0_ch_rxcominitdet,
    INTF0_RX0_ch_rxcommadet,
    INTF0_RX0_ch_rxcomsasdet,
    INTF0_RX0_ch_rxcomwakedet,
    INTF0_RX0_ch_rxctrl0,
    INTF0_RX0_ch_rxctrl1,
    INTF0_RX0_ch_rxctrl2,
    INTF0_RX0_ch_rxctrl3,
    INTF0_RX0_ch_rxdlyalignerr,
    INTF0_RX0_ch_rxdlyalignprog,
    INTF0_RX0_ch_rxelecidle,
    INTF0_RX0_ch_rxfinealigndone,
    INTF0_RX0_ch_rxheadervalid,
    INTF0_RX0_ch_rxosintdone,
    INTF0_RX0_ch_rxphaligndone,
    INTF0_RX0_ch_rxphalignerr,
    INTF0_RX0_ch_rxphdlyresetdone,
    INTF0_RX0_ch_rxphsetinitdone,
    INTF0_RX0_ch_rxphshift180done,
    INTF0_RX0_ch_rxprbserr,
    INTF0_RX0_ch_rxprbslocked,
    ch0_rxmstresetdone,
    INTF0_RX0_ch_rxsliderdy,
    INTF0_RX0_ch_rxstartofseq,
    INTF0_RX0_ch_rxstatus,
    INTF0_RX0_ch_rxsyncdone,
    INTF0_RX0_ch_rxvalid,
    INTF0_RX0_ch_eyescandataerror,
    INTF0_RX0_ch_refdebugout,
    INTF0_RX0_ch_rxdapiresetdone,
    INTF0_RX0_ch_rxdebugpcsout,
    INTF0_RX0_ch_rxpkdet,
    INTF0_RX0_ch_rxqpisenn,
    INTF0_RX0_ch_rxqpisenp,
    INTF0_RX0_ch_rxsimplexphystatus,
    INTF0_RX0_ch_rxslipdone,
    QUAD0_RX0_outclk,
    QUAD0_gpo,
    QUAD0_txp,
    QUAD0_txn,
    INTF0_TX0_ch_txdata,
    INTF0_TX0_ch_txheader,
    INTF0_TX0_ch_txsequence,
    INTF0_TX0_ch_gttxreset,
    INTF0_TX0_ch_txprogdivreset,
    ch0_txuserrdy,
    INTF0_TX0_ch_txphalignresetmask,
    INTF0_TX0_ch_txcominit,
    INTF0_TX0_ch_txcomsas,
    INTF0_TX0_ch_txcomwake,
    INTF0_TX0_ch_txdapicodeovrden,
    INTF0_TX0_ch_txdapicodereset,
    INTF0_TX0_ch_txdetectrx,
    INTF0_TX0_ch_txlatclk,
    INTF0_TX0_ch_txphdlytstclk,
    INTF0_TX0_ch_txdlyalignreq,
    INTF0_TX0_ch_txelecidle,
    INTF0_TX0_ch_txinhibit,
    INTF0_TX0_ch_txmldchaindone,
    INTF0_TX0_ch_txmldchainreq,
    INTF0_TX0_ch_txoneszeros,
    INTF0_TX0_ch_txpausedelayalign,
    INTF0_TX0_ch_txpcsresetmask,
    INTF0_TX0_ch_txphalignreq,
    INTF0_TX0_ch_txphdlypd,
    INTF0_TX0_ch_txphdlyreset,
    INTF0_TX0_ch_txphsetinitreq,
    INTF0_TX0_ch_txphshift180,
    INTF0_TX0_ch_txpicodeovrden,
    INTF0_TX0_ch_txpicodereset,
    INTF0_TX0_ch_txpippmen,
    INTF0_TX0_ch_txpisopd,
    INTF0_TX0_ch_txpolarity,
    INTF0_TX0_ch_txprbsforceerr,
    INTF0_TX0_ch_txswing,
    INTF0_TX0_ch_txsyncallin,
    INTF0_TX0_ch_txctrl0,
    INTF0_TX0_ch_txctrl1,
    INTF0_TX0_ch_txdeemph,
    INTF0_TX0_ch_txpd,
    INTF0_TX0_ch_txresetmode,
    mst_tx_reset,
    mst_tx_dp_reset,
    INTF0_TX0_ch_txmargin,
    INTF0_TX0_ch_txpmaresetmask,
    INTF0_TX0_ch_txprbssel,
    INTF0_TX0_ch_txdiffctrl,
    INTF0_TX0_ch_txpippmstepsize,
    INTF0_TX0_ch_txpostcursor,
    INTF0_TX0_ch_txprecursor,
    INTF0_TX0_ch_txmaincursor,
    INTF0_TX0_ch_txctrl2,
    INTF0_TX0_ch_txrate,
    INTF0_TX0_ch_txdapireset,
    INTF0_TX0_ch_txdapiresetmask,
    INTF0_TX0_ch_txqpibiasen,
    INTF0_TX0_ch_txqpiweakpu,
    QUAD0_TX0_usrclk,
    INTF0_RX0_ch_rxgearboxslip,
    INTF0_RX0_ch_rxlatclk,
    INTF0_RX0_ch_gtrxreset,
    INTF0_RX0_ch_rxprogdivreset,
    ch0_rxuserrdy,
    INTF0_RX0_ch_rxcdrhold,
    INTF0_RX0_ch_rxcdrovrden,
    INTF0_RX0_ch_rxcdrreset,
    INTF0_RX0_ch_rxchbondi,
    INTF0_RX0_ch_rxdapicodeovrden,
    INTF0_RX0_ch_rxdapicodereset,
    INTF0_RX0_ch_rxdlyalignreq,
    INTF0_RX0_ch_rxeqtraining,
    INTF0_RX0_ch_rxlpmen,
    INTF0_RX0_ch_rxmldchaindone,
    INTF0_RX0_ch_rxmldchainreq,
    INTF0_RX0_ch_rxmlfinealignreq,
    INTF0_RX0_ch_rxoobreset,
    INTF0_RX0_ch_rxpcsresetmask,
    INTF0_RX0_ch_rxpd,
    INTF0_RX0_ch_rxphalignreq,
    INTF0_RX0_ch_rxphalignresetmask,
    INTF0_RX0_ch_rxphdlypd,
    INTF0_RX0_ch_rxphdlyreset,
    INTF0_RX0_ch_rxphsetinitreq,
    INTF0_RX0_ch_rxphshift180,
    INTF0_RX0_ch_rxpmaresetmask,
    INTF0_RX0_ch_rxpolarity,
    INTF0_RX0_ch_rxprbscntreset,
    INTF0_RX0_ch_rxprbssel,
    INTF0_RX0_ch_rxrate,
    INTF0_RX0_ch_rxresetmode,
    mst_rx_reset,
    mst_rx_dp_reset,
    INTF0_RX0_ch_rxslide,
    INTF0_RX0_ch_rxsyncallin,
    INTF0_RX0_ch_rxtermination,
    INTF0_RX0_ch_cdrbmcdrreq,
    INTF0_RX0_ch_cdrfreqos,
    INTF0_RX0_ch_cdrincpctrl,
    INTF0_RX0_ch_cdrstepdir,
    INTF0_RX0_ch_cdrstepsq,
    INTF0_RX0_ch_cdrstepsx,
    INTF0_RX0_ch_eyescanreset,
    INTF0_RX0_ch_eyescantrigger,
    INTF0_RX0_ch_dfehold,
    INTF0_RX0_ch_dfeovrd,
    INTF0_RX0_ch_rxdapireset,
    INTF0_RX0_ch_rxdapiresetmask,
    INTF0_RX0_ch_rxqpien,
    QUAD0_RX0_usrclk,
    QUAD0_ch0_loopback,
    QUAD0_GTREFCLK0,
    QUAD0_gpi,
    gtwiz_freerun_clk,
    QUAD0_rxp,
    QUAD0_rxn);
  output QUAD0_hsclk0_lcplllock;
  output gtpowergood;
  output INTF0_TX0_ch_tx10gstat;
  output INTF0_TX0_ch_txcomfinish;
  output INTF0_TX0_ch_txdccdone;
  output INTF0_TX0_ch_txdlyalignerr;
  output INTF0_TX0_ch_txdlyalignprog;
  output INTF0_TX0_ch_txphaligndone;
  output INTF0_TX0_ch_txphalignerr;
  output INTF0_TX0_ch_txphalignoutrsvd;
  output INTF0_TX0_ch_txphdlyresetdone;
  output INTF0_TX0_ch_txphsetinitdone;
  output INTF0_TX0_ch_txphshift180done;
  output INTF0_TX0_ch_txsyncdone;
  output [1:0]INTF0_TX0_ch_txbufstatus;
  output ch0_txmstresetdone;
  output INTF0_TX0_ch_txprogdivresetdone;
  output ch0_txpmaresetdone;
  output INTF0_TX0_ch_txresetdone;
  output INTF0_TX0_ch_txdapiresetdone;
  output INTF0_TX0_ch_txdebugpcsout;
  output INTF0_TX0_ch_txqpisenn;
  output INTF0_TX0_ch_txqpisenp;
  output INTF0_TX0_ch_txswingouthigh;
  output INTF0_TX0_ch_txswingoutlow;
  output QUAD0_TX0_outclk;
  output [127:0]INTF0_RX0_ch_rxdata;
  output [1:0]INTF0_RX0_ch_rxdatavalid;
  output [5:0]INTF0_RX0_ch_rxheader;
  output INTF0_RX0_ch_rxprogdivresetdone;
  output ch0_rxpmaresetdone;
  output INTF0_RX0_ch_rxresetdone;
  output [7:0]INTF0_RX0_ch_rx10gstat;
  output [2:0]INTF0_RX0_ch_rxbufstatus;
  output INTF0_RX0_ch_rxbyteisaligned;
  output INTF0_RX0_ch_rxbyterealign;
  output INTF0_RX0_ch_rxcdrlock;
  output INTF0_RX0_ch_rxcdrphdone;
  output INTF0_RX0_ch_rxchanbondseq;
  output INTF0_RX0_ch_rxchanisaligned;
  output INTF0_RX0_ch_rxchanrealign;
  output [4:0]INTF0_RX0_ch_rxchbondo;
  output [1:0]INTF0_RX0_ch_rxclkcorcnt;
  output INTF0_RX0_ch_rxcominitdet;
  output INTF0_RX0_ch_rxcommadet;
  output INTF0_RX0_ch_rxcomsasdet;
  output INTF0_RX0_ch_rxcomwakedet;
  output [15:0]INTF0_RX0_ch_rxctrl0;
  output [15:0]INTF0_RX0_ch_rxctrl1;
  output [7:0]INTF0_RX0_ch_rxctrl2;
  output [7:0]INTF0_RX0_ch_rxctrl3;
  output INTF0_RX0_ch_rxdlyalignerr;
  output INTF0_RX0_ch_rxdlyalignprog;
  output INTF0_RX0_ch_rxelecidle;
  output INTF0_RX0_ch_rxfinealigndone;
  output [1:0]INTF0_RX0_ch_rxheadervalid;
  output INTF0_RX0_ch_rxosintdone;
  output INTF0_RX0_ch_rxphaligndone;
  output INTF0_RX0_ch_rxphalignerr;
  output INTF0_RX0_ch_rxphdlyresetdone;
  output INTF0_RX0_ch_rxphsetinitdone;
  output INTF0_RX0_ch_rxphshift180done;
  output INTF0_RX0_ch_rxprbserr;
  output INTF0_RX0_ch_rxprbslocked;
  output ch0_rxmstresetdone;
  output INTF0_RX0_ch_rxsliderdy;
  output [1:0]INTF0_RX0_ch_rxstartofseq;
  output [2:0]INTF0_RX0_ch_rxstatus;
  output INTF0_RX0_ch_rxsyncdone;
  output INTF0_RX0_ch_rxvalid;
  output INTF0_RX0_ch_eyescandataerror;
  output [1:0]INTF0_RX0_ch_refdebugout;
  output INTF0_RX0_ch_rxdapiresetdone;
  output INTF0_RX0_ch_rxdebugpcsout;
  output INTF0_RX0_ch_rxpkdet;
  output INTF0_RX0_ch_rxqpisenn;
  output INTF0_RX0_ch_rxqpisenp;
  output INTF0_RX0_ch_rxsimplexphystatus;
  output INTF0_RX0_ch_rxslipdone;
  output QUAD0_RX0_outclk;
  output [31:0]QUAD0_gpo;
  output [3:0]QUAD0_txp;
  output [3:0]QUAD0_txn;
  input [127:0]INTF0_TX0_ch_txdata;
  input [5:0]INTF0_TX0_ch_txheader;
  input [6:0]INTF0_TX0_ch_txsequence;
  input INTF0_TX0_ch_gttxreset;
  input INTF0_TX0_ch_txprogdivreset;
  input ch0_txuserrdy;
  input [1:0]INTF0_TX0_ch_txphalignresetmask;
  input INTF0_TX0_ch_txcominit;
  input INTF0_TX0_ch_txcomsas;
  input INTF0_TX0_ch_txcomwake;
  input INTF0_TX0_ch_txdapicodeovrden;
  input INTF0_TX0_ch_txdapicodereset;
  input INTF0_TX0_ch_txdetectrx;
  input INTF0_TX0_ch_txlatclk;
  input INTF0_TX0_ch_txphdlytstclk;
  input INTF0_TX0_ch_txdlyalignreq;
  input INTF0_TX0_ch_txelecidle;
  input INTF0_TX0_ch_txinhibit;
  input INTF0_TX0_ch_txmldchaindone;
  input INTF0_TX0_ch_txmldchainreq;
  input INTF0_TX0_ch_txoneszeros;
  input INTF0_TX0_ch_txpausedelayalign;
  input INTF0_TX0_ch_txpcsresetmask;
  input INTF0_TX0_ch_txphalignreq;
  input INTF0_TX0_ch_txphdlypd;
  input INTF0_TX0_ch_txphdlyreset;
  input INTF0_TX0_ch_txphsetinitreq;
  input INTF0_TX0_ch_txphshift180;
  input INTF0_TX0_ch_txpicodeovrden;
  input INTF0_TX0_ch_txpicodereset;
  input INTF0_TX0_ch_txpippmen;
  input INTF0_TX0_ch_txpisopd;
  input INTF0_TX0_ch_txpolarity;
  input INTF0_TX0_ch_txprbsforceerr;
  input INTF0_TX0_ch_txswing;
  input INTF0_TX0_ch_txsyncallin;
  input [15:0]INTF0_TX0_ch_txctrl0;
  input [15:0]INTF0_TX0_ch_txctrl1;
  input [1:0]INTF0_TX0_ch_txdeemph;
  input [1:0]INTF0_TX0_ch_txpd;
  input [1:0]INTF0_TX0_ch_txresetmode;
  input mst_tx_reset;
  input mst_tx_dp_reset;
  input [2:0]INTF0_TX0_ch_txmargin;
  input [2:0]INTF0_TX0_ch_txpmaresetmask;
  input [3:0]INTF0_TX0_ch_txprbssel;
  input [4:0]INTF0_TX0_ch_txdiffctrl;
  input [4:0]INTF0_TX0_ch_txpippmstepsize;
  input [4:0]INTF0_TX0_ch_txpostcursor;
  input [4:0]INTF0_TX0_ch_txprecursor;
  input [6:0]INTF0_TX0_ch_txmaincursor;
  input [7:0]INTF0_TX0_ch_txctrl2;
  input [7:0]INTF0_TX0_ch_txrate;
  input INTF0_TX0_ch_txdapireset;
  input [1:0]INTF0_TX0_ch_txdapiresetmask;
  input INTF0_TX0_ch_txqpibiasen;
  input INTF0_TX0_ch_txqpiweakpu;
  input QUAD0_TX0_usrclk;
  input INTF0_RX0_ch_rxgearboxslip;
  input INTF0_RX0_ch_rxlatclk;
  input INTF0_RX0_ch_gtrxreset;
  input INTF0_RX0_ch_rxprogdivreset;
  input ch0_rxuserrdy;
  input INTF0_RX0_ch_rxcdrhold;
  input INTF0_RX0_ch_rxcdrovrden;
  input INTF0_RX0_ch_rxcdrreset;
  input [4:0]INTF0_RX0_ch_rxchbondi;
  input INTF0_RX0_ch_rxdapicodeovrden;
  input INTF0_RX0_ch_rxdapicodereset;
  input INTF0_RX0_ch_rxdlyalignreq;
  input INTF0_RX0_ch_rxeqtraining;
  input INTF0_RX0_ch_rxlpmen;
  input INTF0_RX0_ch_rxmldchaindone;
  input INTF0_RX0_ch_rxmldchainreq;
  input INTF0_RX0_ch_rxmlfinealignreq;
  input INTF0_RX0_ch_rxoobreset;
  input [4:0]INTF0_RX0_ch_rxpcsresetmask;
  input [1:0]INTF0_RX0_ch_rxpd;
  input INTF0_RX0_ch_rxphalignreq;
  input [1:0]INTF0_RX0_ch_rxphalignresetmask;
  input INTF0_RX0_ch_rxphdlypd;
  input INTF0_RX0_ch_rxphdlyreset;
  input INTF0_RX0_ch_rxphsetinitreq;
  input INTF0_RX0_ch_rxphshift180;
  input [6:0]INTF0_RX0_ch_rxpmaresetmask;
  input INTF0_RX0_ch_rxpolarity;
  input INTF0_RX0_ch_rxprbscntreset;
  input [3:0]INTF0_RX0_ch_rxprbssel;
  input [7:0]INTF0_RX0_ch_rxrate;
  input [1:0]INTF0_RX0_ch_rxresetmode;
  input mst_rx_reset;
  input mst_rx_dp_reset;
  input INTF0_RX0_ch_rxslide;
  input INTF0_RX0_ch_rxsyncallin;
  input INTF0_RX0_ch_rxtermination;
  input INTF0_RX0_ch_cdrbmcdrreq;
  input INTF0_RX0_ch_cdrfreqos;
  input INTF0_RX0_ch_cdrincpctrl;
  input INTF0_RX0_ch_cdrstepdir;
  input INTF0_RX0_ch_cdrstepsq;
  input INTF0_RX0_ch_cdrstepsx;
  input INTF0_RX0_ch_eyescanreset;
  input INTF0_RX0_ch_eyescantrigger;
  input INTF0_RX0_ch_dfehold;
  input INTF0_RX0_ch_dfeovrd;
  input INTF0_RX0_ch_rxdapireset;
  input [1:0]INTF0_RX0_ch_rxdapiresetmask;
  input INTF0_RX0_ch_rxqpien;
  input QUAD0_RX0_usrclk;
  input [2:0]QUAD0_ch0_loopback;
  input QUAD0_GTREFCLK0;
  input [31:0]QUAD0_gpi;
  input gtwiz_freerun_clk;
  input [3:0]QUAD0_rxp;
  input [3:0]QUAD0_rxn;

  wire INTF0_RX0_ch_cdrbmcdrreq;
  wire INTF0_RX0_ch_cdrfreqos;
  wire INTF0_RX0_ch_cdrincpctrl;
  wire INTF0_RX0_ch_cdrstepdir;
  wire INTF0_RX0_ch_cdrstepsq;
  wire INTF0_RX0_ch_cdrstepsx;
  wire INTF0_RX0_ch_dfehold;
  wire INTF0_RX0_ch_dfeovrd;
  wire INTF0_RX0_ch_eyescandataerror;
  wire INTF0_RX0_ch_eyescanreset;
  wire INTF0_RX0_ch_eyescantrigger;
  wire INTF0_RX0_ch_gtrxreset;
  wire [1:0]INTF0_RX0_ch_refdebugout;
  wire [7:0]INTF0_RX0_ch_rx10gstat;
  wire [2:0]INTF0_RX0_ch_rxbufstatus;
  wire INTF0_RX0_ch_rxbyteisaligned;
  wire INTF0_RX0_ch_rxbyterealign;
  wire INTF0_RX0_ch_rxcdrhold;
  wire INTF0_RX0_ch_rxcdrlock;
  wire INTF0_RX0_ch_rxcdrovrden;
  wire INTF0_RX0_ch_rxcdrphdone;
  wire INTF0_RX0_ch_rxcdrreset;
  wire INTF0_RX0_ch_rxchanbondseq;
  wire INTF0_RX0_ch_rxchanisaligned;
  wire INTF0_RX0_ch_rxchanrealign;
  wire [4:0]INTF0_RX0_ch_rxchbondi;
  wire [4:0]INTF0_RX0_ch_rxchbondo;
  wire [1:0]INTF0_RX0_ch_rxclkcorcnt;
  wire INTF0_RX0_ch_rxcominitdet;
  wire INTF0_RX0_ch_rxcommadet;
  wire INTF0_RX0_ch_rxcomsasdet;
  wire INTF0_RX0_ch_rxcomwakedet;
  wire [15:0]INTF0_RX0_ch_rxctrl0;
  wire [15:0]INTF0_RX0_ch_rxctrl1;
  wire [7:0]INTF0_RX0_ch_rxctrl2;
  wire [7:0]INTF0_RX0_ch_rxctrl3;
  wire INTF0_RX0_ch_rxdapicodeovrden;
  wire INTF0_RX0_ch_rxdapicodereset;
  wire INTF0_RX0_ch_rxdapireset;
  wire INTF0_RX0_ch_rxdapiresetdone;
  wire [1:0]INTF0_RX0_ch_rxdapiresetmask;
  wire [127:0]INTF0_RX0_ch_rxdata;
  wire [1:0]INTF0_RX0_ch_rxdatavalid;
  wire INTF0_RX0_ch_rxdebugpcsout;
  wire INTF0_RX0_ch_rxdlyalignerr;
  wire INTF0_RX0_ch_rxdlyalignprog;
  wire INTF0_RX0_ch_rxdlyalignreq;
  wire INTF0_RX0_ch_rxelecidle;
  wire INTF0_RX0_ch_rxeqtraining;
  wire INTF0_RX0_ch_rxfinealigndone;
  wire INTF0_RX0_ch_rxgearboxslip;
  wire [5:0]INTF0_RX0_ch_rxheader;
  wire [1:0]INTF0_RX0_ch_rxheadervalid;
  wire INTF0_RX0_ch_rxlatclk;
  wire INTF0_RX0_ch_rxlpmen;
  wire INTF0_RX0_ch_rxmldchaindone;
  wire INTF0_RX0_ch_rxmldchainreq;
  wire INTF0_RX0_ch_rxmlfinealignreq;
  wire INTF0_RX0_ch_rxoobreset;
  wire INTF0_RX0_ch_rxosintdone;
  wire [4:0]INTF0_RX0_ch_rxpcsresetmask;
  wire [1:0]INTF0_RX0_ch_rxpd;
  wire INTF0_RX0_ch_rxphaligndone;
  wire INTF0_RX0_ch_rxphalignerr;
  wire INTF0_RX0_ch_rxphalignreq;
  wire [1:0]INTF0_RX0_ch_rxphalignresetmask;
  wire INTF0_RX0_ch_rxphdlypd;
  wire INTF0_RX0_ch_rxphdlyreset;
  wire INTF0_RX0_ch_rxphdlyresetdone;
  wire INTF0_RX0_ch_rxphsetinitdone;
  wire INTF0_RX0_ch_rxphsetinitreq;
  wire INTF0_RX0_ch_rxphshift180;
  wire INTF0_RX0_ch_rxphshift180done;
  wire INTF0_RX0_ch_rxpkdet;
  wire [6:0]INTF0_RX0_ch_rxpmaresetmask;
  wire INTF0_RX0_ch_rxpolarity;
  wire INTF0_RX0_ch_rxprbscntreset;
  wire INTF0_RX0_ch_rxprbserr;
  wire INTF0_RX0_ch_rxprbslocked;
  wire [3:0]INTF0_RX0_ch_rxprbssel;
  wire INTF0_RX0_ch_rxprogdivreset;
  wire INTF0_RX0_ch_rxprogdivresetdone;
  wire INTF0_RX0_ch_rxqpien;
  wire INTF0_RX0_ch_rxqpisenn;
  wire INTF0_RX0_ch_rxqpisenp;
  wire [7:0]INTF0_RX0_ch_rxrate;
  wire INTF0_RX0_ch_rxresetdone;
  wire [1:0]INTF0_RX0_ch_rxresetmode;
  wire INTF0_RX0_ch_rxsimplexphystatus;
  wire INTF0_RX0_ch_rxslide;
  wire INTF0_RX0_ch_rxsliderdy;
  wire INTF0_RX0_ch_rxslipdone;
  wire [1:0]INTF0_RX0_ch_rxstartofseq;
  wire [2:0]INTF0_RX0_ch_rxstatus;
  wire INTF0_RX0_ch_rxsyncallin;
  wire INTF0_RX0_ch_rxsyncdone;
  wire INTF0_RX0_ch_rxtermination;
  wire INTF0_RX0_ch_rxvalid;
  wire INTF0_TX0_ch_gttxreset;
  wire INTF0_TX0_ch_tx10gstat;
  wire [1:0]INTF0_TX0_ch_txbufstatus;
  wire INTF0_TX0_ch_txcomfinish;
  wire INTF0_TX0_ch_txcominit;
  wire INTF0_TX0_ch_txcomsas;
  wire INTF0_TX0_ch_txcomwake;
  wire [15:0]INTF0_TX0_ch_txctrl0;
  wire [15:0]INTF0_TX0_ch_txctrl1;
  wire [7:0]INTF0_TX0_ch_txctrl2;
  wire INTF0_TX0_ch_txdapicodeovrden;
  wire INTF0_TX0_ch_txdapicodereset;
  wire INTF0_TX0_ch_txdapireset;
  wire INTF0_TX0_ch_txdapiresetdone;
  wire [1:0]INTF0_TX0_ch_txdapiresetmask;
  wire [127:0]INTF0_TX0_ch_txdata;
  wire INTF0_TX0_ch_txdccdone;
  wire INTF0_TX0_ch_txdebugpcsout;
  wire [1:0]INTF0_TX0_ch_txdeemph;
  wire INTF0_TX0_ch_txdetectrx;
  wire [4:0]INTF0_TX0_ch_txdiffctrl;
  wire INTF0_TX0_ch_txdlyalignerr;
  wire INTF0_TX0_ch_txdlyalignprog;
  wire INTF0_TX0_ch_txdlyalignreq;
  wire INTF0_TX0_ch_txelecidle;
  wire [5:0]INTF0_TX0_ch_txheader;
  wire INTF0_TX0_ch_txinhibit;
  wire INTF0_TX0_ch_txlatclk;
  wire [6:0]INTF0_TX0_ch_txmaincursor;
  wire [2:0]INTF0_TX0_ch_txmargin;
  wire INTF0_TX0_ch_txmldchaindone;
  wire INTF0_TX0_ch_txmldchainreq;
  wire INTF0_TX0_ch_txoneszeros;
  wire INTF0_TX0_ch_txpausedelayalign;
  wire INTF0_TX0_ch_txpcsresetmask;
  wire [1:0]INTF0_TX0_ch_txpd;
  wire INTF0_TX0_ch_txphaligndone;
  wire INTF0_TX0_ch_txphalignerr;
  wire INTF0_TX0_ch_txphalignoutrsvd;
  wire INTF0_TX0_ch_txphalignreq;
  wire [1:0]INTF0_TX0_ch_txphalignresetmask;
  wire INTF0_TX0_ch_txphdlypd;
  wire INTF0_TX0_ch_txphdlyreset;
  wire INTF0_TX0_ch_txphdlyresetdone;
  wire INTF0_TX0_ch_txphdlytstclk;
  wire INTF0_TX0_ch_txphsetinitdone;
  wire INTF0_TX0_ch_txphsetinitreq;
  wire INTF0_TX0_ch_txphshift180;
  wire INTF0_TX0_ch_txphshift180done;
  wire INTF0_TX0_ch_txpicodeovrden;
  wire INTF0_TX0_ch_txpicodereset;
  wire INTF0_TX0_ch_txpippmen;
  wire [4:0]INTF0_TX0_ch_txpippmstepsize;
  wire INTF0_TX0_ch_txpisopd;
  wire [2:0]INTF0_TX0_ch_txpmaresetmask;
  wire INTF0_TX0_ch_txpolarity;
  wire [4:0]INTF0_TX0_ch_txpostcursor;
  wire INTF0_TX0_ch_txprbsforceerr;
  wire [3:0]INTF0_TX0_ch_txprbssel;
  wire [4:0]INTF0_TX0_ch_txprecursor;
  wire INTF0_TX0_ch_txprogdivreset;
  wire INTF0_TX0_ch_txprogdivresetdone;
  wire INTF0_TX0_ch_txqpibiasen;
  wire INTF0_TX0_ch_txqpisenn;
  wire INTF0_TX0_ch_txqpisenp;
  wire INTF0_TX0_ch_txqpiweakpu;
  wire [7:0]INTF0_TX0_ch_txrate;
  wire INTF0_TX0_ch_txresetdone;
  wire [1:0]INTF0_TX0_ch_txresetmode;
  wire [6:0]INTF0_TX0_ch_txsequence;
  wire INTF0_TX0_ch_txswing;
  wire INTF0_TX0_ch_txswingouthigh;
  wire INTF0_TX0_ch_txswingoutlow;
  wire INTF0_TX0_ch_txsyncallin;
  wire INTF0_TX0_ch_txsyncdone;
  wire QUAD0_GTREFCLK0;
  wire QUAD0_RX0_outclk;
  wire QUAD0_RX0_usrclk;
  wire QUAD0_TX0_outclk;
  wire QUAD0_TX0_usrclk;
  wire [2:0]QUAD0_ch0_loopback;
  wire [31:0]QUAD0_gpi;
  wire [31:0]QUAD0_gpo;
  wire QUAD0_hsclk0_lcplllock;
  wire [3:0]QUAD0_rxn;
  wire [3:0]QUAD0_rxp;
  wire [3:0]QUAD0_txn;
  wire [3:0]QUAD0_txp;
  wire ch0_rxmstresetdone;
  wire ch0_rxpmaresetdone;
  wire ch0_rxuserrdy;
  wire ch0_txmstresetdone;
  wire ch0_txpmaresetdone;
  wire ch0_txuserrdy;
  wire gtpowergood;
  wire gtwiz_freerun_clk;
  wire mst_rx_dp_reset;
  wire mst_rx_reset;
  wire mst_tx_dp_reset;
  wire mst_tx_reset;

  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_quad_top quad_top_inst
       (.INTF0_RX0_ch_cdrbmcdrreq(INTF0_RX0_ch_cdrbmcdrreq),
        .INTF0_RX0_ch_cdrfreqos(INTF0_RX0_ch_cdrfreqos),
        .INTF0_RX0_ch_cdrincpctrl(INTF0_RX0_ch_cdrincpctrl),
        .INTF0_RX0_ch_cdrstepdir(INTF0_RX0_ch_cdrstepdir),
        .INTF0_RX0_ch_cdrstepsq(INTF0_RX0_ch_cdrstepsq),
        .INTF0_RX0_ch_cdrstepsx(INTF0_RX0_ch_cdrstepsx),
        .INTF0_RX0_ch_dfehold(INTF0_RX0_ch_dfehold),
        .INTF0_RX0_ch_dfeovrd(INTF0_RX0_ch_dfeovrd),
        .INTF0_RX0_ch_eyescandataerror(INTF0_RX0_ch_eyescandataerror),
        .INTF0_RX0_ch_eyescanreset(INTF0_RX0_ch_eyescanreset),
        .INTF0_RX0_ch_eyescantrigger(INTF0_RX0_ch_eyescantrigger),
        .INTF0_RX0_ch_gtrxreset(INTF0_RX0_ch_gtrxreset),
        .INTF0_RX0_ch_refdebugout(INTF0_RX0_ch_refdebugout),
        .INTF0_RX0_ch_rx10gstat(INTF0_RX0_ch_rx10gstat),
        .INTF0_RX0_ch_rxbufstatus(INTF0_RX0_ch_rxbufstatus),
        .INTF0_RX0_ch_rxbyteisaligned(INTF0_RX0_ch_rxbyteisaligned),
        .INTF0_RX0_ch_rxbyterealign(INTF0_RX0_ch_rxbyterealign),
        .INTF0_RX0_ch_rxcdrhold(INTF0_RX0_ch_rxcdrhold),
        .INTF0_RX0_ch_rxcdrlock(INTF0_RX0_ch_rxcdrlock),
        .INTF0_RX0_ch_rxcdrovrden(INTF0_RX0_ch_rxcdrovrden),
        .INTF0_RX0_ch_rxcdrphdone(INTF0_RX0_ch_rxcdrphdone),
        .INTF0_RX0_ch_rxcdrreset(INTF0_RX0_ch_rxcdrreset),
        .INTF0_RX0_ch_rxchanbondseq(INTF0_RX0_ch_rxchanbondseq),
        .INTF0_RX0_ch_rxchanisaligned(INTF0_RX0_ch_rxchanisaligned),
        .INTF0_RX0_ch_rxchanrealign(INTF0_RX0_ch_rxchanrealign),
        .INTF0_RX0_ch_rxchbondi(INTF0_RX0_ch_rxchbondi),
        .INTF0_RX0_ch_rxchbondo(INTF0_RX0_ch_rxchbondo),
        .INTF0_RX0_ch_rxclkcorcnt(INTF0_RX0_ch_rxclkcorcnt),
        .INTF0_RX0_ch_rxcominitdet(INTF0_RX0_ch_rxcominitdet),
        .INTF0_RX0_ch_rxcommadet(INTF0_RX0_ch_rxcommadet),
        .INTF0_RX0_ch_rxcomsasdet(INTF0_RX0_ch_rxcomsasdet),
        .INTF0_RX0_ch_rxcomwakedet(INTF0_RX0_ch_rxcomwakedet),
        .INTF0_RX0_ch_rxctrl0(INTF0_RX0_ch_rxctrl0),
        .INTF0_RX0_ch_rxctrl1(INTF0_RX0_ch_rxctrl1),
        .INTF0_RX0_ch_rxctrl2(INTF0_RX0_ch_rxctrl2),
        .INTF0_RX0_ch_rxctrl3(INTF0_RX0_ch_rxctrl3),
        .INTF0_RX0_ch_rxdapicodeovrden(INTF0_RX0_ch_rxdapicodeovrden),
        .INTF0_RX0_ch_rxdapicodereset(INTF0_RX0_ch_rxdapicodereset),
        .INTF0_RX0_ch_rxdapireset(INTF0_RX0_ch_rxdapireset),
        .INTF0_RX0_ch_rxdapiresetdone(INTF0_RX0_ch_rxdapiresetdone),
        .INTF0_RX0_ch_rxdapiresetmask(INTF0_RX0_ch_rxdapiresetmask),
        .INTF0_RX0_ch_rxdata(INTF0_RX0_ch_rxdata),
        .INTF0_RX0_ch_rxdatavalid(INTF0_RX0_ch_rxdatavalid),
        .INTF0_RX0_ch_rxdebugpcsout(INTF0_RX0_ch_rxdebugpcsout),
        .INTF0_RX0_ch_rxdlyalignerr(INTF0_RX0_ch_rxdlyalignerr),
        .INTF0_RX0_ch_rxdlyalignprog(INTF0_RX0_ch_rxdlyalignprog),
        .INTF0_RX0_ch_rxdlyalignreq(INTF0_RX0_ch_rxdlyalignreq),
        .INTF0_RX0_ch_rxelecidle(INTF0_RX0_ch_rxelecidle),
        .INTF0_RX0_ch_rxeqtraining(INTF0_RX0_ch_rxeqtraining),
        .INTF0_RX0_ch_rxfinealigndone(INTF0_RX0_ch_rxfinealigndone),
        .INTF0_RX0_ch_rxgearboxslip(INTF0_RX0_ch_rxgearboxslip),
        .INTF0_RX0_ch_rxheader(INTF0_RX0_ch_rxheader),
        .INTF0_RX0_ch_rxheadervalid(INTF0_RX0_ch_rxheadervalid),
        .INTF0_RX0_ch_rxlatclk(INTF0_RX0_ch_rxlatclk),
        .INTF0_RX0_ch_rxlpmen(INTF0_RX0_ch_rxlpmen),
        .INTF0_RX0_ch_rxmldchaindone(INTF0_RX0_ch_rxmldchaindone),
        .INTF0_RX0_ch_rxmldchainreq(INTF0_RX0_ch_rxmldchainreq),
        .INTF0_RX0_ch_rxmlfinealignreq(INTF0_RX0_ch_rxmlfinealignreq),
        .INTF0_RX0_ch_rxoobreset(INTF0_RX0_ch_rxoobreset),
        .INTF0_RX0_ch_rxosintdone(INTF0_RX0_ch_rxosintdone),
        .INTF0_RX0_ch_rxpcsresetmask(INTF0_RX0_ch_rxpcsresetmask),
        .INTF0_RX0_ch_rxpd(INTF0_RX0_ch_rxpd),
        .INTF0_RX0_ch_rxphaligndone(INTF0_RX0_ch_rxphaligndone),
        .INTF0_RX0_ch_rxphalignerr(INTF0_RX0_ch_rxphalignerr),
        .INTF0_RX0_ch_rxphalignreq(INTF0_RX0_ch_rxphalignreq),
        .INTF0_RX0_ch_rxphalignresetmask(INTF0_RX0_ch_rxphalignresetmask),
        .INTF0_RX0_ch_rxphdlypd(INTF0_RX0_ch_rxphdlypd),
        .INTF0_RX0_ch_rxphdlyreset(INTF0_RX0_ch_rxphdlyreset),
        .INTF0_RX0_ch_rxphdlyresetdone(INTF0_RX0_ch_rxphdlyresetdone),
        .INTF0_RX0_ch_rxphsetinitdone(INTF0_RX0_ch_rxphsetinitdone),
        .INTF0_RX0_ch_rxphsetinitreq(INTF0_RX0_ch_rxphsetinitreq),
        .INTF0_RX0_ch_rxphshift180(INTF0_RX0_ch_rxphshift180),
        .INTF0_RX0_ch_rxphshift180done(INTF0_RX0_ch_rxphshift180done),
        .INTF0_RX0_ch_rxpkdet(INTF0_RX0_ch_rxpkdet),
        .INTF0_RX0_ch_rxpmaresetmask(INTF0_RX0_ch_rxpmaresetmask),
        .INTF0_RX0_ch_rxpolarity(INTF0_RX0_ch_rxpolarity),
        .INTF0_RX0_ch_rxprbscntreset(INTF0_RX0_ch_rxprbscntreset),
        .INTF0_RX0_ch_rxprbserr(INTF0_RX0_ch_rxprbserr),
        .INTF0_RX0_ch_rxprbslocked(INTF0_RX0_ch_rxprbslocked),
        .INTF0_RX0_ch_rxprbssel(INTF0_RX0_ch_rxprbssel),
        .INTF0_RX0_ch_rxprogdivreset(INTF0_RX0_ch_rxprogdivreset),
        .INTF0_RX0_ch_rxprogdivresetdone(INTF0_RX0_ch_rxprogdivresetdone),
        .INTF0_RX0_ch_rxqpien(INTF0_RX0_ch_rxqpien),
        .INTF0_RX0_ch_rxqpisenn(INTF0_RX0_ch_rxqpisenn),
        .INTF0_RX0_ch_rxqpisenp(INTF0_RX0_ch_rxqpisenp),
        .INTF0_RX0_ch_rxrate(INTF0_RX0_ch_rxrate),
        .INTF0_RX0_ch_rxresetdone(INTF0_RX0_ch_rxresetdone),
        .INTF0_RX0_ch_rxresetmode(INTF0_RX0_ch_rxresetmode),
        .INTF0_RX0_ch_rxsimplexphystatus(INTF0_RX0_ch_rxsimplexphystatus),
        .INTF0_RX0_ch_rxslide(INTF0_RX0_ch_rxslide),
        .INTF0_RX0_ch_rxsliderdy(INTF0_RX0_ch_rxsliderdy),
        .INTF0_RX0_ch_rxslipdone(INTF0_RX0_ch_rxslipdone),
        .INTF0_RX0_ch_rxstartofseq(INTF0_RX0_ch_rxstartofseq),
        .INTF0_RX0_ch_rxstatus(INTF0_RX0_ch_rxstatus),
        .INTF0_RX0_ch_rxsyncallin(INTF0_RX0_ch_rxsyncallin),
        .INTF0_RX0_ch_rxsyncdone(INTF0_RX0_ch_rxsyncdone),
        .INTF0_RX0_ch_rxtermination(INTF0_RX0_ch_rxtermination),
        .INTF0_RX0_ch_rxvalid(INTF0_RX0_ch_rxvalid),
        .INTF0_TX0_ch_gttxreset(INTF0_TX0_ch_gttxreset),
        .INTF0_TX0_ch_tx10gstat(INTF0_TX0_ch_tx10gstat),
        .INTF0_TX0_ch_txbufstatus(INTF0_TX0_ch_txbufstatus),
        .INTF0_TX0_ch_txcomfinish(INTF0_TX0_ch_txcomfinish),
        .INTF0_TX0_ch_txcominit(INTF0_TX0_ch_txcominit),
        .INTF0_TX0_ch_txcomsas(INTF0_TX0_ch_txcomsas),
        .INTF0_TX0_ch_txcomwake(INTF0_TX0_ch_txcomwake),
        .INTF0_TX0_ch_txctrl0(INTF0_TX0_ch_txctrl0),
        .INTF0_TX0_ch_txctrl1(INTF0_TX0_ch_txctrl1),
        .INTF0_TX0_ch_txctrl2(INTF0_TX0_ch_txctrl2),
        .INTF0_TX0_ch_txdapicodeovrden(INTF0_TX0_ch_txdapicodeovrden),
        .INTF0_TX0_ch_txdapicodereset(INTF0_TX0_ch_txdapicodereset),
        .INTF0_TX0_ch_txdapireset(INTF0_TX0_ch_txdapireset),
        .INTF0_TX0_ch_txdapiresetdone(INTF0_TX0_ch_txdapiresetdone),
        .INTF0_TX0_ch_txdapiresetmask(INTF0_TX0_ch_txdapiresetmask),
        .INTF0_TX0_ch_txdata(INTF0_TX0_ch_txdata),
        .INTF0_TX0_ch_txdccdone(INTF0_TX0_ch_txdccdone),
        .INTF0_TX0_ch_txdebugpcsout(INTF0_TX0_ch_txdebugpcsout),
        .INTF0_TX0_ch_txdeemph(INTF0_TX0_ch_txdeemph),
        .INTF0_TX0_ch_txdetectrx(INTF0_TX0_ch_txdetectrx),
        .INTF0_TX0_ch_txdiffctrl(INTF0_TX0_ch_txdiffctrl),
        .INTF0_TX0_ch_txdlyalignerr(INTF0_TX0_ch_txdlyalignerr),
        .INTF0_TX0_ch_txdlyalignprog(INTF0_TX0_ch_txdlyalignprog),
        .INTF0_TX0_ch_txdlyalignreq(INTF0_TX0_ch_txdlyalignreq),
        .INTF0_TX0_ch_txelecidle(INTF0_TX0_ch_txelecidle),
        .INTF0_TX0_ch_txheader(INTF0_TX0_ch_txheader),
        .INTF0_TX0_ch_txinhibit(INTF0_TX0_ch_txinhibit),
        .INTF0_TX0_ch_txlatclk(INTF0_TX0_ch_txlatclk),
        .INTF0_TX0_ch_txmaincursor(INTF0_TX0_ch_txmaincursor),
        .INTF0_TX0_ch_txmargin(INTF0_TX0_ch_txmargin),
        .INTF0_TX0_ch_txmldchaindone(INTF0_TX0_ch_txmldchaindone),
        .INTF0_TX0_ch_txmldchainreq(INTF0_TX0_ch_txmldchainreq),
        .INTF0_TX0_ch_txoneszeros(INTF0_TX0_ch_txoneszeros),
        .INTF0_TX0_ch_txpausedelayalign(INTF0_TX0_ch_txpausedelayalign),
        .INTF0_TX0_ch_txpcsresetmask(INTF0_TX0_ch_txpcsresetmask),
        .INTF0_TX0_ch_txpd(INTF0_TX0_ch_txpd),
        .INTF0_TX0_ch_txphaligndone(INTF0_TX0_ch_txphaligndone),
        .INTF0_TX0_ch_txphalignerr(INTF0_TX0_ch_txphalignerr),
        .INTF0_TX0_ch_txphalignoutrsvd(INTF0_TX0_ch_txphalignoutrsvd),
        .INTF0_TX0_ch_txphalignreq(INTF0_TX0_ch_txphalignreq),
        .INTF0_TX0_ch_txphalignresetmask(INTF0_TX0_ch_txphalignresetmask),
        .INTF0_TX0_ch_txphdlypd(INTF0_TX0_ch_txphdlypd),
        .INTF0_TX0_ch_txphdlyreset(INTF0_TX0_ch_txphdlyreset),
        .INTF0_TX0_ch_txphdlyresetdone(INTF0_TX0_ch_txphdlyresetdone),
        .INTF0_TX0_ch_txphdlytstclk(INTF0_TX0_ch_txphdlytstclk),
        .INTF0_TX0_ch_txphsetinitdone(INTF0_TX0_ch_txphsetinitdone),
        .INTF0_TX0_ch_txphsetinitreq(INTF0_TX0_ch_txphsetinitreq),
        .INTF0_TX0_ch_txphshift180(INTF0_TX0_ch_txphshift180),
        .INTF0_TX0_ch_txphshift180done(INTF0_TX0_ch_txphshift180done),
        .INTF0_TX0_ch_txpicodeovrden(INTF0_TX0_ch_txpicodeovrden),
        .INTF0_TX0_ch_txpicodereset(INTF0_TX0_ch_txpicodereset),
        .INTF0_TX0_ch_txpippmen(INTF0_TX0_ch_txpippmen),
        .INTF0_TX0_ch_txpippmstepsize(INTF0_TX0_ch_txpippmstepsize),
        .INTF0_TX0_ch_txpisopd(INTF0_TX0_ch_txpisopd),
        .INTF0_TX0_ch_txpmaresetmask(INTF0_TX0_ch_txpmaresetmask),
        .INTF0_TX0_ch_txpolarity(INTF0_TX0_ch_txpolarity),
        .INTF0_TX0_ch_txpostcursor(INTF0_TX0_ch_txpostcursor),
        .INTF0_TX0_ch_txprbsforceerr(INTF0_TX0_ch_txprbsforceerr),
        .INTF0_TX0_ch_txprbssel(INTF0_TX0_ch_txprbssel),
        .INTF0_TX0_ch_txprecursor(INTF0_TX0_ch_txprecursor),
        .INTF0_TX0_ch_txprogdivreset(INTF0_TX0_ch_txprogdivreset),
        .INTF0_TX0_ch_txprogdivresetdone(INTF0_TX0_ch_txprogdivresetdone),
        .INTF0_TX0_ch_txqpibiasen(INTF0_TX0_ch_txqpibiasen),
        .INTF0_TX0_ch_txqpisenn(INTF0_TX0_ch_txqpisenn),
        .INTF0_TX0_ch_txqpisenp(INTF0_TX0_ch_txqpisenp),
        .INTF0_TX0_ch_txqpiweakpu(INTF0_TX0_ch_txqpiweakpu),
        .INTF0_TX0_ch_txrate(INTF0_TX0_ch_txrate),
        .INTF0_TX0_ch_txresetdone(INTF0_TX0_ch_txresetdone),
        .INTF0_TX0_ch_txresetmode(INTF0_TX0_ch_txresetmode),
        .INTF0_TX0_ch_txsequence(INTF0_TX0_ch_txsequence),
        .INTF0_TX0_ch_txswing(INTF0_TX0_ch_txswing),
        .INTF0_TX0_ch_txswingouthigh(INTF0_TX0_ch_txswingouthigh),
        .INTF0_TX0_ch_txswingoutlow(INTF0_TX0_ch_txswingoutlow),
        .INTF0_TX0_ch_txsyncallin(INTF0_TX0_ch_txsyncallin),
        .INTF0_TX0_ch_txsyncdone(INTF0_TX0_ch_txsyncdone),
        .QUAD0_GTREFCLK0(QUAD0_GTREFCLK0),
        .QUAD0_RX0_outclk(QUAD0_RX0_outclk),
        .QUAD0_RX0_usrclk(QUAD0_RX0_usrclk),
        .QUAD0_TX0_outclk(QUAD0_TX0_outclk),
        .QUAD0_TX0_usrclk(QUAD0_TX0_usrclk),
        .QUAD0_ch0_loopback(QUAD0_ch0_loopback),
        .QUAD0_gpi(QUAD0_gpi),
        .QUAD0_gpo(QUAD0_gpo),
        .QUAD0_hsclk0_lcplllock(QUAD0_hsclk0_lcplllock),
        .QUAD0_rxn(QUAD0_rxn),
        .QUAD0_rxp(QUAD0_rxp),
        .QUAD0_txn(QUAD0_txn),
        .QUAD0_txp(QUAD0_txp),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .ch0_rxuserrdy(ch0_rxuserrdy),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .ch0_txuserrdy(ch0_txuserrdy),
        .gtpowergood(gtpowergood),
        .gtwiz_freerun_clk(gtwiz_freerun_clk),
        .mst_rx_dp_reset(mst_rx_dp_reset),
        .mst_rx_reset(mst_rx_reset),
        .mst_tx_dp_reset(mst_tx_dp_reset),
        .mst_tx_reset(mst_tx_reset));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_quad_top
   (QUAD0_hsclk0_lcplllock,
    gtpowergood,
    INTF0_TX0_ch_tx10gstat,
    INTF0_TX0_ch_txcomfinish,
    INTF0_TX0_ch_txdccdone,
    INTF0_TX0_ch_txdlyalignerr,
    INTF0_TX0_ch_txdlyalignprog,
    INTF0_TX0_ch_txphaligndone,
    INTF0_TX0_ch_txphalignerr,
    INTF0_TX0_ch_txphalignoutrsvd,
    INTF0_TX0_ch_txphdlyresetdone,
    INTF0_TX0_ch_txphsetinitdone,
    INTF0_TX0_ch_txphshift180done,
    INTF0_TX0_ch_txsyncdone,
    INTF0_TX0_ch_txbufstatus,
    ch0_txmstresetdone,
    INTF0_TX0_ch_txprogdivresetdone,
    ch0_txpmaresetdone,
    INTF0_TX0_ch_txresetdone,
    INTF0_TX0_ch_txdapiresetdone,
    INTF0_TX0_ch_txdebugpcsout,
    INTF0_TX0_ch_txqpisenn,
    INTF0_TX0_ch_txqpisenp,
    INTF0_TX0_ch_txswingouthigh,
    INTF0_TX0_ch_txswingoutlow,
    QUAD0_TX0_outclk,
    INTF0_RX0_ch_rxdata,
    INTF0_RX0_ch_rxdatavalid,
    INTF0_RX0_ch_rxheader,
    INTF0_RX0_ch_rxprogdivresetdone,
    ch0_rxpmaresetdone,
    INTF0_RX0_ch_rxresetdone,
    INTF0_RX0_ch_rx10gstat,
    INTF0_RX0_ch_rxbufstatus,
    INTF0_RX0_ch_rxbyteisaligned,
    INTF0_RX0_ch_rxbyterealign,
    INTF0_RX0_ch_rxcdrlock,
    INTF0_RX0_ch_rxcdrphdone,
    INTF0_RX0_ch_rxchanbondseq,
    INTF0_RX0_ch_rxchanisaligned,
    INTF0_RX0_ch_rxchanrealign,
    INTF0_RX0_ch_rxchbondo,
    INTF0_RX0_ch_rxclkcorcnt,
    INTF0_RX0_ch_rxcominitdet,
    INTF0_RX0_ch_rxcommadet,
    INTF0_RX0_ch_rxcomsasdet,
    INTF0_RX0_ch_rxcomwakedet,
    INTF0_RX0_ch_rxctrl0,
    INTF0_RX0_ch_rxctrl1,
    INTF0_RX0_ch_rxctrl2,
    INTF0_RX0_ch_rxctrl3,
    INTF0_RX0_ch_rxdlyalignerr,
    INTF0_RX0_ch_rxdlyalignprog,
    INTF0_RX0_ch_rxelecidle,
    INTF0_RX0_ch_rxfinealigndone,
    INTF0_RX0_ch_rxheadervalid,
    INTF0_RX0_ch_rxosintdone,
    INTF0_RX0_ch_rxphaligndone,
    INTF0_RX0_ch_rxphalignerr,
    INTF0_RX0_ch_rxphdlyresetdone,
    INTF0_RX0_ch_rxphsetinitdone,
    INTF0_RX0_ch_rxphshift180done,
    INTF0_RX0_ch_rxprbserr,
    INTF0_RX0_ch_rxprbslocked,
    ch0_rxmstresetdone,
    INTF0_RX0_ch_rxsliderdy,
    INTF0_RX0_ch_rxstartofseq,
    INTF0_RX0_ch_rxstatus,
    INTF0_RX0_ch_rxsyncdone,
    INTF0_RX0_ch_rxvalid,
    INTF0_RX0_ch_eyescandataerror,
    INTF0_RX0_ch_refdebugout,
    INTF0_RX0_ch_rxdapiresetdone,
    INTF0_RX0_ch_rxdebugpcsout,
    INTF0_RX0_ch_rxpkdet,
    INTF0_RX0_ch_rxqpisenn,
    INTF0_RX0_ch_rxqpisenp,
    INTF0_RX0_ch_rxsimplexphystatus,
    INTF0_RX0_ch_rxslipdone,
    QUAD0_RX0_outclk,
    QUAD0_gpo,
    QUAD0_txp,
    QUAD0_txn,
    INTF0_TX0_ch_txdata,
    INTF0_TX0_ch_txheader,
    INTF0_TX0_ch_txsequence,
    INTF0_TX0_ch_gttxreset,
    INTF0_TX0_ch_txprogdivreset,
    ch0_txuserrdy,
    INTF0_TX0_ch_txphalignresetmask,
    INTF0_TX0_ch_txcominit,
    INTF0_TX0_ch_txcomsas,
    INTF0_TX0_ch_txcomwake,
    INTF0_TX0_ch_txdapicodeovrden,
    INTF0_TX0_ch_txdapicodereset,
    INTF0_TX0_ch_txdetectrx,
    INTF0_TX0_ch_txlatclk,
    INTF0_TX0_ch_txphdlytstclk,
    INTF0_TX0_ch_txdlyalignreq,
    INTF0_TX0_ch_txelecidle,
    INTF0_TX0_ch_txinhibit,
    INTF0_TX0_ch_txmldchaindone,
    INTF0_TX0_ch_txmldchainreq,
    INTF0_TX0_ch_txoneszeros,
    INTF0_TX0_ch_txpausedelayalign,
    INTF0_TX0_ch_txpcsresetmask,
    INTF0_TX0_ch_txphalignreq,
    INTF0_TX0_ch_txphdlypd,
    INTF0_TX0_ch_txphdlyreset,
    INTF0_TX0_ch_txphsetinitreq,
    INTF0_TX0_ch_txphshift180,
    INTF0_TX0_ch_txpicodeovrden,
    INTF0_TX0_ch_txpicodereset,
    INTF0_TX0_ch_txpippmen,
    INTF0_TX0_ch_txpisopd,
    INTF0_TX0_ch_txpolarity,
    INTF0_TX0_ch_txprbsforceerr,
    INTF0_TX0_ch_txswing,
    INTF0_TX0_ch_txsyncallin,
    INTF0_TX0_ch_txctrl0,
    INTF0_TX0_ch_txctrl1,
    INTF0_TX0_ch_txdeemph,
    INTF0_TX0_ch_txpd,
    INTF0_TX0_ch_txresetmode,
    mst_tx_reset,
    mst_tx_dp_reset,
    INTF0_TX0_ch_txmargin,
    INTF0_TX0_ch_txpmaresetmask,
    INTF0_TX0_ch_txprbssel,
    INTF0_TX0_ch_txdiffctrl,
    INTF0_TX0_ch_txpippmstepsize,
    INTF0_TX0_ch_txpostcursor,
    INTF0_TX0_ch_txprecursor,
    INTF0_TX0_ch_txmaincursor,
    INTF0_TX0_ch_txctrl2,
    INTF0_TX0_ch_txrate,
    INTF0_TX0_ch_txdapireset,
    INTF0_TX0_ch_txdapiresetmask,
    INTF0_TX0_ch_txqpibiasen,
    INTF0_TX0_ch_txqpiweakpu,
    QUAD0_TX0_usrclk,
    INTF0_RX0_ch_rxgearboxslip,
    INTF0_RX0_ch_rxlatclk,
    INTF0_RX0_ch_gtrxreset,
    INTF0_RX0_ch_rxprogdivreset,
    ch0_rxuserrdy,
    INTF0_RX0_ch_rxcdrhold,
    INTF0_RX0_ch_rxcdrovrden,
    INTF0_RX0_ch_rxcdrreset,
    INTF0_RX0_ch_rxchbondi,
    INTF0_RX0_ch_rxdapicodeovrden,
    INTF0_RX0_ch_rxdapicodereset,
    INTF0_RX0_ch_rxdlyalignreq,
    INTF0_RX0_ch_rxeqtraining,
    INTF0_RX0_ch_rxlpmen,
    INTF0_RX0_ch_rxmldchaindone,
    INTF0_RX0_ch_rxmldchainreq,
    INTF0_RX0_ch_rxmlfinealignreq,
    INTF0_RX0_ch_rxoobreset,
    INTF0_RX0_ch_rxpcsresetmask,
    INTF0_RX0_ch_rxpd,
    INTF0_RX0_ch_rxphalignreq,
    INTF0_RX0_ch_rxphalignresetmask,
    INTF0_RX0_ch_rxphdlypd,
    INTF0_RX0_ch_rxphdlyreset,
    INTF0_RX0_ch_rxphsetinitreq,
    INTF0_RX0_ch_rxphshift180,
    INTF0_RX0_ch_rxpmaresetmask,
    INTF0_RX0_ch_rxpolarity,
    INTF0_RX0_ch_rxprbscntreset,
    INTF0_RX0_ch_rxprbssel,
    INTF0_RX0_ch_rxrate,
    INTF0_RX0_ch_rxresetmode,
    mst_rx_reset,
    mst_rx_dp_reset,
    INTF0_RX0_ch_rxslide,
    INTF0_RX0_ch_rxsyncallin,
    INTF0_RX0_ch_rxtermination,
    INTF0_RX0_ch_cdrbmcdrreq,
    INTF0_RX0_ch_cdrfreqos,
    INTF0_RX0_ch_cdrincpctrl,
    INTF0_RX0_ch_cdrstepdir,
    INTF0_RX0_ch_cdrstepsq,
    INTF0_RX0_ch_cdrstepsx,
    INTF0_RX0_ch_eyescanreset,
    INTF0_RX0_ch_eyescantrigger,
    INTF0_RX0_ch_dfehold,
    INTF0_RX0_ch_dfeovrd,
    INTF0_RX0_ch_rxdapireset,
    INTF0_RX0_ch_rxdapiresetmask,
    INTF0_RX0_ch_rxqpien,
    QUAD0_RX0_usrclk,
    QUAD0_ch0_loopback,
    QUAD0_GTREFCLK0,
    QUAD0_gpi,
    gtwiz_freerun_clk,
    QUAD0_rxp,
    QUAD0_rxn);
  output QUAD0_hsclk0_lcplllock;
  output gtpowergood;
  output INTF0_TX0_ch_tx10gstat;
  output INTF0_TX0_ch_txcomfinish;
  output INTF0_TX0_ch_txdccdone;
  output INTF0_TX0_ch_txdlyalignerr;
  output INTF0_TX0_ch_txdlyalignprog;
  output INTF0_TX0_ch_txphaligndone;
  output INTF0_TX0_ch_txphalignerr;
  output INTF0_TX0_ch_txphalignoutrsvd;
  output INTF0_TX0_ch_txphdlyresetdone;
  output INTF0_TX0_ch_txphsetinitdone;
  output INTF0_TX0_ch_txphshift180done;
  output INTF0_TX0_ch_txsyncdone;
  output [1:0]INTF0_TX0_ch_txbufstatus;
  output ch0_txmstresetdone;
  output INTF0_TX0_ch_txprogdivresetdone;
  output ch0_txpmaresetdone;
  output INTF0_TX0_ch_txresetdone;
  output INTF0_TX0_ch_txdapiresetdone;
  output INTF0_TX0_ch_txdebugpcsout;
  output INTF0_TX0_ch_txqpisenn;
  output INTF0_TX0_ch_txqpisenp;
  output INTF0_TX0_ch_txswingouthigh;
  output INTF0_TX0_ch_txswingoutlow;
  output QUAD0_TX0_outclk;
  output [127:0]INTF0_RX0_ch_rxdata;
  output [1:0]INTF0_RX0_ch_rxdatavalid;
  output [5:0]INTF0_RX0_ch_rxheader;
  output INTF0_RX0_ch_rxprogdivresetdone;
  output ch0_rxpmaresetdone;
  output INTF0_RX0_ch_rxresetdone;
  output [7:0]INTF0_RX0_ch_rx10gstat;
  output [2:0]INTF0_RX0_ch_rxbufstatus;
  output INTF0_RX0_ch_rxbyteisaligned;
  output INTF0_RX0_ch_rxbyterealign;
  output INTF0_RX0_ch_rxcdrlock;
  output INTF0_RX0_ch_rxcdrphdone;
  output INTF0_RX0_ch_rxchanbondseq;
  output INTF0_RX0_ch_rxchanisaligned;
  output INTF0_RX0_ch_rxchanrealign;
  output [4:0]INTF0_RX0_ch_rxchbondo;
  output [1:0]INTF0_RX0_ch_rxclkcorcnt;
  output INTF0_RX0_ch_rxcominitdet;
  output INTF0_RX0_ch_rxcommadet;
  output INTF0_RX0_ch_rxcomsasdet;
  output INTF0_RX0_ch_rxcomwakedet;
  output [15:0]INTF0_RX0_ch_rxctrl0;
  output [15:0]INTF0_RX0_ch_rxctrl1;
  output [7:0]INTF0_RX0_ch_rxctrl2;
  output [7:0]INTF0_RX0_ch_rxctrl3;
  output INTF0_RX0_ch_rxdlyalignerr;
  output INTF0_RX0_ch_rxdlyalignprog;
  output INTF0_RX0_ch_rxelecidle;
  output INTF0_RX0_ch_rxfinealigndone;
  output [1:0]INTF0_RX0_ch_rxheadervalid;
  output INTF0_RX0_ch_rxosintdone;
  output INTF0_RX0_ch_rxphaligndone;
  output INTF0_RX0_ch_rxphalignerr;
  output INTF0_RX0_ch_rxphdlyresetdone;
  output INTF0_RX0_ch_rxphsetinitdone;
  output INTF0_RX0_ch_rxphshift180done;
  output INTF0_RX0_ch_rxprbserr;
  output INTF0_RX0_ch_rxprbslocked;
  output ch0_rxmstresetdone;
  output INTF0_RX0_ch_rxsliderdy;
  output [1:0]INTF0_RX0_ch_rxstartofseq;
  output [2:0]INTF0_RX0_ch_rxstatus;
  output INTF0_RX0_ch_rxsyncdone;
  output INTF0_RX0_ch_rxvalid;
  output INTF0_RX0_ch_eyescandataerror;
  output [1:0]INTF0_RX0_ch_refdebugout;
  output INTF0_RX0_ch_rxdapiresetdone;
  output INTF0_RX0_ch_rxdebugpcsout;
  output INTF0_RX0_ch_rxpkdet;
  output INTF0_RX0_ch_rxqpisenn;
  output INTF0_RX0_ch_rxqpisenp;
  output INTF0_RX0_ch_rxsimplexphystatus;
  output INTF0_RX0_ch_rxslipdone;
  output QUAD0_RX0_outclk;
  output [31:0]QUAD0_gpo;
  output [3:0]QUAD0_txp;
  output [3:0]QUAD0_txn;
  input [127:0]INTF0_TX0_ch_txdata;
  input [5:0]INTF0_TX0_ch_txheader;
  input [6:0]INTF0_TX0_ch_txsequence;
  input INTF0_TX0_ch_gttxreset;
  input INTF0_TX0_ch_txprogdivreset;
  input ch0_txuserrdy;
  input [1:0]INTF0_TX0_ch_txphalignresetmask;
  input INTF0_TX0_ch_txcominit;
  input INTF0_TX0_ch_txcomsas;
  input INTF0_TX0_ch_txcomwake;
  input INTF0_TX0_ch_txdapicodeovrden;
  input INTF0_TX0_ch_txdapicodereset;
  input INTF0_TX0_ch_txdetectrx;
  input INTF0_TX0_ch_txlatclk;
  input INTF0_TX0_ch_txphdlytstclk;
  input INTF0_TX0_ch_txdlyalignreq;
  input INTF0_TX0_ch_txelecidle;
  input INTF0_TX0_ch_txinhibit;
  input INTF0_TX0_ch_txmldchaindone;
  input INTF0_TX0_ch_txmldchainreq;
  input INTF0_TX0_ch_txoneszeros;
  input INTF0_TX0_ch_txpausedelayalign;
  input INTF0_TX0_ch_txpcsresetmask;
  input INTF0_TX0_ch_txphalignreq;
  input INTF0_TX0_ch_txphdlypd;
  input INTF0_TX0_ch_txphdlyreset;
  input INTF0_TX0_ch_txphsetinitreq;
  input INTF0_TX0_ch_txphshift180;
  input INTF0_TX0_ch_txpicodeovrden;
  input INTF0_TX0_ch_txpicodereset;
  input INTF0_TX0_ch_txpippmen;
  input INTF0_TX0_ch_txpisopd;
  input INTF0_TX0_ch_txpolarity;
  input INTF0_TX0_ch_txprbsforceerr;
  input INTF0_TX0_ch_txswing;
  input INTF0_TX0_ch_txsyncallin;
  input [15:0]INTF0_TX0_ch_txctrl0;
  input [15:0]INTF0_TX0_ch_txctrl1;
  input [1:0]INTF0_TX0_ch_txdeemph;
  input [1:0]INTF0_TX0_ch_txpd;
  input [1:0]INTF0_TX0_ch_txresetmode;
  input mst_tx_reset;
  input mst_tx_dp_reset;
  input [2:0]INTF0_TX0_ch_txmargin;
  input [2:0]INTF0_TX0_ch_txpmaresetmask;
  input [3:0]INTF0_TX0_ch_txprbssel;
  input [4:0]INTF0_TX0_ch_txdiffctrl;
  input [4:0]INTF0_TX0_ch_txpippmstepsize;
  input [4:0]INTF0_TX0_ch_txpostcursor;
  input [4:0]INTF0_TX0_ch_txprecursor;
  input [6:0]INTF0_TX0_ch_txmaincursor;
  input [7:0]INTF0_TX0_ch_txctrl2;
  input [7:0]INTF0_TX0_ch_txrate;
  input INTF0_TX0_ch_txdapireset;
  input [1:0]INTF0_TX0_ch_txdapiresetmask;
  input INTF0_TX0_ch_txqpibiasen;
  input INTF0_TX0_ch_txqpiweakpu;
  input QUAD0_TX0_usrclk;
  input INTF0_RX0_ch_rxgearboxslip;
  input INTF0_RX0_ch_rxlatclk;
  input INTF0_RX0_ch_gtrxreset;
  input INTF0_RX0_ch_rxprogdivreset;
  input ch0_rxuserrdy;
  input INTF0_RX0_ch_rxcdrhold;
  input INTF0_RX0_ch_rxcdrovrden;
  input INTF0_RX0_ch_rxcdrreset;
  input [4:0]INTF0_RX0_ch_rxchbondi;
  input INTF0_RX0_ch_rxdapicodeovrden;
  input INTF0_RX0_ch_rxdapicodereset;
  input INTF0_RX0_ch_rxdlyalignreq;
  input INTF0_RX0_ch_rxeqtraining;
  input INTF0_RX0_ch_rxlpmen;
  input INTF0_RX0_ch_rxmldchaindone;
  input INTF0_RX0_ch_rxmldchainreq;
  input INTF0_RX0_ch_rxmlfinealignreq;
  input INTF0_RX0_ch_rxoobreset;
  input [4:0]INTF0_RX0_ch_rxpcsresetmask;
  input [1:0]INTF0_RX0_ch_rxpd;
  input INTF0_RX0_ch_rxphalignreq;
  input [1:0]INTF0_RX0_ch_rxphalignresetmask;
  input INTF0_RX0_ch_rxphdlypd;
  input INTF0_RX0_ch_rxphdlyreset;
  input INTF0_RX0_ch_rxphsetinitreq;
  input INTF0_RX0_ch_rxphshift180;
  input [6:0]INTF0_RX0_ch_rxpmaresetmask;
  input INTF0_RX0_ch_rxpolarity;
  input INTF0_RX0_ch_rxprbscntreset;
  input [3:0]INTF0_RX0_ch_rxprbssel;
  input [7:0]INTF0_RX0_ch_rxrate;
  input [1:0]INTF0_RX0_ch_rxresetmode;
  input mst_rx_reset;
  input mst_rx_dp_reset;
  input INTF0_RX0_ch_rxslide;
  input INTF0_RX0_ch_rxsyncallin;
  input INTF0_RX0_ch_rxtermination;
  input INTF0_RX0_ch_cdrbmcdrreq;
  input INTF0_RX0_ch_cdrfreqos;
  input INTF0_RX0_ch_cdrincpctrl;
  input INTF0_RX0_ch_cdrstepdir;
  input INTF0_RX0_ch_cdrstepsq;
  input INTF0_RX0_ch_cdrstepsx;
  input INTF0_RX0_ch_eyescanreset;
  input INTF0_RX0_ch_eyescantrigger;
  input INTF0_RX0_ch_dfehold;
  input INTF0_RX0_ch_dfeovrd;
  input INTF0_RX0_ch_rxdapireset;
  input [1:0]INTF0_RX0_ch_rxdapiresetmask;
  input INTF0_RX0_ch_rxqpien;
  input QUAD0_RX0_usrclk;
  input [2:0]QUAD0_ch0_loopback;
  input QUAD0_GTREFCLK0;
  input [31:0]QUAD0_gpi;
  input gtwiz_freerun_clk;
  input [3:0]QUAD0_rxp;
  input [3:0]QUAD0_rxn;

  wire INTF0_RX0_ch_cdrbmcdrreq;
  wire INTF0_RX0_ch_cdrfreqos;
  wire INTF0_RX0_ch_cdrincpctrl;
  wire INTF0_RX0_ch_cdrstepdir;
  wire INTF0_RX0_ch_cdrstepsq;
  wire INTF0_RX0_ch_cdrstepsx;
  wire INTF0_RX0_ch_dfehold;
  wire INTF0_RX0_ch_dfeovrd;
  wire INTF0_RX0_ch_eyescandataerror;
  wire INTF0_RX0_ch_eyescanreset;
  wire INTF0_RX0_ch_eyescantrigger;
  wire INTF0_RX0_ch_gtrxreset;
  wire [1:0]INTF0_RX0_ch_refdebugout;
  wire [7:0]INTF0_RX0_ch_rx10gstat;
  wire [2:0]INTF0_RX0_ch_rxbufstatus;
  wire INTF0_RX0_ch_rxbyteisaligned;
  wire INTF0_RX0_ch_rxbyterealign;
  wire INTF0_RX0_ch_rxcdrhold;
  wire INTF0_RX0_ch_rxcdrlock;
  wire INTF0_RX0_ch_rxcdrovrden;
  wire INTF0_RX0_ch_rxcdrphdone;
  wire INTF0_RX0_ch_rxcdrreset;
  wire INTF0_RX0_ch_rxchanbondseq;
  wire INTF0_RX0_ch_rxchanisaligned;
  wire INTF0_RX0_ch_rxchanrealign;
  wire [4:0]INTF0_RX0_ch_rxchbondi;
  wire [4:0]INTF0_RX0_ch_rxchbondo;
  wire [1:0]INTF0_RX0_ch_rxclkcorcnt;
  wire INTF0_RX0_ch_rxcominitdet;
  wire INTF0_RX0_ch_rxcommadet;
  wire INTF0_RX0_ch_rxcomsasdet;
  wire INTF0_RX0_ch_rxcomwakedet;
  wire [15:0]INTF0_RX0_ch_rxctrl0;
  wire [15:0]INTF0_RX0_ch_rxctrl1;
  wire [7:0]INTF0_RX0_ch_rxctrl2;
  wire [7:0]INTF0_RX0_ch_rxctrl3;
  wire INTF0_RX0_ch_rxdapicodeovrden;
  wire INTF0_RX0_ch_rxdapicodereset;
  wire INTF0_RX0_ch_rxdapireset;
  wire INTF0_RX0_ch_rxdapiresetdone;
  wire [1:0]INTF0_RX0_ch_rxdapiresetmask;
  wire [127:0]INTF0_RX0_ch_rxdata;
  wire [1:0]INTF0_RX0_ch_rxdatavalid;
  wire INTF0_RX0_ch_rxdebugpcsout;
  wire INTF0_RX0_ch_rxdlyalignerr;
  wire INTF0_RX0_ch_rxdlyalignprog;
  wire INTF0_RX0_ch_rxdlyalignreq;
  wire INTF0_RX0_ch_rxelecidle;
  wire INTF0_RX0_ch_rxeqtraining;
  wire INTF0_RX0_ch_rxfinealigndone;
  wire INTF0_RX0_ch_rxgearboxslip;
  wire [5:0]INTF0_RX0_ch_rxheader;
  wire [1:0]INTF0_RX0_ch_rxheadervalid;
  wire INTF0_RX0_ch_rxlatclk;
  wire INTF0_RX0_ch_rxlpmen;
  wire INTF0_RX0_ch_rxmldchaindone;
  wire INTF0_RX0_ch_rxmldchainreq;
  wire INTF0_RX0_ch_rxmlfinealignreq;
  wire INTF0_RX0_ch_rxoobreset;
  wire INTF0_RX0_ch_rxosintdone;
  wire [4:0]INTF0_RX0_ch_rxpcsresetmask;
  wire [1:0]INTF0_RX0_ch_rxpd;
  wire INTF0_RX0_ch_rxphaligndone;
  wire INTF0_RX0_ch_rxphalignerr;
  wire INTF0_RX0_ch_rxphalignreq;
  wire [1:0]INTF0_RX0_ch_rxphalignresetmask;
  wire INTF0_RX0_ch_rxphdlypd;
  wire INTF0_RX0_ch_rxphdlyreset;
  wire INTF0_RX0_ch_rxphdlyresetdone;
  wire INTF0_RX0_ch_rxphsetinitdone;
  wire INTF0_RX0_ch_rxphsetinitreq;
  wire INTF0_RX0_ch_rxphshift180;
  wire INTF0_RX0_ch_rxphshift180done;
  wire INTF0_RX0_ch_rxpkdet;
  wire [6:0]INTF0_RX0_ch_rxpmaresetmask;
  wire INTF0_RX0_ch_rxpolarity;
  wire INTF0_RX0_ch_rxprbscntreset;
  wire INTF0_RX0_ch_rxprbserr;
  wire INTF0_RX0_ch_rxprbslocked;
  wire [3:0]INTF0_RX0_ch_rxprbssel;
  wire INTF0_RX0_ch_rxprogdivreset;
  wire INTF0_RX0_ch_rxprogdivresetdone;
  wire INTF0_RX0_ch_rxqpien;
  wire INTF0_RX0_ch_rxqpisenn;
  wire INTF0_RX0_ch_rxqpisenp;
  wire [7:0]INTF0_RX0_ch_rxrate;
  wire INTF0_RX0_ch_rxresetdone;
  wire [1:0]INTF0_RX0_ch_rxresetmode;
  wire INTF0_RX0_ch_rxsimplexphystatus;
  wire INTF0_RX0_ch_rxslide;
  wire INTF0_RX0_ch_rxsliderdy;
  wire INTF0_RX0_ch_rxslipdone;
  wire [1:0]INTF0_RX0_ch_rxstartofseq;
  wire [2:0]INTF0_RX0_ch_rxstatus;
  wire INTF0_RX0_ch_rxsyncallin;
  wire INTF0_RX0_ch_rxsyncdone;
  wire INTF0_RX0_ch_rxtermination;
  wire INTF0_RX0_ch_rxvalid;
  wire INTF0_TX0_ch_gttxreset;
  wire INTF0_TX0_ch_tx10gstat;
  wire [1:0]INTF0_TX0_ch_txbufstatus;
  wire INTF0_TX0_ch_txcomfinish;
  wire INTF0_TX0_ch_txcominit;
  wire INTF0_TX0_ch_txcomsas;
  wire INTF0_TX0_ch_txcomwake;
  wire [15:0]INTF0_TX0_ch_txctrl0;
  wire [15:0]INTF0_TX0_ch_txctrl1;
  wire [7:0]INTF0_TX0_ch_txctrl2;
  wire INTF0_TX0_ch_txdapicodeovrden;
  wire INTF0_TX0_ch_txdapicodereset;
  wire INTF0_TX0_ch_txdapireset;
  wire INTF0_TX0_ch_txdapiresetdone;
  wire [1:0]INTF0_TX0_ch_txdapiresetmask;
  wire [127:0]INTF0_TX0_ch_txdata;
  wire INTF0_TX0_ch_txdccdone;
  wire INTF0_TX0_ch_txdebugpcsout;
  wire [1:0]INTF0_TX0_ch_txdeemph;
  wire INTF0_TX0_ch_txdetectrx;
  wire [4:0]INTF0_TX0_ch_txdiffctrl;
  wire INTF0_TX0_ch_txdlyalignerr;
  wire INTF0_TX0_ch_txdlyalignprog;
  wire INTF0_TX0_ch_txdlyalignreq;
  wire INTF0_TX0_ch_txelecidle;
  wire [5:0]INTF0_TX0_ch_txheader;
  wire INTF0_TX0_ch_txinhibit;
  wire INTF0_TX0_ch_txlatclk;
  wire [6:0]INTF0_TX0_ch_txmaincursor;
  wire [2:0]INTF0_TX0_ch_txmargin;
  wire INTF0_TX0_ch_txmldchaindone;
  wire INTF0_TX0_ch_txmldchainreq;
  wire INTF0_TX0_ch_txoneszeros;
  wire INTF0_TX0_ch_txpausedelayalign;
  wire INTF0_TX0_ch_txpcsresetmask;
  wire [1:0]INTF0_TX0_ch_txpd;
  wire INTF0_TX0_ch_txphaligndone;
  wire INTF0_TX0_ch_txphalignerr;
  wire INTF0_TX0_ch_txphalignoutrsvd;
  wire INTF0_TX0_ch_txphalignreq;
  wire [1:0]INTF0_TX0_ch_txphalignresetmask;
  wire INTF0_TX0_ch_txphdlypd;
  wire INTF0_TX0_ch_txphdlyreset;
  wire INTF0_TX0_ch_txphdlyresetdone;
  wire INTF0_TX0_ch_txphdlytstclk;
  wire INTF0_TX0_ch_txphsetinitdone;
  wire INTF0_TX0_ch_txphsetinitreq;
  wire INTF0_TX0_ch_txphshift180;
  wire INTF0_TX0_ch_txphshift180done;
  wire INTF0_TX0_ch_txpicodeovrden;
  wire INTF0_TX0_ch_txpicodereset;
  wire INTF0_TX0_ch_txpippmen;
  wire [4:0]INTF0_TX0_ch_txpippmstepsize;
  wire INTF0_TX0_ch_txpisopd;
  wire [2:0]INTF0_TX0_ch_txpmaresetmask;
  wire INTF0_TX0_ch_txpolarity;
  wire [4:0]INTF0_TX0_ch_txpostcursor;
  wire INTF0_TX0_ch_txprbsforceerr;
  wire [3:0]INTF0_TX0_ch_txprbssel;
  wire [4:0]INTF0_TX0_ch_txprecursor;
  wire INTF0_TX0_ch_txprogdivreset;
  wire INTF0_TX0_ch_txprogdivresetdone;
  wire INTF0_TX0_ch_txqpibiasen;
  wire INTF0_TX0_ch_txqpisenn;
  wire INTF0_TX0_ch_txqpisenp;
  wire INTF0_TX0_ch_txqpiweakpu;
  wire [7:0]INTF0_TX0_ch_txrate;
  wire INTF0_TX0_ch_txresetdone;
  wire [1:0]INTF0_TX0_ch_txresetmode;
  wire [6:0]INTF0_TX0_ch_txsequence;
  wire INTF0_TX0_ch_txswing;
  wire INTF0_TX0_ch_txswingouthigh;
  wire INTF0_TX0_ch_txswingoutlow;
  wire INTF0_TX0_ch_txsyncallin;
  wire INTF0_TX0_ch_txsyncdone;
  wire QUAD0_GTREFCLK0;
  wire QUAD0_RX0_outclk;
  wire QUAD0_RX0_usrclk;
  wire QUAD0_TX0_outclk;
  wire QUAD0_TX0_usrclk;
  wire [2:0]QUAD0_ch0_loopback;
  wire [31:0]QUAD0_gpi;
  wire [31:0]QUAD0_gpo;
  wire QUAD0_hsclk0_lcplllock;
  wire [3:0]QUAD0_rxn;
  wire [3:0]QUAD0_rxp;
  wire [3:0]QUAD0_txn;
  wire [3:0]QUAD0_txp;
  wire ch0_rxmstresetdone;
  wire ch0_rxpmaresetdone;
  wire ch0_rxuserrdy;
  wire ch0_txmstresetdone;
  wire ch0_txpmaresetdone;
  wire ch0_txuserrdy;
  wire gtpowergood;
  wire gtwiz_freerun_clk;
  wire mst_rx_dp_reset;
  wire mst_rx_reset;
  wire mst_tx_dp_reset;
  wire mst_tx_reset;
  wire NLW_gt_quad_base_0_inst_apb3pready_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_apb3pslverr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_bufgtce_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_bufgtrst_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_dmonitoroutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_iloresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_phyready_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_phystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_resetexception_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_txsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch0_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_bufgtce_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_bufgtrst_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_dmonitoroutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_eyescandataerror_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_iloresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_phyready_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_phystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_resetexception_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxbyteisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxbyterealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcdrlock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcdrphdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxchanbondseq_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxchanisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxchanrealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcominitdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcommadet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcomsasdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxcomwakedet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxelecidle_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxfinealigndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxosintdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxpkdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxprbserr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxprbslocked_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxsliderdy_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxslipdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_rxvalid_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_tx10gstat_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txcomfinish_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txdccdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphalignoutrsvd_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txswingouthigh_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txswingoutlow_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_txsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch1_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_bufgtce_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_bufgtrst_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_dmonitoroutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_eyescandataerror_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_iloresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_phyready_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_phystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_resetexception_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxbyteisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxbyterealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcdrlock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcdrphdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxchanbondseq_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxchanisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxchanrealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcominitdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcommadet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcomsasdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxcomwakedet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxelecidle_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxfinealigndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxosintdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxpkdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxprbserr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxprbslocked_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxsliderdy_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxslipdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_rxvalid_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_tx10gstat_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txcomfinish_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txdccdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphalignoutrsvd_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txswingouthigh_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txswingoutlow_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_txsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch2_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_bufgtce_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_bufgtrst_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_dmonitoroutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_eyescandataerror_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_iloresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_phyready_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_phystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_resetexception_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxbyteisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxbyterealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcdrlock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcdrphdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxchanbondseq_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxchanisaligned_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxchanrealign_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcominitdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcommadet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcomsasdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxcomwakedet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxelecidle_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxfinealigndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxosintdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxpkdet_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxprbserr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxprbslocked_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxsliderdy_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxslipdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_rxvalid_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_tx10gstat_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txcomfinish_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txdapiresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txdccdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txdebugpcsout_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txdlyalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txdlyalignprog_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txmstresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txoutclk_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphaligndone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphalignerr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphalignoutrsvd_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphdlyresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphsetinitdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txphshift180done_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txpmaresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txprogdivresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txqpisenn_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txqpisenp_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txresetdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txsimplexphystatus_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txswingouthigh_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txswingoutlow_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_txsyncdone_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ch3_xpipe5_pipeline_en_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_correcterr_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_debugtracetvalid_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_lcpllfbclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_lcpllrefclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_lcpllrefclkmonitor_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rpllfbclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rplllock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rpllrefclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rpllrefclkmonitor_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rxrecclkout0_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk0_rxrecclkout1_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_lcpllfbclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_lcplllock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_lcpllrefclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_lcpllrefclkmonitor_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rpllfbclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rplllock_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rpllrefclklost_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rpllrefclkmonitor_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rxrecclkout0_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_hsclk1_rxrecclkout1_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_refclk0_clktestsigint_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_refclk0_gtrefclkpdint_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_refclk1_clktestsigint_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_refclk1_gtrefclkpdint_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_rxmarginreqack_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_rxmarginresreq_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_trigackin0_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_trigout0_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ubinterrupt_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_ubtxuart_UNCONNECTED;
  wire NLW_gt_quad_base_0_inst_uncorrecterr_UNCONNECTED;
  wire [31:0]NLW_gt_quad_base_0_inst_apb3prdata_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch0_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_gt_quad_base_0_inst_ch0_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch0_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_gt_quad_base_0_inst_ch0_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch0_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch0_pinrsvdas_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch1_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_gt_quad_base_0_inst_ch1_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch1_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_gt_quad_base_0_inst_ch1_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch1_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch1_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_refdebugout_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch1_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch1_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_gt_quad_base_0_inst_ch1_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch1_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch1_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch1_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch1_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_gt_quad_base_0_inst_ch1_rxdata_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_gt_quad_base_0_inst_ch1_rxheader_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch1_rxstatus_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch1_txbufstatus_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch2_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_gt_quad_base_0_inst_ch2_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch2_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_gt_quad_base_0_inst_ch2_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch2_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch2_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_refdebugout_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch2_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch2_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_gt_quad_base_0_inst_ch2_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch2_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch2_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch2_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch2_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_gt_quad_base_0_inst_ch2_rxdata_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_gt_quad_base_0_inst_ch2_rxheader_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch2_rxstatus_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch2_txbufstatus_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch3_bufgtcemask_UNCONNECTED;
  wire [11:0]NLW_gt_quad_base_0_inst_ch3_bufgtdiv_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_ch3_bufgtrstmask_UNCONNECTED;
  wire [31:0]NLW_gt_quad_base_0_inst_ch3_dmonitorout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch3_pcsrsvdout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch3_pinrsvdas_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_refdebugout_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch3_rx10gstat_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch3_rxbufstatus_UNCONNECTED;
  wire [4:0]NLW_gt_quad_base_0_inst_ch3_rxchbondo_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_rxclkcorcnt_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch3_rxctrl0_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_ch3_rxctrl1_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch3_rxctrl2_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ch3_rxctrl3_UNCONNECTED;
  wire [127:0]NLW_gt_quad_base_0_inst_ch3_rxdata_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_rxdatavalid_UNCONNECTED;
  wire [5:0]NLW_gt_quad_base_0_inst_ch3_rxheader_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_rxheadervalid_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_rxstartofseq_UNCONNECTED;
  wire [2:0]NLW_gt_quad_base_0_inst_ch3_rxstatus_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_ch3_txbufstatus_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_ctrlrsvdout_UNCONNECTED;
  wire [15:0]NLW_gt_quad_base_0_inst_debugtracetdata_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_hsclk0_rxrecclksel_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_hsclk1_rxrecclksel_UNCONNECTED;
  wire [5:0]NLW_gt_quad_base_0_inst_pipenorthout_UNCONNECTED;
  wire [5:0]NLW_gt_quad_base_0_inst_pipesouthout_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_resetdone_northout_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_resetdone_southout_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_rxmarginrescmd_UNCONNECTED;
  wire [1:0]NLW_gt_quad_base_0_inst_rxmarginreslanenum_UNCONNECTED;
  wire [7:0]NLW_gt_quad_base_0_inst_rxmarginrespayld_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_rxpinorthout_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_rxpisouthout_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_txpinorthout_UNCONNECTED;
  wire [3:0]NLW_gt_quad_base_0_inst_txpisouthout_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0,extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0_inst,Vivado 2024.1" *) 
  extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_gt_quad_base_0 gt_quad_base_0_inst
       (.GT_REFCLK0(QUAD0_GTREFCLK0),
        .apb3clk(gtwiz_freerun_clk),
        .apb3paddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .apb3penable(1'b0),
        .apb3prdata(NLW_gt_quad_base_0_inst_apb3prdata_UNCONNECTED[31:0]),
        .apb3pready(NLW_gt_quad_base_0_inst_apb3pready_UNCONNECTED),
        .apb3presetn(1'b1),
        .apb3psel(1'b0),
        .apb3pslverr(NLW_gt_quad_base_0_inst_apb3pslverr_UNCONNECTED),
        .apb3pwdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .apb3pwrite(1'b0),
        .bgbypassb(1'b0),
        .bgmonitorenb(1'b0),
        .bgpdb(1'b0),
        .bgrcalovrd({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .bgrcalovrdenb(1'b0),
        .ch0_bufgtce(NLW_gt_quad_base_0_inst_ch0_bufgtce_UNCONNECTED),
        .ch0_bufgtcemask(NLW_gt_quad_base_0_inst_ch0_bufgtcemask_UNCONNECTED[3:0]),
        .ch0_bufgtdiv(NLW_gt_quad_base_0_inst_ch0_bufgtdiv_UNCONNECTED[11:0]),
        .ch0_bufgtrst(NLW_gt_quad_base_0_inst_ch0_bufgtrst_UNCONNECTED),
        .ch0_bufgtrstmask(NLW_gt_quad_base_0_inst_ch0_bufgtrstmask_UNCONNECTED[3:0]),
        .ch0_cdrbmcdrreq(INTF0_RX0_ch_cdrbmcdrreq),
        .ch0_cdrfreqos(INTF0_RX0_ch_cdrfreqos),
        .ch0_cdrincpctrl(INTF0_RX0_ch_cdrincpctrl),
        .ch0_cdrstepdir(INTF0_RX0_ch_cdrstepdir),
        .ch0_cdrstepsq(INTF0_RX0_ch_cdrstepsq),
        .ch0_cdrstepsx(INTF0_RX0_ch_cdrstepsx),
        .ch0_clkrsvd0(1'b0),
        .ch0_clkrsvd1(1'b0),
        .ch0_dfehold(INTF0_RX0_ch_dfehold),
        .ch0_dfeovrd(INTF0_RX0_ch_dfeovrd),
        .ch0_dmonfiforeset(1'b0),
        .ch0_dmonitorclk(1'b0),
        .ch0_dmonitorout(NLW_gt_quad_base_0_inst_ch0_dmonitorout_UNCONNECTED[31:0]),
        .ch0_dmonitoroutclk(NLW_gt_quad_base_0_inst_ch0_dmonitoroutclk_UNCONNECTED),
        .ch0_eyescandataerror(INTF0_RX0_ch_eyescandataerror),
        .ch0_eyescanreset(INTF0_RX0_ch_eyescanreset),
        .ch0_eyescantrigger(INTF0_RX0_ch_eyescantrigger),
        .ch0_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch0_gtrxreset(INTF0_RX0_ch_gtrxreset),
        .ch0_gttxreset(INTF0_TX0_ch_gttxreset),
        .ch0_hsdppcsreset(1'b0),
        .ch0_iloreset(1'b0),
        .ch0_iloresetdone(NLW_gt_quad_base_0_inst_ch0_iloresetdone_UNCONNECTED),
        .ch0_iloresetmask(1'b1),
        .ch0_loopback(QUAD0_ch0_loopback),
        .ch0_pcierstb(1'b1),
        .ch0_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch0_pcsrsvdout(NLW_gt_quad_base_0_inst_ch0_pcsrsvdout_UNCONNECTED[15:0]),
        .ch0_phyesmadaptsave(1'b0),
        .ch0_phyready(NLW_gt_quad_base_0_inst_ch0_phyready_UNCONNECTED),
        .ch0_phystatus(NLW_gt_quad_base_0_inst_ch0_phystatus_UNCONNECTED),
        .ch0_pinrsvdas(NLW_gt_quad_base_0_inst_ch0_pinrsvdas_UNCONNECTED[15:0]),
        .ch0_refdebugout(INTF0_RX0_ch_refdebugout),
        .ch0_resetexception(NLW_gt_quad_base_0_inst_ch0_resetexception_UNCONNECTED),
        .ch0_rx10gstat(INTF0_RX0_ch_rx10gstat),
        .ch0_rxbufstatus(INTF0_RX0_ch_rxbufstatus),
        .ch0_rxbyteisaligned(INTF0_RX0_ch_rxbyteisaligned),
        .ch0_rxbyterealign(INTF0_RX0_ch_rxbyterealign),
        .ch0_rxcdrhold(INTF0_RX0_ch_rxcdrhold),
        .ch0_rxcdrlock(INTF0_RX0_ch_rxcdrlock),
        .ch0_rxcdrovrden(INTF0_RX0_ch_rxcdrovrden),
        .ch0_rxcdrphdone(INTF0_RX0_ch_rxcdrphdone),
        .ch0_rxcdrreset(INTF0_RX0_ch_rxcdrreset),
        .ch0_rxchanbondseq(INTF0_RX0_ch_rxchanbondseq),
        .ch0_rxchanisaligned(INTF0_RX0_ch_rxchanisaligned),
        .ch0_rxchanrealign(INTF0_RX0_ch_rxchanrealign),
        .ch0_rxchbondi(INTF0_RX0_ch_rxchbondi),
        .ch0_rxchbondo(INTF0_RX0_ch_rxchbondo),
        .ch0_rxclkcorcnt(INTF0_RX0_ch_rxclkcorcnt),
        .ch0_rxcominitdet(INTF0_RX0_ch_rxcominitdet),
        .ch0_rxcommadet(INTF0_RX0_ch_rxcommadet),
        .ch0_rxcomsasdet(INTF0_RX0_ch_rxcomsasdet),
        .ch0_rxcomwakedet(INTF0_RX0_ch_rxcomwakedet),
        .ch0_rxctrl0(INTF0_RX0_ch_rxctrl0),
        .ch0_rxctrl1(INTF0_RX0_ch_rxctrl1),
        .ch0_rxctrl2(INTF0_RX0_ch_rxctrl2),
        .ch0_rxctrl3(INTF0_RX0_ch_rxctrl3),
        .ch0_rxdapicodeovrden(INTF0_RX0_ch_rxdapicodeovrden),
        .ch0_rxdapicodereset(INTF0_RX0_ch_rxdapicodereset),
        .ch0_rxdapireset(INTF0_RX0_ch_rxdapireset),
        .ch0_rxdapiresetdone(INTF0_RX0_ch_rxdapiresetdone),
        .ch0_rxdapiresetmask(INTF0_RX0_ch_rxdapiresetmask),
        .ch0_rxdata(INTF0_RX0_ch_rxdata),
        .ch0_rxdatavalid(INTF0_RX0_ch_rxdatavalid),
        .ch0_rxdebugpcsout(INTF0_RX0_ch_rxdebugpcsout),
        .ch0_rxdlyalignerr(INTF0_RX0_ch_rxdlyalignerr),
        .ch0_rxdlyalignprog(INTF0_RX0_ch_rxdlyalignprog),
        .ch0_rxdlyalignreq(INTF0_RX0_ch_rxdlyalignreq),
        .ch0_rxelecidle(INTF0_RX0_ch_rxelecidle),
        .ch0_rxeqtraining(INTF0_RX0_ch_rxeqtraining),
        .ch0_rxfinealigndone(INTF0_RX0_ch_rxfinealigndone),
        .ch0_rxgearboxslip(INTF0_RX0_ch_rxgearboxslip),
        .ch0_rxheader(INTF0_RX0_ch_rxheader),
        .ch0_rxheadervalid(INTF0_RX0_ch_rxheadervalid),
        .ch0_rxlatclk(INTF0_RX0_ch_rxlatclk),
        .ch0_rxlpmen(INTF0_RX0_ch_rxlpmen),
        .ch0_rxmldchaindone(INTF0_RX0_ch_rxmldchaindone),
        .ch0_rxmldchainreq(INTF0_RX0_ch_rxmldchainreq),
        .ch0_rxmlfinealignreq(INTF0_RX0_ch_rxmlfinealignreq),
        .ch0_rxmstdatapathreset(mst_rx_dp_reset),
        .ch0_rxmstreset(mst_rx_reset),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .ch0_rxoobreset(INTF0_RX0_ch_rxoobreset),
        .ch0_rxosintdone(INTF0_RX0_ch_rxosintdone),
        .ch0_rxoutclk(QUAD0_RX0_outclk),
        .ch0_rxpcsresetmask(INTF0_RX0_ch_rxpcsresetmask),
        .ch0_rxpd(INTF0_RX0_ch_rxpd),
        .ch0_rxphaligndone(INTF0_RX0_ch_rxphaligndone),
        .ch0_rxphalignerr(INTF0_RX0_ch_rxphalignerr),
        .ch0_rxphalignreq(INTF0_RX0_ch_rxphalignreq),
        .ch0_rxphalignresetmask(INTF0_RX0_ch_rxphalignresetmask),
        .ch0_rxphdlypd(INTF0_RX0_ch_rxphdlypd),
        .ch0_rxphdlyreset(INTF0_RX0_ch_rxphdlyreset),
        .ch0_rxphdlyresetdone(INTF0_RX0_ch_rxphdlyresetdone),
        .ch0_rxphsetinitdone(INTF0_RX0_ch_rxphsetinitdone),
        .ch0_rxphsetinitreq(INTF0_RX0_ch_rxphsetinitreq),
        .ch0_rxphshift180(INTF0_RX0_ch_rxphshift180),
        .ch0_rxphshift180done(INTF0_RX0_ch_rxphshift180done),
        .ch0_rxpkdet(INTF0_RX0_ch_rxpkdet),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .ch0_rxpmaresetmask(INTF0_RX0_ch_rxpmaresetmask),
        .ch0_rxpolarity(INTF0_RX0_ch_rxpolarity),
        .ch0_rxprbscntreset(INTF0_RX0_ch_rxprbscntreset),
        .ch0_rxprbserr(INTF0_RX0_ch_rxprbserr),
        .ch0_rxprbslocked(INTF0_RX0_ch_rxprbslocked),
        .ch0_rxprbssel(INTF0_RX0_ch_rxprbssel),
        .ch0_rxprogdivreset(INTF0_RX0_ch_rxprogdivreset),
        .ch0_rxprogdivresetdone(INTF0_RX0_ch_rxprogdivresetdone),
        .ch0_rxqpien(INTF0_RX0_ch_rxqpien),
        .ch0_rxqpisenn(INTF0_RX0_ch_rxqpisenn),
        .ch0_rxqpisenp(INTF0_RX0_ch_rxqpisenp),
        .ch0_rxrate(INTF0_RX0_ch_rxrate),
        .ch0_rxresetdone(INTF0_RX0_ch_rxresetdone),
        .ch0_rxresetmode(INTF0_RX0_ch_rxresetmode),
        .ch0_rxsimplexphystatus(INTF0_RX0_ch_rxsimplexphystatus),
        .ch0_rxslide(INTF0_RX0_ch_rxslide),
        .ch0_rxsliderdy(INTF0_RX0_ch_rxsliderdy),
        .ch0_rxslipdone(INTF0_RX0_ch_rxslipdone),
        .ch0_rxstartofseq(INTF0_RX0_ch_rxstartofseq),
        .ch0_rxstatus(INTF0_RX0_ch_rxstatus),
        .ch0_rxsyncallin(INTF0_RX0_ch_rxsyncallin),
        .ch0_rxsyncdone(INTF0_RX0_ch_rxsyncdone),
        .ch0_rxtermination(INTF0_RX0_ch_rxtermination),
        .ch0_rxuserrdy(ch0_rxuserrdy),
        .ch0_rxusrclk(QUAD0_RX0_usrclk),
        .ch0_rxvalid(INTF0_RX0_ch_rxvalid),
        .ch0_tx10gstat(INTF0_TX0_ch_tx10gstat),
        .ch0_txbufstatus(INTF0_TX0_ch_txbufstatus),
        .ch0_txcomfinish(INTF0_TX0_ch_txcomfinish),
        .ch0_txcominit(INTF0_TX0_ch_txcominit),
        .ch0_txcomsas(INTF0_TX0_ch_txcomsas),
        .ch0_txcomwake(INTF0_TX0_ch_txcomwake),
        .ch0_txctrl0(INTF0_TX0_ch_txctrl0),
        .ch0_txctrl1(INTF0_TX0_ch_txctrl1),
        .ch0_txctrl2(INTF0_TX0_ch_txctrl2),
        .ch0_txdapicodeovrden(INTF0_TX0_ch_txdapicodeovrden),
        .ch0_txdapicodereset(INTF0_TX0_ch_txdapicodereset),
        .ch0_txdapireset(INTF0_TX0_ch_txdapireset),
        .ch0_txdapiresetdone(INTF0_TX0_ch_txdapiresetdone),
        .ch0_txdapiresetmask(INTF0_TX0_ch_txdapiresetmask),
        .ch0_txdata(INTF0_TX0_ch_txdata),
        .ch0_txdccdone(INTF0_TX0_ch_txdccdone),
        .ch0_txdebugpcsout(INTF0_TX0_ch_txdebugpcsout),
        .ch0_txdeemph(INTF0_TX0_ch_txdeemph),
        .ch0_txdetectrx(INTF0_TX0_ch_txdetectrx),
        .ch0_txdiffctrl(INTF0_TX0_ch_txdiffctrl),
        .ch0_txdlyalignerr(INTF0_TX0_ch_txdlyalignerr),
        .ch0_txdlyalignprog(INTF0_TX0_ch_txdlyalignprog),
        .ch0_txdlyalignreq(INTF0_TX0_ch_txdlyalignreq),
        .ch0_txelecidle(INTF0_TX0_ch_txelecidle),
        .ch0_txheader(INTF0_TX0_ch_txheader),
        .ch0_txinhibit(INTF0_TX0_ch_txinhibit),
        .ch0_txlatclk(INTF0_TX0_ch_txlatclk),
        .ch0_txmaincursor(INTF0_TX0_ch_txmaincursor),
        .ch0_txmargin(INTF0_TX0_ch_txmargin),
        .ch0_txmldchaindone(INTF0_TX0_ch_txmldchaindone),
        .ch0_txmldchainreq(INTF0_TX0_ch_txmldchainreq),
        .ch0_txmstdatapathreset(mst_tx_dp_reset),
        .ch0_txmstreset(mst_tx_reset),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .ch0_txoneszeros(INTF0_TX0_ch_txoneszeros),
        .ch0_txoutclk(QUAD0_TX0_outclk),
        .ch0_txpausedelayalign(INTF0_TX0_ch_txpausedelayalign),
        .ch0_txpcsresetmask(INTF0_TX0_ch_txpcsresetmask),
        .ch0_txpd(INTF0_TX0_ch_txpd),
        .ch0_txphaligndone(INTF0_TX0_ch_txphaligndone),
        .ch0_txphalignerr(INTF0_TX0_ch_txphalignerr),
        .ch0_txphalignoutrsvd(INTF0_TX0_ch_txphalignoutrsvd),
        .ch0_txphalignreq(INTF0_TX0_ch_txphalignreq),
        .ch0_txphalignresetmask(INTF0_TX0_ch_txphalignresetmask),
        .ch0_txphdlypd(INTF0_TX0_ch_txphdlypd),
        .ch0_txphdlyreset(INTF0_TX0_ch_txphdlyreset),
        .ch0_txphdlyresetdone(INTF0_TX0_ch_txphdlyresetdone),
        .ch0_txphdlytstclk(INTF0_TX0_ch_txphdlytstclk),
        .ch0_txphsetinitdone(INTF0_TX0_ch_txphsetinitdone),
        .ch0_txphsetinitreq(INTF0_TX0_ch_txphsetinitreq),
        .ch0_txphshift180(INTF0_TX0_ch_txphshift180),
        .ch0_txphshift180done(INTF0_TX0_ch_txphshift180done),
        .ch0_txpicodeovrden(INTF0_TX0_ch_txpicodeovrden),
        .ch0_txpicodereset(INTF0_TX0_ch_txpicodereset),
        .ch0_txpippmen(INTF0_TX0_ch_txpippmen),
        .ch0_txpippmstepsize(INTF0_TX0_ch_txpippmstepsize),
        .ch0_txpisopd(INTF0_TX0_ch_txpisopd),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .ch0_txpmaresetmask(INTF0_TX0_ch_txpmaresetmask),
        .ch0_txpolarity(INTF0_TX0_ch_txpolarity),
        .ch0_txpostcursor(INTF0_TX0_ch_txpostcursor),
        .ch0_txprbsforceerr(INTF0_TX0_ch_txprbsforceerr),
        .ch0_txprbssel(INTF0_TX0_ch_txprbssel),
        .ch0_txprecursor(INTF0_TX0_ch_txprecursor),
        .ch0_txprogdivreset(INTF0_TX0_ch_txprogdivreset),
        .ch0_txprogdivresetdone(INTF0_TX0_ch_txprogdivresetdone),
        .ch0_txqpibiasen(INTF0_TX0_ch_txqpibiasen),
        .ch0_txqpisenn(INTF0_TX0_ch_txqpisenn),
        .ch0_txqpisenp(INTF0_TX0_ch_txqpisenp),
        .ch0_txqpiweakpu(INTF0_TX0_ch_txqpiweakpu),
        .ch0_txrate(INTF0_TX0_ch_txrate),
        .ch0_txresetdone(INTF0_TX0_ch_txresetdone),
        .ch0_txresetmode(INTF0_TX0_ch_txresetmode),
        .ch0_txsequence(INTF0_TX0_ch_txsequence),
        .ch0_txsimplexphystatus(NLW_gt_quad_base_0_inst_ch0_txsimplexphystatus_UNCONNECTED),
        .ch0_txswing(INTF0_TX0_ch_txswing),
        .ch0_txswingouthigh(INTF0_TX0_ch_txswingouthigh),
        .ch0_txswingoutlow(INTF0_TX0_ch_txswingoutlow),
        .ch0_txsyncallin(INTF0_TX0_ch_txsyncallin),
        .ch0_txsyncdone(INTF0_TX0_ch_txsyncdone),
        .ch0_txuserrdy(ch0_txuserrdy),
        .ch0_txusrclk(QUAD0_TX0_usrclk),
        .ch0_xpipe5_pipeline_en(NLW_gt_quad_base_0_inst_ch0_xpipe5_pipeline_en_UNCONNECTED),
        .ch1_bufgtce(NLW_gt_quad_base_0_inst_ch1_bufgtce_UNCONNECTED),
        .ch1_bufgtcemask(NLW_gt_quad_base_0_inst_ch1_bufgtcemask_UNCONNECTED[3:0]),
        .ch1_bufgtdiv(NLW_gt_quad_base_0_inst_ch1_bufgtdiv_UNCONNECTED[11:0]),
        .ch1_bufgtrst(NLW_gt_quad_base_0_inst_ch1_bufgtrst_UNCONNECTED),
        .ch1_bufgtrstmask(NLW_gt_quad_base_0_inst_ch1_bufgtrstmask_UNCONNECTED[3:0]),
        .ch1_cdrbmcdrreq(1'b0),
        .ch1_cdrfreqos(1'b0),
        .ch1_cdrincpctrl(1'b0),
        .ch1_cdrstepdir(1'b0),
        .ch1_cdrstepsq(1'b0),
        .ch1_cdrstepsx(1'b0),
        .ch1_clkrsvd0(1'b0),
        .ch1_clkrsvd1(1'b0),
        .ch1_dfehold(1'b0),
        .ch1_dfeovrd(1'b0),
        .ch1_dmonfiforeset(1'b0),
        .ch1_dmonitorclk(1'b0),
        .ch1_dmonitorout(NLW_gt_quad_base_0_inst_ch1_dmonitorout_UNCONNECTED[31:0]),
        .ch1_dmonitoroutclk(NLW_gt_quad_base_0_inst_ch1_dmonitoroutclk_UNCONNECTED),
        .ch1_eyescandataerror(NLW_gt_quad_base_0_inst_ch1_eyescandataerror_UNCONNECTED),
        .ch1_eyescanreset(1'b0),
        .ch1_eyescantrigger(1'b0),
        .ch1_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_gtrxreset(1'b0),
        .ch1_gttxreset(1'b0),
        .ch1_hsdppcsreset(1'b0),
        .ch1_iloreset(1'b0),
        .ch1_iloresetdone(NLW_gt_quad_base_0_inst_ch1_iloresetdone_UNCONNECTED),
        .ch1_iloresetmask(1'b1),
        .ch1_loopback({1'b0,1'b0,1'b0}),
        .ch1_pcierstb(1'b1),
        .ch1_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_pcsrsvdout(NLW_gt_quad_base_0_inst_ch1_pcsrsvdout_UNCONNECTED[15:0]),
        .ch1_phyesmadaptsave(1'b0),
        .ch1_phyready(NLW_gt_quad_base_0_inst_ch1_phyready_UNCONNECTED),
        .ch1_phystatus(NLW_gt_quad_base_0_inst_ch1_phystatus_UNCONNECTED),
        .ch1_pinrsvdas(NLW_gt_quad_base_0_inst_ch1_pinrsvdas_UNCONNECTED[15:0]),
        .ch1_refdebugout(NLW_gt_quad_base_0_inst_ch1_refdebugout_UNCONNECTED[1:0]),
        .ch1_resetexception(NLW_gt_quad_base_0_inst_ch1_resetexception_UNCONNECTED),
        .ch1_rx10gstat(NLW_gt_quad_base_0_inst_ch1_rx10gstat_UNCONNECTED[7:0]),
        .ch1_rxbufstatus(NLW_gt_quad_base_0_inst_ch1_rxbufstatus_UNCONNECTED[2:0]),
        .ch1_rxbyteisaligned(NLW_gt_quad_base_0_inst_ch1_rxbyteisaligned_UNCONNECTED),
        .ch1_rxbyterealign(NLW_gt_quad_base_0_inst_ch1_rxbyterealign_UNCONNECTED),
        .ch1_rxcdrhold(1'b0),
        .ch1_rxcdrlock(NLW_gt_quad_base_0_inst_ch1_rxcdrlock_UNCONNECTED),
        .ch1_rxcdrovrden(1'b0),
        .ch1_rxcdrphdone(NLW_gt_quad_base_0_inst_ch1_rxcdrphdone_UNCONNECTED),
        .ch1_rxcdrreset(1'b0),
        .ch1_rxchanbondseq(NLW_gt_quad_base_0_inst_ch1_rxchanbondseq_UNCONNECTED),
        .ch1_rxchanisaligned(NLW_gt_quad_base_0_inst_ch1_rxchanisaligned_UNCONNECTED),
        .ch1_rxchanrealign(NLW_gt_quad_base_0_inst_ch1_rxchanrealign_UNCONNECTED),
        .ch1_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxchbondo(NLW_gt_quad_base_0_inst_ch1_rxchbondo_UNCONNECTED[4:0]),
        .ch1_rxclkcorcnt(NLW_gt_quad_base_0_inst_ch1_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch1_rxcominitdet(NLW_gt_quad_base_0_inst_ch1_rxcominitdet_UNCONNECTED),
        .ch1_rxcommadet(NLW_gt_quad_base_0_inst_ch1_rxcommadet_UNCONNECTED),
        .ch1_rxcomsasdet(NLW_gt_quad_base_0_inst_ch1_rxcomsasdet_UNCONNECTED),
        .ch1_rxcomwakedet(NLW_gt_quad_base_0_inst_ch1_rxcomwakedet_UNCONNECTED),
        .ch1_rxctrl0(NLW_gt_quad_base_0_inst_ch1_rxctrl0_UNCONNECTED[15:0]),
        .ch1_rxctrl1(NLW_gt_quad_base_0_inst_ch1_rxctrl1_UNCONNECTED[15:0]),
        .ch1_rxctrl2(NLW_gt_quad_base_0_inst_ch1_rxctrl2_UNCONNECTED[7:0]),
        .ch1_rxctrl3(NLW_gt_quad_base_0_inst_ch1_rxctrl3_UNCONNECTED[7:0]),
        .ch1_rxdapicodeovrden(1'b0),
        .ch1_rxdapicodereset(1'b0),
        .ch1_rxdapireset(1'b0),
        .ch1_rxdapiresetdone(NLW_gt_quad_base_0_inst_ch1_rxdapiresetdone_UNCONNECTED),
        .ch1_rxdapiresetmask({1'b0,1'b0}),
        .ch1_rxdata(NLW_gt_quad_base_0_inst_ch1_rxdata_UNCONNECTED[127:0]),
        .ch1_rxdatavalid(NLW_gt_quad_base_0_inst_ch1_rxdatavalid_UNCONNECTED[1:0]),
        .ch1_rxdebugpcsout(NLW_gt_quad_base_0_inst_ch1_rxdebugpcsout_UNCONNECTED),
        .ch1_rxdlyalignerr(NLW_gt_quad_base_0_inst_ch1_rxdlyalignerr_UNCONNECTED),
        .ch1_rxdlyalignprog(NLW_gt_quad_base_0_inst_ch1_rxdlyalignprog_UNCONNECTED),
        .ch1_rxdlyalignreq(1'b0),
        .ch1_rxelecidle(NLW_gt_quad_base_0_inst_ch1_rxelecidle_UNCONNECTED),
        .ch1_rxeqtraining(1'b0),
        .ch1_rxfinealigndone(NLW_gt_quad_base_0_inst_ch1_rxfinealigndone_UNCONNECTED),
        .ch1_rxgearboxslip(1'b0),
        .ch1_rxheader(NLW_gt_quad_base_0_inst_ch1_rxheader_UNCONNECTED[5:0]),
        .ch1_rxheadervalid(NLW_gt_quad_base_0_inst_ch1_rxheadervalid_UNCONNECTED[1:0]),
        .ch1_rxlatclk(1'b0),
        .ch1_rxlpmen(1'b0),
        .ch1_rxmldchaindone(1'b0),
        .ch1_rxmldchainreq(1'b0),
        .ch1_rxmlfinealignreq(1'b0),
        .ch1_rxmstdatapathreset(1'b0),
        .ch1_rxmstreset(1'b0),
        .ch1_rxmstresetdone(NLW_gt_quad_base_0_inst_ch1_rxmstresetdone_UNCONNECTED),
        .ch1_rxoobreset(1'b0),
        .ch1_rxosintdone(NLW_gt_quad_base_0_inst_ch1_rxosintdone_UNCONNECTED),
        .ch1_rxoutclk(NLW_gt_quad_base_0_inst_ch1_rxoutclk_UNCONNECTED),
        .ch1_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch1_rxpd({1'b0,1'b0}),
        .ch1_rxphaligndone(NLW_gt_quad_base_0_inst_ch1_rxphaligndone_UNCONNECTED),
        .ch1_rxphalignerr(NLW_gt_quad_base_0_inst_ch1_rxphalignerr_UNCONNECTED),
        .ch1_rxphalignreq(1'b0),
        .ch1_rxphalignresetmask({1'b1,1'b1}),
        .ch1_rxphdlypd(1'b0),
        .ch1_rxphdlyreset(1'b0),
        .ch1_rxphdlyresetdone(NLW_gt_quad_base_0_inst_ch1_rxphdlyresetdone_UNCONNECTED),
        .ch1_rxphsetinitdone(NLW_gt_quad_base_0_inst_ch1_rxphsetinitdone_UNCONNECTED),
        .ch1_rxphsetinitreq(1'b0),
        .ch1_rxphshift180(1'b0),
        .ch1_rxphshift180done(NLW_gt_quad_base_0_inst_ch1_rxphshift180done_UNCONNECTED),
        .ch1_rxpkdet(NLW_gt_quad_base_0_inst_ch1_rxpkdet_UNCONNECTED),
        .ch1_rxpmaresetdone(NLW_gt_quad_base_0_inst_ch1_rxpmaresetdone_UNCONNECTED),
        .ch1_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch1_rxpolarity(1'b0),
        .ch1_rxprbscntreset(1'b0),
        .ch1_rxprbserr(NLW_gt_quad_base_0_inst_ch1_rxprbserr_UNCONNECTED),
        .ch1_rxprbslocked(NLW_gt_quad_base_0_inst_ch1_rxprbslocked_UNCONNECTED),
        .ch1_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxprogdivreset(1'b0),
        .ch1_rxprogdivresetdone(NLW_gt_quad_base_0_inst_ch1_rxprogdivresetdone_UNCONNECTED),
        .ch1_rxqpien(1'b0),
        .ch1_rxqpisenn(NLW_gt_quad_base_0_inst_ch1_rxqpisenn_UNCONNECTED),
        .ch1_rxqpisenp(NLW_gt_quad_base_0_inst_ch1_rxqpisenp_UNCONNECTED),
        .ch1_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_rxresetdone(NLW_gt_quad_base_0_inst_ch1_rxresetdone_UNCONNECTED),
        .ch1_rxresetmode({1'b0,1'b0}),
        .ch1_rxsimplexphystatus(NLW_gt_quad_base_0_inst_ch1_rxsimplexphystatus_UNCONNECTED),
        .ch1_rxslide(1'b0),
        .ch1_rxsliderdy(NLW_gt_quad_base_0_inst_ch1_rxsliderdy_UNCONNECTED),
        .ch1_rxslipdone(NLW_gt_quad_base_0_inst_ch1_rxslipdone_UNCONNECTED),
        .ch1_rxstartofseq(NLW_gt_quad_base_0_inst_ch1_rxstartofseq_UNCONNECTED[1:0]),
        .ch1_rxstatus(NLW_gt_quad_base_0_inst_ch1_rxstatus_UNCONNECTED[2:0]),
        .ch1_rxsyncallin(1'b0),
        .ch1_rxsyncdone(NLW_gt_quad_base_0_inst_ch1_rxsyncdone_UNCONNECTED),
        .ch1_rxtermination(1'b0),
        .ch1_rxuserrdy(1'b0),
        .ch1_rxusrclk(1'b0),
        .ch1_rxvalid(NLW_gt_quad_base_0_inst_ch1_rxvalid_UNCONNECTED),
        .ch1_tx10gstat(NLW_gt_quad_base_0_inst_ch1_tx10gstat_UNCONNECTED),
        .ch1_txbufstatus(NLW_gt_quad_base_0_inst_ch1_txbufstatus_UNCONNECTED[1:0]),
        .ch1_txcomfinish(NLW_gt_quad_base_0_inst_ch1_txcomfinish_UNCONNECTED),
        .ch1_txcominit(1'b0),
        .ch1_txcomsas(1'b0),
        .ch1_txcomwake(1'b0),
        .ch1_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txdapicodeovrden(1'b0),
        .ch1_txdapicodereset(1'b0),
        .ch1_txdapireset(1'b0),
        .ch1_txdapiresetdone(NLW_gt_quad_base_0_inst_ch1_txdapiresetdone_UNCONNECTED),
        .ch1_txdapiresetmask({1'b0,1'b0}),
        .ch1_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txdccdone(NLW_gt_quad_base_0_inst_ch1_txdccdone_UNCONNECTED),
        .ch1_txdebugpcsout(NLW_gt_quad_base_0_inst_ch1_txdebugpcsout_UNCONNECTED),
        .ch1_txdeemph({1'b0,1'b0}),
        .ch1_txdetectrx(1'b0),
        .ch1_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch1_txdlyalignerr(NLW_gt_quad_base_0_inst_ch1_txdlyalignerr_UNCONNECTED),
        .ch1_txdlyalignprog(NLW_gt_quad_base_0_inst_ch1_txdlyalignprog_UNCONNECTED),
        .ch1_txdlyalignreq(1'b0),
        .ch1_txelecidle(1'b0),
        .ch1_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txinhibit(1'b0),
        .ch1_txlatclk(1'b0),
        .ch1_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch1_txmargin({1'b0,1'b0,1'b0}),
        .ch1_txmldchaindone(1'b0),
        .ch1_txmldchainreq(1'b0),
        .ch1_txmstdatapathreset(1'b0),
        .ch1_txmstreset(1'b0),
        .ch1_txmstresetdone(NLW_gt_quad_base_0_inst_ch1_txmstresetdone_UNCONNECTED),
        .ch1_txoneszeros(1'b0),
        .ch1_txoutclk(NLW_gt_quad_base_0_inst_ch1_txoutclk_UNCONNECTED),
        .ch1_txpausedelayalign(1'b0),
        .ch1_txpcsresetmask(1'b1),
        .ch1_txpd({1'b0,1'b0}),
        .ch1_txphaligndone(NLW_gt_quad_base_0_inst_ch1_txphaligndone_UNCONNECTED),
        .ch1_txphalignerr(NLW_gt_quad_base_0_inst_ch1_txphalignerr_UNCONNECTED),
        .ch1_txphalignoutrsvd(NLW_gt_quad_base_0_inst_ch1_txphalignoutrsvd_UNCONNECTED),
        .ch1_txphalignreq(1'b0),
        .ch1_txphalignresetmask({1'b1,1'b1}),
        .ch1_txphdlypd(1'b0),
        .ch1_txphdlyreset(1'b0),
        .ch1_txphdlyresetdone(NLW_gt_quad_base_0_inst_ch1_txphdlyresetdone_UNCONNECTED),
        .ch1_txphdlytstclk(1'b0),
        .ch1_txphsetinitdone(NLW_gt_quad_base_0_inst_ch1_txphsetinitdone_UNCONNECTED),
        .ch1_txphsetinitreq(1'b0),
        .ch1_txphshift180(1'b0),
        .ch1_txphshift180done(NLW_gt_quad_base_0_inst_ch1_txphshift180done_UNCONNECTED),
        .ch1_txpicodeovrden(1'b0),
        .ch1_txpicodereset(1'b0),
        .ch1_txpippmen(1'b0),
        .ch1_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txpisopd(1'b0),
        .ch1_txpmaresetdone(NLW_gt_quad_base_0_inst_ch1_txpmaresetdone_UNCONNECTED),
        .ch1_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch1_txpolarity(1'b0),
        .ch1_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprbsforceerr(1'b0),
        .ch1_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txprogdivreset(1'b0),
        .ch1_txprogdivresetdone(NLW_gt_quad_base_0_inst_ch1_txprogdivresetdone_UNCONNECTED),
        .ch1_txqpibiasen(1'b0),
        .ch1_txqpisenn(NLW_gt_quad_base_0_inst_ch1_txqpisenn_UNCONNECTED),
        .ch1_txqpisenp(NLW_gt_quad_base_0_inst_ch1_txqpisenp_UNCONNECTED),
        .ch1_txqpiweakpu(1'b0),
        .ch1_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txresetdone(NLW_gt_quad_base_0_inst_ch1_txresetdone_UNCONNECTED),
        .ch1_txresetmode({1'b0,1'b0}),
        .ch1_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch1_txsimplexphystatus(NLW_gt_quad_base_0_inst_ch1_txsimplexphystatus_UNCONNECTED),
        .ch1_txswing(1'b0),
        .ch1_txswingouthigh(NLW_gt_quad_base_0_inst_ch1_txswingouthigh_UNCONNECTED),
        .ch1_txswingoutlow(NLW_gt_quad_base_0_inst_ch1_txswingoutlow_UNCONNECTED),
        .ch1_txsyncallin(1'b0),
        .ch1_txsyncdone(NLW_gt_quad_base_0_inst_ch1_txsyncdone_UNCONNECTED),
        .ch1_txuserrdy(1'b0),
        .ch1_txusrclk(1'b0),
        .ch1_xpipe5_pipeline_en(NLW_gt_quad_base_0_inst_ch1_xpipe5_pipeline_en_UNCONNECTED),
        .ch2_bufgtce(NLW_gt_quad_base_0_inst_ch2_bufgtce_UNCONNECTED),
        .ch2_bufgtcemask(NLW_gt_quad_base_0_inst_ch2_bufgtcemask_UNCONNECTED[3:0]),
        .ch2_bufgtdiv(NLW_gt_quad_base_0_inst_ch2_bufgtdiv_UNCONNECTED[11:0]),
        .ch2_bufgtrst(NLW_gt_quad_base_0_inst_ch2_bufgtrst_UNCONNECTED),
        .ch2_bufgtrstmask(NLW_gt_quad_base_0_inst_ch2_bufgtrstmask_UNCONNECTED[3:0]),
        .ch2_cdrbmcdrreq(1'b0),
        .ch2_cdrfreqos(1'b0),
        .ch2_cdrincpctrl(1'b0),
        .ch2_cdrstepdir(1'b0),
        .ch2_cdrstepsq(1'b0),
        .ch2_cdrstepsx(1'b0),
        .ch2_clkrsvd0(1'b0),
        .ch2_clkrsvd1(1'b0),
        .ch2_dfehold(1'b0),
        .ch2_dfeovrd(1'b0),
        .ch2_dmonfiforeset(1'b0),
        .ch2_dmonitorclk(1'b0),
        .ch2_dmonitorout(NLW_gt_quad_base_0_inst_ch2_dmonitorout_UNCONNECTED[31:0]),
        .ch2_dmonitoroutclk(NLW_gt_quad_base_0_inst_ch2_dmonitoroutclk_UNCONNECTED),
        .ch2_eyescandataerror(NLW_gt_quad_base_0_inst_ch2_eyescandataerror_UNCONNECTED),
        .ch2_eyescanreset(1'b0),
        .ch2_eyescantrigger(1'b0),
        .ch2_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_gtrxreset(1'b0),
        .ch2_gttxreset(1'b0),
        .ch2_hsdppcsreset(1'b0),
        .ch2_iloreset(1'b0),
        .ch2_iloresetdone(NLW_gt_quad_base_0_inst_ch2_iloresetdone_UNCONNECTED),
        .ch2_iloresetmask(1'b1),
        .ch2_loopback({1'b0,1'b0,1'b0}),
        .ch2_pcierstb(1'b1),
        .ch2_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_pcsrsvdout(NLW_gt_quad_base_0_inst_ch2_pcsrsvdout_UNCONNECTED[15:0]),
        .ch2_phyesmadaptsave(1'b0),
        .ch2_phyready(NLW_gt_quad_base_0_inst_ch2_phyready_UNCONNECTED),
        .ch2_phystatus(NLW_gt_quad_base_0_inst_ch2_phystatus_UNCONNECTED),
        .ch2_pinrsvdas(NLW_gt_quad_base_0_inst_ch2_pinrsvdas_UNCONNECTED[15:0]),
        .ch2_refdebugout(NLW_gt_quad_base_0_inst_ch2_refdebugout_UNCONNECTED[1:0]),
        .ch2_resetexception(NLW_gt_quad_base_0_inst_ch2_resetexception_UNCONNECTED),
        .ch2_rx10gstat(NLW_gt_quad_base_0_inst_ch2_rx10gstat_UNCONNECTED[7:0]),
        .ch2_rxbufstatus(NLW_gt_quad_base_0_inst_ch2_rxbufstatus_UNCONNECTED[2:0]),
        .ch2_rxbyteisaligned(NLW_gt_quad_base_0_inst_ch2_rxbyteisaligned_UNCONNECTED),
        .ch2_rxbyterealign(NLW_gt_quad_base_0_inst_ch2_rxbyterealign_UNCONNECTED),
        .ch2_rxcdrhold(1'b0),
        .ch2_rxcdrlock(NLW_gt_quad_base_0_inst_ch2_rxcdrlock_UNCONNECTED),
        .ch2_rxcdrovrden(1'b0),
        .ch2_rxcdrphdone(NLW_gt_quad_base_0_inst_ch2_rxcdrphdone_UNCONNECTED),
        .ch2_rxcdrreset(1'b0),
        .ch2_rxchanbondseq(NLW_gt_quad_base_0_inst_ch2_rxchanbondseq_UNCONNECTED),
        .ch2_rxchanisaligned(NLW_gt_quad_base_0_inst_ch2_rxchanisaligned_UNCONNECTED),
        .ch2_rxchanrealign(NLW_gt_quad_base_0_inst_ch2_rxchanrealign_UNCONNECTED),
        .ch2_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxchbondo(NLW_gt_quad_base_0_inst_ch2_rxchbondo_UNCONNECTED[4:0]),
        .ch2_rxclkcorcnt(NLW_gt_quad_base_0_inst_ch2_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch2_rxcominitdet(NLW_gt_quad_base_0_inst_ch2_rxcominitdet_UNCONNECTED),
        .ch2_rxcommadet(NLW_gt_quad_base_0_inst_ch2_rxcommadet_UNCONNECTED),
        .ch2_rxcomsasdet(NLW_gt_quad_base_0_inst_ch2_rxcomsasdet_UNCONNECTED),
        .ch2_rxcomwakedet(NLW_gt_quad_base_0_inst_ch2_rxcomwakedet_UNCONNECTED),
        .ch2_rxctrl0(NLW_gt_quad_base_0_inst_ch2_rxctrl0_UNCONNECTED[15:0]),
        .ch2_rxctrl1(NLW_gt_quad_base_0_inst_ch2_rxctrl1_UNCONNECTED[15:0]),
        .ch2_rxctrl2(NLW_gt_quad_base_0_inst_ch2_rxctrl2_UNCONNECTED[7:0]),
        .ch2_rxctrl3(NLW_gt_quad_base_0_inst_ch2_rxctrl3_UNCONNECTED[7:0]),
        .ch2_rxdapicodeovrden(1'b0),
        .ch2_rxdapicodereset(1'b0),
        .ch2_rxdapireset(1'b0),
        .ch2_rxdapiresetdone(NLW_gt_quad_base_0_inst_ch2_rxdapiresetdone_UNCONNECTED),
        .ch2_rxdapiresetmask({1'b0,1'b0}),
        .ch2_rxdata(NLW_gt_quad_base_0_inst_ch2_rxdata_UNCONNECTED[127:0]),
        .ch2_rxdatavalid(NLW_gt_quad_base_0_inst_ch2_rxdatavalid_UNCONNECTED[1:0]),
        .ch2_rxdebugpcsout(NLW_gt_quad_base_0_inst_ch2_rxdebugpcsout_UNCONNECTED),
        .ch2_rxdlyalignerr(NLW_gt_quad_base_0_inst_ch2_rxdlyalignerr_UNCONNECTED),
        .ch2_rxdlyalignprog(NLW_gt_quad_base_0_inst_ch2_rxdlyalignprog_UNCONNECTED),
        .ch2_rxdlyalignreq(1'b0),
        .ch2_rxelecidle(NLW_gt_quad_base_0_inst_ch2_rxelecidle_UNCONNECTED),
        .ch2_rxeqtraining(1'b0),
        .ch2_rxfinealigndone(NLW_gt_quad_base_0_inst_ch2_rxfinealigndone_UNCONNECTED),
        .ch2_rxgearboxslip(1'b0),
        .ch2_rxheader(NLW_gt_quad_base_0_inst_ch2_rxheader_UNCONNECTED[5:0]),
        .ch2_rxheadervalid(NLW_gt_quad_base_0_inst_ch2_rxheadervalid_UNCONNECTED[1:0]),
        .ch2_rxlatclk(1'b0),
        .ch2_rxlpmen(1'b0),
        .ch2_rxmldchaindone(1'b0),
        .ch2_rxmldchainreq(1'b0),
        .ch2_rxmlfinealignreq(1'b0),
        .ch2_rxmstdatapathreset(1'b0),
        .ch2_rxmstreset(1'b0),
        .ch2_rxmstresetdone(NLW_gt_quad_base_0_inst_ch2_rxmstresetdone_UNCONNECTED),
        .ch2_rxoobreset(1'b0),
        .ch2_rxosintdone(NLW_gt_quad_base_0_inst_ch2_rxosintdone_UNCONNECTED),
        .ch2_rxoutclk(NLW_gt_quad_base_0_inst_ch2_rxoutclk_UNCONNECTED),
        .ch2_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch2_rxpd({1'b0,1'b0}),
        .ch2_rxphaligndone(NLW_gt_quad_base_0_inst_ch2_rxphaligndone_UNCONNECTED),
        .ch2_rxphalignerr(NLW_gt_quad_base_0_inst_ch2_rxphalignerr_UNCONNECTED),
        .ch2_rxphalignreq(1'b0),
        .ch2_rxphalignresetmask({1'b1,1'b1}),
        .ch2_rxphdlypd(1'b0),
        .ch2_rxphdlyreset(1'b0),
        .ch2_rxphdlyresetdone(NLW_gt_quad_base_0_inst_ch2_rxphdlyresetdone_UNCONNECTED),
        .ch2_rxphsetinitdone(NLW_gt_quad_base_0_inst_ch2_rxphsetinitdone_UNCONNECTED),
        .ch2_rxphsetinitreq(1'b0),
        .ch2_rxphshift180(1'b0),
        .ch2_rxphshift180done(NLW_gt_quad_base_0_inst_ch2_rxphshift180done_UNCONNECTED),
        .ch2_rxpkdet(NLW_gt_quad_base_0_inst_ch2_rxpkdet_UNCONNECTED),
        .ch2_rxpmaresetdone(NLW_gt_quad_base_0_inst_ch2_rxpmaresetdone_UNCONNECTED),
        .ch2_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch2_rxpolarity(1'b0),
        .ch2_rxprbscntreset(1'b0),
        .ch2_rxprbserr(NLW_gt_quad_base_0_inst_ch2_rxprbserr_UNCONNECTED),
        .ch2_rxprbslocked(NLW_gt_quad_base_0_inst_ch2_rxprbslocked_UNCONNECTED),
        .ch2_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxprogdivreset(1'b0),
        .ch2_rxprogdivresetdone(NLW_gt_quad_base_0_inst_ch2_rxprogdivresetdone_UNCONNECTED),
        .ch2_rxqpien(1'b0),
        .ch2_rxqpisenn(NLW_gt_quad_base_0_inst_ch2_rxqpisenn_UNCONNECTED),
        .ch2_rxqpisenp(NLW_gt_quad_base_0_inst_ch2_rxqpisenp_UNCONNECTED),
        .ch2_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_rxresetdone(NLW_gt_quad_base_0_inst_ch2_rxresetdone_UNCONNECTED),
        .ch2_rxresetmode({1'b0,1'b0}),
        .ch2_rxsimplexphystatus(NLW_gt_quad_base_0_inst_ch2_rxsimplexphystatus_UNCONNECTED),
        .ch2_rxslide(1'b0),
        .ch2_rxsliderdy(NLW_gt_quad_base_0_inst_ch2_rxsliderdy_UNCONNECTED),
        .ch2_rxslipdone(NLW_gt_quad_base_0_inst_ch2_rxslipdone_UNCONNECTED),
        .ch2_rxstartofseq(NLW_gt_quad_base_0_inst_ch2_rxstartofseq_UNCONNECTED[1:0]),
        .ch2_rxstatus(NLW_gt_quad_base_0_inst_ch2_rxstatus_UNCONNECTED[2:0]),
        .ch2_rxsyncallin(1'b0),
        .ch2_rxsyncdone(NLW_gt_quad_base_0_inst_ch2_rxsyncdone_UNCONNECTED),
        .ch2_rxtermination(1'b0),
        .ch2_rxuserrdy(1'b0),
        .ch2_rxusrclk(1'b0),
        .ch2_rxvalid(NLW_gt_quad_base_0_inst_ch2_rxvalid_UNCONNECTED),
        .ch2_tx10gstat(NLW_gt_quad_base_0_inst_ch2_tx10gstat_UNCONNECTED),
        .ch2_txbufstatus(NLW_gt_quad_base_0_inst_ch2_txbufstatus_UNCONNECTED[1:0]),
        .ch2_txcomfinish(NLW_gt_quad_base_0_inst_ch2_txcomfinish_UNCONNECTED),
        .ch2_txcominit(1'b0),
        .ch2_txcomsas(1'b0),
        .ch2_txcomwake(1'b0),
        .ch2_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txdapicodeovrden(1'b0),
        .ch2_txdapicodereset(1'b0),
        .ch2_txdapireset(1'b0),
        .ch2_txdapiresetdone(NLW_gt_quad_base_0_inst_ch2_txdapiresetdone_UNCONNECTED),
        .ch2_txdapiresetmask({1'b0,1'b0}),
        .ch2_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txdccdone(NLW_gt_quad_base_0_inst_ch2_txdccdone_UNCONNECTED),
        .ch2_txdebugpcsout(NLW_gt_quad_base_0_inst_ch2_txdebugpcsout_UNCONNECTED),
        .ch2_txdeemph({1'b0,1'b0}),
        .ch2_txdetectrx(1'b0),
        .ch2_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch2_txdlyalignerr(NLW_gt_quad_base_0_inst_ch2_txdlyalignerr_UNCONNECTED),
        .ch2_txdlyalignprog(NLW_gt_quad_base_0_inst_ch2_txdlyalignprog_UNCONNECTED),
        .ch2_txdlyalignreq(1'b0),
        .ch2_txelecidle(1'b0),
        .ch2_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txinhibit(1'b0),
        .ch2_txlatclk(1'b0),
        .ch2_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch2_txmargin({1'b0,1'b0,1'b0}),
        .ch2_txmldchaindone(1'b0),
        .ch2_txmldchainreq(1'b0),
        .ch2_txmstdatapathreset(1'b0),
        .ch2_txmstreset(1'b0),
        .ch2_txmstresetdone(NLW_gt_quad_base_0_inst_ch2_txmstresetdone_UNCONNECTED),
        .ch2_txoneszeros(1'b0),
        .ch2_txoutclk(NLW_gt_quad_base_0_inst_ch2_txoutclk_UNCONNECTED),
        .ch2_txpausedelayalign(1'b0),
        .ch2_txpcsresetmask(1'b1),
        .ch2_txpd({1'b0,1'b0}),
        .ch2_txphaligndone(NLW_gt_quad_base_0_inst_ch2_txphaligndone_UNCONNECTED),
        .ch2_txphalignerr(NLW_gt_quad_base_0_inst_ch2_txphalignerr_UNCONNECTED),
        .ch2_txphalignoutrsvd(NLW_gt_quad_base_0_inst_ch2_txphalignoutrsvd_UNCONNECTED),
        .ch2_txphalignreq(1'b0),
        .ch2_txphalignresetmask({1'b1,1'b1}),
        .ch2_txphdlypd(1'b0),
        .ch2_txphdlyreset(1'b0),
        .ch2_txphdlyresetdone(NLW_gt_quad_base_0_inst_ch2_txphdlyresetdone_UNCONNECTED),
        .ch2_txphdlytstclk(1'b0),
        .ch2_txphsetinitdone(NLW_gt_quad_base_0_inst_ch2_txphsetinitdone_UNCONNECTED),
        .ch2_txphsetinitreq(1'b0),
        .ch2_txphshift180(1'b0),
        .ch2_txphshift180done(NLW_gt_quad_base_0_inst_ch2_txphshift180done_UNCONNECTED),
        .ch2_txpicodeovrden(1'b0),
        .ch2_txpicodereset(1'b0),
        .ch2_txpippmen(1'b0),
        .ch2_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txpisopd(1'b0),
        .ch2_txpmaresetdone(NLW_gt_quad_base_0_inst_ch2_txpmaresetdone_UNCONNECTED),
        .ch2_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch2_txpolarity(1'b0),
        .ch2_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprbsforceerr(1'b0),
        .ch2_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txprogdivreset(1'b0),
        .ch2_txprogdivresetdone(NLW_gt_quad_base_0_inst_ch2_txprogdivresetdone_UNCONNECTED),
        .ch2_txqpibiasen(1'b0),
        .ch2_txqpisenn(NLW_gt_quad_base_0_inst_ch2_txqpisenn_UNCONNECTED),
        .ch2_txqpisenp(NLW_gt_quad_base_0_inst_ch2_txqpisenp_UNCONNECTED),
        .ch2_txqpiweakpu(1'b0),
        .ch2_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txresetdone(NLW_gt_quad_base_0_inst_ch2_txresetdone_UNCONNECTED),
        .ch2_txresetmode({1'b0,1'b0}),
        .ch2_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch2_txsimplexphystatus(NLW_gt_quad_base_0_inst_ch2_txsimplexphystatus_UNCONNECTED),
        .ch2_txswing(1'b0),
        .ch2_txswingouthigh(NLW_gt_quad_base_0_inst_ch2_txswingouthigh_UNCONNECTED),
        .ch2_txswingoutlow(NLW_gt_quad_base_0_inst_ch2_txswingoutlow_UNCONNECTED),
        .ch2_txsyncallin(1'b0),
        .ch2_txsyncdone(NLW_gt_quad_base_0_inst_ch2_txsyncdone_UNCONNECTED),
        .ch2_txuserrdy(1'b0),
        .ch2_txusrclk(1'b0),
        .ch2_xpipe5_pipeline_en(NLW_gt_quad_base_0_inst_ch2_xpipe5_pipeline_en_UNCONNECTED),
        .ch3_bufgtce(NLW_gt_quad_base_0_inst_ch3_bufgtce_UNCONNECTED),
        .ch3_bufgtcemask(NLW_gt_quad_base_0_inst_ch3_bufgtcemask_UNCONNECTED[3:0]),
        .ch3_bufgtdiv(NLW_gt_quad_base_0_inst_ch3_bufgtdiv_UNCONNECTED[11:0]),
        .ch3_bufgtrst(NLW_gt_quad_base_0_inst_ch3_bufgtrst_UNCONNECTED),
        .ch3_bufgtrstmask(NLW_gt_quad_base_0_inst_ch3_bufgtrstmask_UNCONNECTED[3:0]),
        .ch3_cdrbmcdrreq(1'b0),
        .ch3_cdrfreqos(1'b0),
        .ch3_cdrincpctrl(1'b0),
        .ch3_cdrstepdir(1'b0),
        .ch3_cdrstepsq(1'b0),
        .ch3_cdrstepsx(1'b0),
        .ch3_clkrsvd0(1'b0),
        .ch3_clkrsvd1(1'b0),
        .ch3_dfehold(1'b0),
        .ch3_dfeovrd(1'b0),
        .ch3_dmonfiforeset(1'b0),
        .ch3_dmonitorclk(1'b0),
        .ch3_dmonitorout(NLW_gt_quad_base_0_inst_ch3_dmonitorout_UNCONNECTED[31:0]),
        .ch3_dmonitoroutclk(NLW_gt_quad_base_0_inst_ch3_dmonitoroutclk_UNCONNECTED),
        .ch3_eyescandataerror(NLW_gt_quad_base_0_inst_ch3_eyescandataerror_UNCONNECTED),
        .ch3_eyescanreset(1'b0),
        .ch3_eyescantrigger(1'b0),
        .ch3_gtrsvd({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_gtrxreset(1'b0),
        .ch3_gttxreset(1'b0),
        .ch3_hsdppcsreset(1'b0),
        .ch3_iloreset(1'b0),
        .ch3_iloresetdone(NLW_gt_quad_base_0_inst_ch3_iloresetdone_UNCONNECTED),
        .ch3_iloresetmask(1'b1),
        .ch3_loopback({1'b0,1'b0,1'b0}),
        .ch3_pcierstb(1'b1),
        .ch3_pcsrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_pcsrsvdout(NLW_gt_quad_base_0_inst_ch3_pcsrsvdout_UNCONNECTED[15:0]),
        .ch3_phyesmadaptsave(1'b0),
        .ch3_phyready(NLW_gt_quad_base_0_inst_ch3_phyready_UNCONNECTED),
        .ch3_phystatus(NLW_gt_quad_base_0_inst_ch3_phystatus_UNCONNECTED),
        .ch3_pinrsvdas(NLW_gt_quad_base_0_inst_ch3_pinrsvdas_UNCONNECTED[15:0]),
        .ch3_refdebugout(NLW_gt_quad_base_0_inst_ch3_refdebugout_UNCONNECTED[1:0]),
        .ch3_resetexception(NLW_gt_quad_base_0_inst_ch3_resetexception_UNCONNECTED),
        .ch3_rx10gstat(NLW_gt_quad_base_0_inst_ch3_rx10gstat_UNCONNECTED[7:0]),
        .ch3_rxbufstatus(NLW_gt_quad_base_0_inst_ch3_rxbufstatus_UNCONNECTED[2:0]),
        .ch3_rxbyteisaligned(NLW_gt_quad_base_0_inst_ch3_rxbyteisaligned_UNCONNECTED),
        .ch3_rxbyterealign(NLW_gt_quad_base_0_inst_ch3_rxbyterealign_UNCONNECTED),
        .ch3_rxcdrhold(1'b0),
        .ch3_rxcdrlock(NLW_gt_quad_base_0_inst_ch3_rxcdrlock_UNCONNECTED),
        .ch3_rxcdrovrden(1'b0),
        .ch3_rxcdrphdone(NLW_gt_quad_base_0_inst_ch3_rxcdrphdone_UNCONNECTED),
        .ch3_rxcdrreset(1'b0),
        .ch3_rxchanbondseq(NLW_gt_quad_base_0_inst_ch3_rxchanbondseq_UNCONNECTED),
        .ch3_rxchanisaligned(NLW_gt_quad_base_0_inst_ch3_rxchanisaligned_UNCONNECTED),
        .ch3_rxchanrealign(NLW_gt_quad_base_0_inst_ch3_rxchanrealign_UNCONNECTED),
        .ch3_rxchbondi({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxchbondo(NLW_gt_quad_base_0_inst_ch3_rxchbondo_UNCONNECTED[4:0]),
        .ch3_rxclkcorcnt(NLW_gt_quad_base_0_inst_ch3_rxclkcorcnt_UNCONNECTED[1:0]),
        .ch3_rxcominitdet(NLW_gt_quad_base_0_inst_ch3_rxcominitdet_UNCONNECTED),
        .ch3_rxcommadet(NLW_gt_quad_base_0_inst_ch3_rxcommadet_UNCONNECTED),
        .ch3_rxcomsasdet(NLW_gt_quad_base_0_inst_ch3_rxcomsasdet_UNCONNECTED),
        .ch3_rxcomwakedet(NLW_gt_quad_base_0_inst_ch3_rxcomwakedet_UNCONNECTED),
        .ch3_rxctrl0(NLW_gt_quad_base_0_inst_ch3_rxctrl0_UNCONNECTED[15:0]),
        .ch3_rxctrl1(NLW_gt_quad_base_0_inst_ch3_rxctrl1_UNCONNECTED[15:0]),
        .ch3_rxctrl2(NLW_gt_quad_base_0_inst_ch3_rxctrl2_UNCONNECTED[7:0]),
        .ch3_rxctrl3(NLW_gt_quad_base_0_inst_ch3_rxctrl3_UNCONNECTED[7:0]),
        .ch3_rxdapicodeovrden(1'b0),
        .ch3_rxdapicodereset(1'b0),
        .ch3_rxdapireset(1'b0),
        .ch3_rxdapiresetdone(NLW_gt_quad_base_0_inst_ch3_rxdapiresetdone_UNCONNECTED),
        .ch3_rxdapiresetmask({1'b0,1'b0}),
        .ch3_rxdata(NLW_gt_quad_base_0_inst_ch3_rxdata_UNCONNECTED[127:0]),
        .ch3_rxdatavalid(NLW_gt_quad_base_0_inst_ch3_rxdatavalid_UNCONNECTED[1:0]),
        .ch3_rxdebugpcsout(NLW_gt_quad_base_0_inst_ch3_rxdebugpcsout_UNCONNECTED),
        .ch3_rxdlyalignerr(NLW_gt_quad_base_0_inst_ch3_rxdlyalignerr_UNCONNECTED),
        .ch3_rxdlyalignprog(NLW_gt_quad_base_0_inst_ch3_rxdlyalignprog_UNCONNECTED),
        .ch3_rxdlyalignreq(1'b0),
        .ch3_rxelecidle(NLW_gt_quad_base_0_inst_ch3_rxelecidle_UNCONNECTED),
        .ch3_rxeqtraining(1'b0),
        .ch3_rxfinealigndone(NLW_gt_quad_base_0_inst_ch3_rxfinealigndone_UNCONNECTED),
        .ch3_rxgearboxslip(1'b0),
        .ch3_rxheader(NLW_gt_quad_base_0_inst_ch3_rxheader_UNCONNECTED[5:0]),
        .ch3_rxheadervalid(NLW_gt_quad_base_0_inst_ch3_rxheadervalid_UNCONNECTED[1:0]),
        .ch3_rxlatclk(1'b0),
        .ch3_rxlpmen(1'b0),
        .ch3_rxmldchaindone(1'b0),
        .ch3_rxmldchainreq(1'b0),
        .ch3_rxmlfinealignreq(1'b0),
        .ch3_rxmstdatapathreset(1'b0),
        .ch3_rxmstreset(1'b0),
        .ch3_rxmstresetdone(NLW_gt_quad_base_0_inst_ch3_rxmstresetdone_UNCONNECTED),
        .ch3_rxoobreset(1'b0),
        .ch3_rxosintdone(NLW_gt_quad_base_0_inst_ch3_rxosintdone_UNCONNECTED),
        .ch3_rxoutclk(NLW_gt_quad_base_0_inst_ch3_rxoutclk_UNCONNECTED),
        .ch3_rxpcsresetmask({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch3_rxpd({1'b0,1'b0}),
        .ch3_rxphaligndone(NLW_gt_quad_base_0_inst_ch3_rxphaligndone_UNCONNECTED),
        .ch3_rxphalignerr(NLW_gt_quad_base_0_inst_ch3_rxphalignerr_UNCONNECTED),
        .ch3_rxphalignreq(1'b0),
        .ch3_rxphalignresetmask({1'b1,1'b1}),
        .ch3_rxphdlypd(1'b0),
        .ch3_rxphdlyreset(1'b0),
        .ch3_rxphdlyresetdone(NLW_gt_quad_base_0_inst_ch3_rxphdlyresetdone_UNCONNECTED),
        .ch3_rxphsetinitdone(NLW_gt_quad_base_0_inst_ch3_rxphsetinitdone_UNCONNECTED),
        .ch3_rxphsetinitreq(1'b0),
        .ch3_rxphshift180(1'b0),
        .ch3_rxphshift180done(NLW_gt_quad_base_0_inst_ch3_rxphshift180done_UNCONNECTED),
        .ch3_rxpkdet(NLW_gt_quad_base_0_inst_ch3_rxpkdet_UNCONNECTED),
        .ch3_rxpmaresetdone(NLW_gt_quad_base_0_inst_ch3_rxpmaresetdone_UNCONNECTED),
        .ch3_rxpmaresetmask({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ch3_rxpolarity(1'b0),
        .ch3_rxprbscntreset(1'b0),
        .ch3_rxprbserr(NLW_gt_quad_base_0_inst_ch3_rxprbserr_UNCONNECTED),
        .ch3_rxprbslocked(NLW_gt_quad_base_0_inst_ch3_rxprbslocked_UNCONNECTED),
        .ch3_rxprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxprogdivreset(1'b0),
        .ch3_rxprogdivresetdone(NLW_gt_quad_base_0_inst_ch3_rxprogdivresetdone_UNCONNECTED),
        .ch3_rxqpien(1'b0),
        .ch3_rxqpisenn(NLW_gt_quad_base_0_inst_ch3_rxqpisenn_UNCONNECTED),
        .ch3_rxqpisenp(NLW_gt_quad_base_0_inst_ch3_rxqpisenp_UNCONNECTED),
        .ch3_rxrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_rxresetdone(NLW_gt_quad_base_0_inst_ch3_rxresetdone_UNCONNECTED),
        .ch3_rxresetmode({1'b0,1'b0}),
        .ch3_rxsimplexphystatus(NLW_gt_quad_base_0_inst_ch3_rxsimplexphystatus_UNCONNECTED),
        .ch3_rxslide(1'b0),
        .ch3_rxsliderdy(NLW_gt_quad_base_0_inst_ch3_rxsliderdy_UNCONNECTED),
        .ch3_rxslipdone(NLW_gt_quad_base_0_inst_ch3_rxslipdone_UNCONNECTED),
        .ch3_rxstartofseq(NLW_gt_quad_base_0_inst_ch3_rxstartofseq_UNCONNECTED[1:0]),
        .ch3_rxstatus(NLW_gt_quad_base_0_inst_ch3_rxstatus_UNCONNECTED[2:0]),
        .ch3_rxsyncallin(1'b0),
        .ch3_rxsyncdone(NLW_gt_quad_base_0_inst_ch3_rxsyncdone_UNCONNECTED),
        .ch3_rxtermination(1'b0),
        .ch3_rxuserrdy(1'b0),
        .ch3_rxusrclk(1'b0),
        .ch3_rxvalid(NLW_gt_quad_base_0_inst_ch3_rxvalid_UNCONNECTED),
        .ch3_tx10gstat(NLW_gt_quad_base_0_inst_ch3_tx10gstat_UNCONNECTED),
        .ch3_txbufstatus(NLW_gt_quad_base_0_inst_ch3_txbufstatus_UNCONNECTED[1:0]),
        .ch3_txcomfinish(NLW_gt_quad_base_0_inst_ch3_txcomfinish_UNCONNECTED),
        .ch3_txcominit(1'b0),
        .ch3_txcomsas(1'b0),
        .ch3_txcomwake(1'b0),
        .ch3_txctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txctrl2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txdapicodeovrden(1'b0),
        .ch3_txdapicodereset(1'b0),
        .ch3_txdapireset(1'b0),
        .ch3_txdapiresetdone(NLW_gt_quad_base_0_inst_ch3_txdapiresetdone_UNCONNECTED),
        .ch3_txdapiresetmask({1'b0,1'b0}),
        .ch3_txdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txdccdone(NLW_gt_quad_base_0_inst_ch3_txdccdone_UNCONNECTED),
        .ch3_txdebugpcsout(NLW_gt_quad_base_0_inst_ch3_txdebugpcsout_UNCONNECTED),
        .ch3_txdeemph({1'b0,1'b0}),
        .ch3_txdetectrx(1'b0),
        .ch3_txdiffctrl({1'b1,1'b1,1'b0,1'b0,1'b1}),
        .ch3_txdlyalignerr(NLW_gt_quad_base_0_inst_ch3_txdlyalignerr_UNCONNECTED),
        .ch3_txdlyalignprog(NLW_gt_quad_base_0_inst_ch3_txdlyalignprog_UNCONNECTED),
        .ch3_txdlyalignreq(1'b0),
        .ch3_txelecidle(1'b0),
        .ch3_txheader({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txinhibit(1'b0),
        .ch3_txlatclk(1'b0),
        .ch3_txmaincursor({1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1}),
        .ch3_txmargin({1'b0,1'b0,1'b0}),
        .ch3_txmldchaindone(1'b0),
        .ch3_txmldchainreq(1'b0),
        .ch3_txmstdatapathreset(1'b0),
        .ch3_txmstreset(1'b0),
        .ch3_txmstresetdone(NLW_gt_quad_base_0_inst_ch3_txmstresetdone_UNCONNECTED),
        .ch3_txoneszeros(1'b0),
        .ch3_txoutclk(NLW_gt_quad_base_0_inst_ch3_txoutclk_UNCONNECTED),
        .ch3_txpausedelayalign(1'b0),
        .ch3_txpcsresetmask(1'b1),
        .ch3_txpd({1'b0,1'b0}),
        .ch3_txphaligndone(NLW_gt_quad_base_0_inst_ch3_txphaligndone_UNCONNECTED),
        .ch3_txphalignerr(NLW_gt_quad_base_0_inst_ch3_txphalignerr_UNCONNECTED),
        .ch3_txphalignoutrsvd(NLW_gt_quad_base_0_inst_ch3_txphalignoutrsvd_UNCONNECTED),
        .ch3_txphalignreq(1'b0),
        .ch3_txphalignresetmask({1'b1,1'b1}),
        .ch3_txphdlypd(1'b0),
        .ch3_txphdlyreset(1'b0),
        .ch3_txphdlyresetdone(NLW_gt_quad_base_0_inst_ch3_txphdlyresetdone_UNCONNECTED),
        .ch3_txphdlytstclk(1'b0),
        .ch3_txphsetinitdone(NLW_gt_quad_base_0_inst_ch3_txphsetinitdone_UNCONNECTED),
        .ch3_txphsetinitreq(1'b0),
        .ch3_txphshift180(1'b0),
        .ch3_txphshift180done(NLW_gt_quad_base_0_inst_ch3_txphshift180done_UNCONNECTED),
        .ch3_txpicodeovrden(1'b0),
        .ch3_txpicodereset(1'b0),
        .ch3_txpippmen(1'b0),
        .ch3_txpippmstepsize({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txpisopd(1'b0),
        .ch3_txpmaresetdone(NLW_gt_quad_base_0_inst_ch3_txpmaresetdone_UNCONNECTED),
        .ch3_txpmaresetmask({1'b1,1'b1,1'b1}),
        .ch3_txpolarity(1'b0),
        .ch3_txpostcursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprbsforceerr(1'b0),
        .ch3_txprbssel({1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprecursor({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txprogdivreset(1'b0),
        .ch3_txprogdivresetdone(NLW_gt_quad_base_0_inst_ch3_txprogdivresetdone_UNCONNECTED),
        .ch3_txqpibiasen(1'b0),
        .ch3_txqpisenn(NLW_gt_quad_base_0_inst_ch3_txqpisenn_UNCONNECTED),
        .ch3_txqpisenp(NLW_gt_quad_base_0_inst_ch3_txqpisenp_UNCONNECTED),
        .ch3_txqpiweakpu(1'b0),
        .ch3_txrate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txresetdone(NLW_gt_quad_base_0_inst_ch3_txresetdone_UNCONNECTED),
        .ch3_txresetmode({1'b0,1'b0}),
        .ch3_txsequence({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ch3_txsimplexphystatus(NLW_gt_quad_base_0_inst_ch3_txsimplexphystatus_UNCONNECTED),
        .ch3_txswing(1'b0),
        .ch3_txswingouthigh(NLW_gt_quad_base_0_inst_ch3_txswingouthigh_UNCONNECTED),
        .ch3_txswingoutlow(NLW_gt_quad_base_0_inst_ch3_txswingoutlow_UNCONNECTED),
        .ch3_txsyncallin(1'b0),
        .ch3_txsyncdone(NLW_gt_quad_base_0_inst_ch3_txsyncdone_UNCONNECTED),
        .ch3_txuserrdy(1'b0),
        .ch3_txusrclk(1'b0),
        .ch3_xpipe5_pipeline_en(NLW_gt_quad_base_0_inst_ch3_xpipe5_pipeline_en_UNCONNECTED),
        .coestatusdebug(1'b0),
        .correcterr(NLW_gt_quad_base_0_inst_correcterr_UNCONNECTED),
        .ctrlrsvdin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ctrlrsvdout(NLW_gt_quad_base_0_inst_ctrlrsvdout_UNCONNECTED[7:0]),
        .debugtraceclk(1'b0),
        .debugtraceready(1'b0),
        .debugtracetdata(NLW_gt_quad_base_0_inst_debugtracetdata_UNCONNECTED[15:0]),
        .debugtracetvalid(NLW_gt_quad_base_0_inst_debugtracetvalid_UNCONNECTED),
        .gpi(QUAD0_gpi),
        .gpo(QUAD0_gpo),
        .gtpowergood(gtpowergood),
        .hsclk0_lcpllfbclklost(NLW_gt_quad_base_0_inst_hsclk0_lcpllfbclklost_UNCONNECTED),
        .hsclk0_lcpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_lcplllock(QUAD0_hsclk0_lcplllock),
        .hsclk0_lcpllpd(1'b0),
        .hsclk0_lcpllrefclklost(NLW_gt_quad_base_0_inst_hsclk0_lcpllrefclklost_UNCONNECTED),
        .hsclk0_lcpllrefclkmonitor(NLW_gt_quad_base_0_inst_hsclk0_lcpllrefclkmonitor_UNCONNECTED),
        .hsclk0_lcpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk0_lcpllreset(1'b0),
        .hsclk0_lcpllresetbypassmode(1'b0),
        .hsclk0_lcpllresetmask({1'b1,1'b1}),
        .hsclk0_lcpllsdmdata({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .hsclk0_lcpllsdmtoggle(1'b0),
        .hsclk0_rpllfbclklost(NLW_gt_quad_base_0_inst_hsclk0_rpllfbclklost_UNCONNECTED),
        .hsclk0_rpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rplllock(NLW_gt_quad_base_0_inst_hsclk0_rplllock_UNCONNECTED),
        .hsclk0_rpllpd(1'b0),
        .hsclk0_rpllrefclklost(NLW_gt_quad_base_0_inst_hsclk0_rpllrefclklost_UNCONNECTED),
        .hsclk0_rpllrefclkmonitor(NLW_gt_quad_base_0_inst_hsclk0_rpllrefclkmonitor_UNCONNECTED),
        .hsclk0_rpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk0_rpllreset(1'b0),
        .hsclk0_rpllresetbypassmode(1'b0),
        .hsclk0_rpllresetmask({1'b1,1'b1}),
        .hsclk0_rpllsdmdata({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk0_rpllsdmtoggle(1'b0),
        .hsclk0_rxrecclkout0(NLW_gt_quad_base_0_inst_hsclk0_rxrecclkout0_UNCONNECTED),
        .hsclk0_rxrecclkout1(NLW_gt_quad_base_0_inst_hsclk0_rxrecclkout1_UNCONNECTED),
        .hsclk0_rxrecclksel(NLW_gt_quad_base_0_inst_hsclk0_rxrecclksel_UNCONNECTED[1:0]),
        .hsclk1_lcpllfbclklost(NLW_gt_quad_base_0_inst_hsclk1_lcpllfbclklost_UNCONNECTED),
        .hsclk1_lcpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_lcplllock(NLW_gt_quad_base_0_inst_hsclk1_lcplllock_UNCONNECTED),
        .hsclk1_lcpllpd(1'b0),
        .hsclk1_lcpllrefclklost(NLW_gt_quad_base_0_inst_hsclk1_lcpllrefclklost_UNCONNECTED),
        .hsclk1_lcpllrefclkmonitor(NLW_gt_quad_base_0_inst_hsclk1_lcpllrefclkmonitor_UNCONNECTED),
        .hsclk1_lcpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk1_lcpllreset(1'b0),
        .hsclk1_lcpllresetbypassmode(1'b0),
        .hsclk1_lcpllresetmask({1'b1,1'b1}),
        .hsclk1_lcpllsdmdata({1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0,1'b1,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .hsclk1_lcpllsdmtoggle(1'b0),
        .hsclk1_rpllfbclklost(NLW_gt_quad_base_0_inst_hsclk1_rpllfbclklost_UNCONNECTED),
        .hsclk1_rpllfbdiv({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rplllock(NLW_gt_quad_base_0_inst_hsclk1_rplllock_UNCONNECTED),
        .hsclk1_rpllpd(1'b0),
        .hsclk1_rpllrefclklost(NLW_gt_quad_base_0_inst_hsclk1_rpllrefclklost_UNCONNECTED),
        .hsclk1_rpllrefclkmonitor(NLW_gt_quad_base_0_inst_hsclk1_rpllrefclkmonitor_UNCONNECTED),
        .hsclk1_rpllrefclksel({1'b0,1'b0,1'b1}),
        .hsclk1_rpllreset(1'b0),
        .hsclk1_rpllresetbypassmode(1'b0),
        .hsclk1_rpllresetmask({1'b1,1'b1}),
        .hsclk1_rpllsdmdata({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b0,1'b1,1'b1,1'b0,1'b1,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .hsclk1_rpllsdmtoggle(1'b0),
        .hsclk1_rxrecclkout0(NLW_gt_quad_base_0_inst_hsclk1_rxrecclkout0_UNCONNECTED),
        .hsclk1_rxrecclkout1(NLW_gt_quad_base_0_inst_hsclk1_rxrecclkout1_UNCONNECTED),
        .hsclk1_rxrecclksel(NLW_gt_quad_base_0_inst_hsclk1_rxrecclksel_UNCONNECTED[1:0]),
        .pcielinkreachtarget(1'b0),
        .pcieltssm({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipenorthin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipenorthout(NLW_gt_quad_base_0_inst_pipenorthout_UNCONNECTED[5:0]),
        .pipesouthin({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipesouthout(NLW_gt_quad_base_0_inst_pipesouthout_UNCONNECTED[5:0]),
        .rcalenb(1'b0),
        .refclk0_clktestsig(1'b0),
        .refclk0_clktestsigint(NLW_gt_quad_base_0_inst_refclk0_clktestsigint_UNCONNECTED),
        .refclk0_gtrefclkpd(1'b0),
        .refclk0_gtrefclkpdint(NLW_gt_quad_base_0_inst_refclk0_gtrefclkpdint_UNCONNECTED),
        .refclk1_clktestsig(1'b0),
        .refclk1_clktestsigint(NLW_gt_quad_base_0_inst_refclk1_clktestsigint_UNCONNECTED),
        .refclk1_gtrefclkpd(1'b0),
        .refclk1_gtrefclkpdint(NLW_gt_quad_base_0_inst_refclk1_gtrefclkpdint_UNCONNECTED),
        .resetdone_northin({1'b0,1'b0}),
        .resetdone_northout(NLW_gt_quad_base_0_inst_resetdone_northout_UNCONNECTED[1:0]),
        .resetdone_southin({1'b0,1'b0}),
        .resetdone_southout(NLW_gt_quad_base_0_inst_resetdone_southout_UNCONNECTED[1:0]),
        .rxmarginclk(1'b0),
        .rxmarginreqack(NLW_gt_quad_base_0_inst_rxmarginreqack_UNCONNECTED),
        .rxmarginreqcmd({1'b0,1'b0,1'b0,1'b0}),
        .rxmarginreqlanenum({1'b0,1'b0}),
        .rxmarginreqpayld({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rxmarginreqreq(1'b0),
        .rxmarginresack(1'b0),
        .rxmarginrescmd(NLW_gt_quad_base_0_inst_rxmarginrescmd_UNCONNECTED[3:0]),
        .rxmarginreslanenum(NLW_gt_quad_base_0_inst_rxmarginreslanenum_UNCONNECTED[1:0]),
        .rxmarginrespayld(NLW_gt_quad_base_0_inst_rxmarginrespayld_UNCONNECTED[7:0]),
        .rxmarginresreq(NLW_gt_quad_base_0_inst_rxmarginresreq_UNCONNECTED),
        .rxn(QUAD0_rxn),
        .rxp(QUAD0_rxp),
        .rxpinorthin({1'b0,1'b0,1'b0,1'b0}),
        .rxpinorthout(NLW_gt_quad_base_0_inst_rxpinorthout_UNCONNECTED[3:0]),
        .rxpisouthin({1'b0,1'b0,1'b0,1'b0}),
        .rxpisouthout(NLW_gt_quad_base_0_inst_rxpisouthout_UNCONNECTED[3:0]),
        .trigackin0(NLW_gt_quad_base_0_inst_trigackin0_UNCONNECTED),
        .trigackout0(1'b0),
        .trigin0(1'b0),
        .trigout0(NLW_gt_quad_base_0_inst_trigout0_UNCONNECTED),
        .txn(QUAD0_txn),
        .txp(QUAD0_txp),
        .txpinorthin({1'b0,1'b0,1'b0,1'b0}),
        .txpinorthout(NLW_gt_quad_base_0_inst_txpinorthout_UNCONNECTED[3:0]),
        .txpisouthin({1'b0,1'b0,1'b0,1'b0}),
        .txpisouthout(NLW_gt_quad_base_0_inst_txpisouthout_UNCONNECTED[3:0]),
        .ubenable(1'b1),
        .ubinterrupt(NLW_gt_quad_base_0_inst_ubinterrupt_UNCONNECTED),
        .ubintr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ubiolmbrst(1'b0),
        .ubmbrst(1'b0),
        .ubrxuart(1'b0),
        .ubtxuart(NLW_gt_quad_base_0_inst_ubtxuart_UNCONNECTED),
        .uncorrecterr(NLW_gt_quad_base_0_inst_uncorrecterr_UNCONNECTED));
endmodule

module extended_phy_layer_gtwiz_versal_0_0_extended_phy_layer_gtwiz_versal_0_0_reset_ip
   (INTF0_rst_tx_done_out,
    gtwiz_reset_rx_done_out,
    mst_tx_reset,
    mst_rx_reset,
    mst_tx_dp_reset,
    mst_rx_dp_reset,
    ch0_txuserrdy,
    ch0_rxuserrdy,
    INTF0_RX_clr_out,
    INTF0_RX_clrb_leaf_out,
    INTF0_TX_clr_out,
    INTF0_TX_clrb_leaf_out,
    INTF0_rst_all_in,
    gtwiz_freerun_clk,
    INTF0_rst_tx_datapath_in,
    INTF0_rst_tx_pll_and_datapath_in,
    INTF0_rst_rx_datapath_in,
    INTF0_rst_rx_pll_and_datapath_in,
    gtpowergood,
    mst_tx_resetdone,
    mst_rx_resetdone,
    gtwiz_reset_userclk_tx_active_in,
    gtwiz_reset_userclk_rx_active_in);
  output INTF0_rst_tx_done_out;
  output gtwiz_reset_rx_done_out;
  output mst_tx_reset;
  output mst_rx_reset;
  output mst_tx_dp_reset;
  output mst_rx_dp_reset;
  output ch0_txuserrdy;
  output ch0_rxuserrdy;
  output INTF0_RX_clr_out;
  output INTF0_RX_clrb_leaf_out;
  output INTF0_TX_clr_out;
  output INTF0_TX_clrb_leaf_out;
  input INTF0_rst_all_in;
  input gtwiz_freerun_clk;
  input INTF0_rst_tx_datapath_in;
  input INTF0_rst_tx_pll_and_datapath_in;
  input INTF0_rst_rx_datapath_in;
  input INTF0_rst_rx_pll_and_datapath_in;
  input gtpowergood;
  input mst_tx_resetdone;
  input mst_rx_resetdone;
  input gtwiz_reset_userclk_tx_active_in;
  input gtwiz_reset_userclk_rx_active_in;

  wire \FSM_onehot_rx_sm_bufg_rst[2]_i_1_n_0 ;
  wire \FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ;
  wire \FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ;
  wire \FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ;
  wire \FSM_onehot_tx_sm_bufg_rst[2]_i_1_n_0 ;
  wire \FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ;
  wire \FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ;
  wire \FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ;
  wire INTF0_RX_clr_out;
  wire INTF0_RX_clrb_leaf_out;
  wire INTF0_TX_clr_out;
  wire INTF0_TX_clrb_leaf_out;
  wire INTF0_rst_all_in;
  wire INTF0_rst_rx_datapath_in;
  wire INTF0_rst_rx_pll_and_datapath_in;
  wire INTF0_rst_tx_datapath_in;
  wire INTF0_rst_tx_done_out;
  wire INTF0_rst_tx_pll_and_datapath_in;
  wire ch0_rxuserrdy;
  wire ch0_txuserrdy;
  wire gtpowergood;
  wire gtwiz_freerun_clk;
  wire gtwiz_reset_rx_done_out;
  wire gtwiz_reset_userclk_rx_active_in;
  wire gtwiz_reset_userclk_rx_active_sync;
  wire gtwiz_reset_userclk_tx_active_in;
  wire gtwiz_reset_userclk_tx_active_sync;
  wire mst_rx_dp_reset;
  wire mst_rx_reset;
  wire mst_rx_resetdone;
  wire mst_tx_dp_reset;
  wire mst_tx_reset;
  wire mst_tx_resetdone;
  wire p_0_in;
  wire [1:0]p_1_in;
  wire rx_clr_cnt;
  wire \rx_clr_cnt[0]_i_1_n_0 ;
  wire \rx_clr_cnt[1]_i_1_n_0 ;
  wire \rx_clr_cnt[2]_i_1_n_0 ;
  wire \rx_clr_cnt[3]_i_2_n_0 ;
  wire \rx_clr_cnt_reg_n_0_[0] ;
  wire \rx_clr_cnt_reg_n_0_[1] ;
  wire \rx_clr_cnt_reg_n_0_[2] ;
  wire \rx_clr_cnt_reg_n_0_[3] ;
  wire rx_clr_out_i_1_n_0;
  wire rx_clr_out_i_2_n_0;
  wire rx_clrb_leaf_out_i_1_n_0;
  wire rx_sm_bufg_rst__2;
  wire sel;
  wire tx_clr_cnt;
  wire \tx_clr_cnt[0]_i_1_n_0 ;
  wire \tx_clr_cnt[1]_i_1_n_0 ;
  wire \tx_clr_cnt[2]_i_1_n_0 ;
  wire \tx_clr_cnt[3]_i_2_n_0 ;
  wire \tx_clr_cnt_reg_n_0_[0] ;
  wire \tx_clr_cnt_reg_n_0_[1] ;
  wire \tx_clr_cnt_reg_n_0_[2] ;
  wire \tx_clr_cnt_reg_n_0_[3] ;
  wire tx_clr_out_i_1_n_0;
  wire tx_clr_out_i_2_n_0;
  wire tx_clrb_leaf_out_i_1_n_0;
  wire tx_sm_bufg_rst__2;
  wire \use_master_reset.gtpowergood_sync_master ;
  wire \use_master_reset.gtwiz_reset_sync_master ;
  wire \use_master_reset.gtwiz_rx_dp_reset_sync_master ;
  wire \use_master_reset.gtwiz_rx_reset_sync_master ;
  wire \use_master_reset.gtwiz_tx_dp_reset_sync_master ;
  wire \use_master_reset.gtwiz_tx_reset_sync_master ;
  wire \use_master_reset.mst_tx_dp_reset_i_1_n_0 ;
  wire \use_master_reset.mst_tx_reset_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[0]_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[1]_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[2]_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[3]_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[4]_i_1_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ;
  wire \use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ;
  wire \use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ;
  wire \use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ;
  wire \use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[3] ;
  wire \use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[4] ;
  wire \use_master_reset.rxuserrdy_out_int_dly_i_1_n_0 ;
  wire \use_master_reset.rxuserrdy_out_int_dly_reg_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_rx ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_rx_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_tx ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_tx_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_tx_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_3_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_4_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_5_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_6_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_7_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_8_n_0 ;
  wire [26:0]\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_3_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_4_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_5_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_6_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_7_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_8_n_0 ;
  wire [26:0]\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_tx ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_tx_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx ;
  wire \use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_fret__0_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_fret__1_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_fret_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_4_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_5_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_6_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx_reg[2]_fret__0_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx_reg[2]_fret_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ;
  wire \use_master_reset.sm_reset_all_master_tx ;
  wire \use_master_reset.sm_reset_all_master_tx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_tx[1]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_tx[2]_i_2_n_0 ;
  wire \use_master_reset.sm_reset_all_master_tx[2]_i_3_n_0 ;
  wire \use_master_reset.sm_reset_all_master_tx[2]_i_4_n_0 ;
  wire \use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ;
  wire \use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ;
  wire \use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_rx_i_3_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_tx ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_tx_i_2_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_tx_i_3_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ;
  wire [2:0]\use_master_reset.sm_reset_all_timer_ctr_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i___0_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i__n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ;
  wire [2:0]\use_master_reset.sm_reset_all_timer_ctr_master_tx ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___0_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_sat_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_sat_master_tx ;
  wire \use_master_reset.tx_userrdy_dly_ctr[0]_i_1_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr[1]_i_1_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr[2]_i_1_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr[3]_i_1_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr[4]_i_1_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ;
  wire \use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ;
  wire \use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ;
  wire \use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ;
  wire \use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[3] ;
  wire \use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[4] ;
  wire \use_master_reset.txuserrdy_out_int_dly_i_1_n_0 ;
  wire \use_master_reset.txuserrdy_out_int_dly_i_2_n_0 ;
  wire \use_master_reset.txuserrdy_out_int_dly_reg_n_0 ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_COUTF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_COUTH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_COUTF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_COUTH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEH_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPE_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPF_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPG_UNCONNECTED ;
  wire \NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPH_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hFFEA)) 
    \FSM_onehot_rx_sm_bufg_rst[2]_i_1 
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ),
        .I1(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I2(rx_sm_bufg_rst__2),
        .I3(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .O(\FSM_onehot_rx_sm_bufg_rst[2]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_RX_BUFG_RST_INIT:0001,ST_RX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_RX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_rx_sm_bufg_rst_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_rx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(1'b0),
        .Q(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ),
        .S(rx_clr_out_i_1_n_0));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_RX_BUFG_RST_INIT:0001,ST_RX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_RX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_rx_sm_bufg_rst_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_rx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ),
        .Q(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .R(rx_clr_out_i_1_n_0));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_RX_BUFG_RST_INIT:0001,ST_RX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_RX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_rx_sm_bufg_rst_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_rx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .Q(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .R(rx_clr_out_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFEA)) 
    \FSM_onehot_tx_sm_bufg_rst[2]_i_1 
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ),
        .I1(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I2(tx_sm_bufg_rst__2),
        .I3(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .O(\FSM_onehot_tx_sm_bufg_rst[2]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_TX_BUFG_RST_INIT:0001,ST_TX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_TX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_tx_sm_bufg_rst_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_tx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(1'b0),
        .Q(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ),
        .S(tx_clr_out_i_1_n_0));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_TX_BUFG_RST_INIT:0001,ST_TX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_TX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_tx_sm_bufg_rst_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_tx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ),
        .Q(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .R(tx_clr_out_i_1_n_0));
  (* FSM_ENCODED_STATES = "iSTATE:1000,ST_TX_BUFG_RST_INIT:0001,ST_TX_BUFG_RST_CLRB_LEAF_RELEASE:0010,ST_TX_BUFG_RST_CLR_RELEASE:0100," *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_tx_sm_bufg_rst_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\FSM_onehot_tx_sm_bufg_rst[2]_i_1_n_0 ),
        .D(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .Q(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .R(tx_clr_out_i_1_n_0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__17 extended_phy_layer_gtwiz_versal_0_0_bit_synchronizer_gtwiz_reset_rx_active_inst
       (.dest_clk(gtwiz_freerun_clk),
        .dest_rst(gtwiz_reset_userclk_rx_active_sync),
        .src_rst(gtwiz_reset_userclk_rx_active_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__16 extended_phy_layer_gtwiz_versal_0_0_bit_synchronizer_gtwiz_reset_userclk_tx_active_inst
       (.dest_clk(gtwiz_freerun_clk),
        .dest_rst(gtwiz_reset_userclk_tx_active_sync),
        .src_rst(gtwiz_reset_userclk_tx_active_in));
  LUT2 #(
    .INIT(4'h8)) 
    gt_quad_base_0_inst_i_1
       (.I0(gtwiz_reset_userclk_tx_active_sync),
        .I1(\use_master_reset.txuserrdy_out_int_dly_reg_n_0 ),
        .O(ch0_txuserrdy));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gt_quad_base_0_inst_i_2
       (.I0(gtwiz_reset_userclk_rx_active_sync),
        .I1(\use_master_reset.rxuserrdy_out_int_dly_reg_n_0 ),
        .O(ch0_rxuserrdy));
  LUT2 #(
    .INIT(4'h2)) 
    \rx_clr_cnt[0]_i_1 
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\rx_clr_cnt_reg_n_0_[0] ),
        .O(\rx_clr_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \rx_clr_cnt[1]_i_1 
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\rx_clr_cnt_reg_n_0_[1] ),
        .I2(\rx_clr_cnt_reg_n_0_[0] ),
        .O(\rx_clr_cnt[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \rx_clr_cnt[2]_i_1 
       (.I0(\rx_clr_cnt_reg_n_0_[1] ),
        .I1(\rx_clr_cnt_reg_n_0_[0] ),
        .I2(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(\rx_clr_cnt_reg_n_0_[2] ),
        .O(\rx_clr_cnt[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \rx_clr_cnt[3]_i_1 
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .I1(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .O(rx_clr_cnt));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \rx_clr_cnt[3]_i_2 
       (.I0(\rx_clr_cnt_reg_n_0_[1] ),
        .I1(\rx_clr_cnt_reg_n_0_[0] ),
        .I2(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(\rx_clr_cnt_reg_n_0_[3] ),
        .I4(\rx_clr_cnt_reg_n_0_[2] ),
        .O(\rx_clr_cnt[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rx_clr_cnt_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(rx_clr_cnt),
        .D(\rx_clr_cnt[0]_i_1_n_0 ),
        .Q(\rx_clr_cnt_reg_n_0_[0] ),
        .R(rx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_clr_cnt_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(rx_clr_cnt),
        .D(\rx_clr_cnt[1]_i_1_n_0 ),
        .Q(\rx_clr_cnt_reg_n_0_[1] ),
        .R(rx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_clr_cnt_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(rx_clr_cnt),
        .D(\rx_clr_cnt[2]_i_1_n_0 ),
        .Q(\rx_clr_cnt_reg_n_0_[2] ),
        .R(rx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_clr_cnt_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(rx_clr_cnt),
        .D(\rx_clr_cnt[3]_i_2_n_0 ),
        .Q(\rx_clr_cnt_reg_n_0_[3] ),
        .R(rx_clr_out_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rx_clr_out_i_1
       (.I0(gtwiz_reset_userclk_rx_active_sync),
        .O(rx_clr_out_i_1_n_0));
  LUT5 #(
    .INIT(32'hAEFEAAAA)) 
    rx_clr_out_i_2
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ),
        .I1(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .I2(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(rx_sm_bufg_rst__2),
        .I4(INTF0_RX_clr_out),
        .O(rx_clr_out_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    rx_clr_out_i_3
       (.I0(\rx_clr_cnt_reg_n_0_[1] ),
        .I1(\rx_clr_cnt_reg_n_0_[0] ),
        .I2(\rx_clr_cnt_reg_n_0_[3] ),
        .I3(\rx_clr_cnt_reg_n_0_[2] ),
        .O(rx_sm_bufg_rst__2));
  FDSE #(
    .INIT(1'b1)) 
    rx_clr_out_reg
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(rx_clr_out_i_2_n_0),
        .Q(INTF0_RX_clr_out),
        .S(rx_clr_out_i_1_n_0));
  LUT4 #(
    .INIT(16'hF3F1)) 
    rx_clrb_leaf_out_i_1
       (.I0(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[0] ),
        .I2(\FSM_onehot_rx_sm_bufg_rst_reg_n_0_[1] ),
        .I3(INTF0_RX_clrb_leaf_out),
        .O(rx_clrb_leaf_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_clrb_leaf_out_reg
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(rx_clrb_leaf_out_i_1_n_0),
        .Q(INTF0_RX_clrb_leaf_out),
        .R(rx_clr_out_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    \tx_clr_cnt[0]_i_1 
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\tx_clr_cnt_reg_n_0_[0] ),
        .O(\tx_clr_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \tx_clr_cnt[1]_i_1 
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\tx_clr_cnt_reg_n_0_[1] ),
        .I2(\tx_clr_cnt_reg_n_0_[0] ),
        .O(\tx_clr_cnt[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \tx_clr_cnt[2]_i_1 
       (.I0(\tx_clr_cnt_reg_n_0_[1] ),
        .I1(\tx_clr_cnt_reg_n_0_[0] ),
        .I2(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(\tx_clr_cnt_reg_n_0_[2] ),
        .O(\tx_clr_cnt[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \tx_clr_cnt[3]_i_1 
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .I1(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .O(tx_clr_cnt));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \tx_clr_cnt[3]_i_2 
       (.I0(\tx_clr_cnt_reg_n_0_[1] ),
        .I1(\tx_clr_cnt_reg_n_0_[0] ),
        .I2(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(\tx_clr_cnt_reg_n_0_[3] ),
        .I4(\tx_clr_cnt_reg_n_0_[2] ),
        .O(\tx_clr_cnt[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \tx_clr_cnt_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(tx_clr_cnt),
        .D(\tx_clr_cnt[0]_i_1_n_0 ),
        .Q(\tx_clr_cnt_reg_n_0_[0] ),
        .R(tx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \tx_clr_cnt_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(tx_clr_cnt),
        .D(\tx_clr_cnt[1]_i_1_n_0 ),
        .Q(\tx_clr_cnt_reg_n_0_[1] ),
        .R(tx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \tx_clr_cnt_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(tx_clr_cnt),
        .D(\tx_clr_cnt[2]_i_1_n_0 ),
        .Q(\tx_clr_cnt_reg_n_0_[2] ),
        .R(tx_clr_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \tx_clr_cnt_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(tx_clr_cnt),
        .D(\tx_clr_cnt[3]_i_2_n_0 ),
        .Q(\tx_clr_cnt_reg_n_0_[3] ),
        .R(tx_clr_out_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_clr_out_i_1
       (.I0(gtwiz_reset_userclk_tx_active_sync),
        .O(tx_clr_out_i_1_n_0));
  LUT5 #(
    .INIT(32'hAEFEAAAA)) 
    tx_clr_out_i_2
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ),
        .I1(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .I2(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I3(tx_sm_bufg_rst__2),
        .I4(INTF0_TX_clr_out),
        .O(tx_clr_out_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    tx_clr_out_i_3
       (.I0(\tx_clr_cnt_reg_n_0_[1] ),
        .I1(\tx_clr_cnt_reg_n_0_[0] ),
        .I2(\tx_clr_cnt_reg_n_0_[3] ),
        .I3(\tx_clr_cnt_reg_n_0_[2] ),
        .O(tx_sm_bufg_rst__2));
  FDSE #(
    .INIT(1'b1)) 
    tx_clr_out_reg
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(tx_clr_out_i_2_n_0),
        .Q(INTF0_TX_clr_out),
        .S(tx_clr_out_i_1_n_0));
  LUT4 #(
    .INIT(16'hF3F1)) 
    tx_clrb_leaf_out_i_1
       (.I0(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[2] ),
        .I1(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[0] ),
        .I2(\FSM_onehot_tx_sm_bufg_rst_reg_n_0_[1] ),
        .I3(INTF0_TX_clrb_leaf_out),
        .O(tx_clrb_leaf_out_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_clrb_leaf_out_reg
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(tx_clrb_leaf_out_i_1_n_0),
        .Q(INTF0_TX_clrb_leaf_out),
        .R(tx_clr_out_i_1_n_0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__13 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_bit_synchronizer_gtpowergood_inst 
       (.dest_clk(gtwiz_freerun_clk),
        .dest_rst(\use_master_reset.gtpowergood_sync_master ),
        .src_rst(gtpowergood));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__1 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst 
       (.dest_arst(\use_master_reset.gtwiz_reset_sync_master ),
        .dest_clk(gtwiz_freerun_clk),
        .src_arst(INTF0_rst_all_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_rx 
       (.dest_arst(\use_master_reset.gtwiz_rx_reset_sync_master ),
        .dest_clk(gtwiz_freerun_clk),
        .src_arst(INTF0_rst_rx_pll_and_datapath_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__15 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1 
       (.dest_clk(gtwiz_freerun_clk),
        .dest_rst(gtwiz_reset_rx_done_out),
        .src_rst(mst_rx_resetdone));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__4 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_rx_dp 
       (.dest_arst(\use_master_reset.gtwiz_rx_dp_reset_sync_master ),
        .dest_clk(gtwiz_freerun_clk),
        .src_arst(INTF0_rst_rx_datapath_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__3 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_tx 
       (.dest_arst(\use_master_reset.gtwiz_tx_reset_sync_master ),
        .dest_clk(gtwiz_freerun_clk),
        .src_arst(INTF0_rst_tx_pll_and_datapath_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__14 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_tx_1 
       (.dest_clk(gtwiz_freerun_clk),
        .dest_rst(INTF0_rst_tx_done_out),
        .src_rst(mst_tx_resetdone));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__2 \use_master_reset.extended_phy_layer_gtwiz_versal_0_0_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dp 
       (.dest_arst(\use_master_reset.gtwiz_tx_dp_reset_sync_master ),
        .dest_clk(gtwiz_freerun_clk),
        .src_arst(INTF0_rst_tx_datapath_in));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.mst_rx_dp_reset_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__0_n_0 ),
        .Q(mst_rx_dp_reset),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.mst_rx_reset_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret_n_0 ),
        .Q(mst_rx_reset),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \use_master_reset.mst_tx_dp_reset_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .O(\use_master_reset.mst_tx_dp_reset_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.mst_tx_dp_reset_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.mst_tx_dp_reset_i_1_n_0 ),
        .Q(mst_tx_dp_reset),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \use_master_reset.mst_tx_reset_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .O(\use_master_reset.mst_tx_reset_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.mst_tx_reset_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.mst_tx_reset_i_1_n_0 ),
        .Q(mst_tx_reset),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \use_master_reset.rx_userrdy_dly_ctr[0]_i_1 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .O(\use_master_reset.rx_userrdy_dly_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \use_master_reset.rx_userrdy_dly_ctr[1]_i_1 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I2(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .O(\use_master_reset.rx_userrdy_dly_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \use_master_reset.rx_userrdy_dly_ctr[2]_i_1 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I2(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I3(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ),
        .O(\use_master_reset.rx_userrdy_dly_ctr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h6AAA0000)) 
    \use_master_reset.rx_userrdy_dly_ctr[3]_i_1 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ),
        .I2(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I3(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I4(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .O(\use_master_reset.rx_userrdy_dly_ctr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \use_master_reset.rx_userrdy_dly_ctr[4]_i_1 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[4] ),
        .I2(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I3(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I4(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I5(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ),
        .O(\use_master_reset.rx_userrdy_dly_ctr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \use_master_reset.rx_userrdy_dly_ctr[4]_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I3(gtwiz_reset_userclk_rx_active_sync),
        .O(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rx_userrdy_dly_ctr_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rx_userrdy_dly_ctr[0]_i_1_n_0 ),
        .Q(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rx_userrdy_dly_ctr_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rx_userrdy_dly_ctr[1]_i_1_n_0 ),
        .Q(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rx_userrdy_dly_ctr_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rx_userrdy_dly_ctr[2]_i_1_n_0 ),
        .Q(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rx_userrdy_dly_ctr_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rx_userrdy_dly_ctr[3]_i_1_n_0 ),
        .Q(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[3] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rx_userrdy_dly_ctr_reg[4] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rx_userrdy_dly_ctr[4]_i_1_n_0 ),
        .Q(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[4] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \use_master_reset.rxuserrdy_out_int_dly_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ),
        .O(\use_master_reset.rxuserrdy_out_int_dly_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rxuserrdy_out_int_dly_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.rxuserrdy_out_int_dly_i_1_n_0 ),
        .Q(\use_master_reset.rxuserrdy_out_int_dly_reg_n_0 ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \use_master_reset.sm_mstresetdone_timer_clr_rx_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(gtwiz_reset_userclk_rx_active_sync),
        .I3(gtwiz_reset_rx_done_out),
        .I4(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .O(\use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_mstresetdone_timer_clr_rx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_clr_rx_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_clr_rx ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \use_master_reset.sm_mstresetdone_timer_clr_tx_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_clr_tx_i_2_n_0 ),
        .O(\use_master_reset.sm_mstresetdone_timer_clr_tx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'hFFFB)) 
    \use_master_reset.sm_mstresetdone_timer_clr_tx_i_2 
       (.I0(INTF0_rst_tx_done_out),
        .I1(gtwiz_reset_userclk_tx_active_sync),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I3(\use_master_reset.sm_mstresetdone_timer_sat_tx ),
        .O(\use_master_reset.sm_mstresetdone_timer_clr_tx_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_mstresetdone_timer_clr_tx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_2_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_clr_tx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_clr_tx ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFFFFFFFFFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_3_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_4_n_0 ),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_5_n_0 ),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_3 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_6_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_4 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_5 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_7_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_8_n_0 ),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_6 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_7 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [24]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [26]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [25]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_8 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFFFFFF00FF0000FF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .I4(1'b0),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [24]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [24]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [25]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [25]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [26]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00FF0000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [26]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_3 ));
  (* KEEP = "yes" *) 
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("FALSE"),
    .LOOKH("FALSE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_n_1 ),
        .COUTF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_COUTF_UNCONNECTED ),
        .COUTH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_COUTH_UNCONNECTED ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_2 ),
        .CYE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYE_UNCONNECTED ),
        .CYF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYF_UNCONNECTED ),
        .CYG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYG_UNCONNECTED ),
        .CYH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_CYH_UNCONNECTED ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_0 ),
        .GEE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEE_UNCONNECTED ),
        .GEF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEF_UNCONNECTED ),
        .GEG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEG_UNCONNECTED ),
        .GEH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_GEH_UNCONNECTED ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[24]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[25]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_3 ),
        .PROPE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPE_UNCONNECTED ),
        .PROPF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPF_UNCONNECTED ),
        .PROPG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPG_UNCONNECTED ),
        .PROPH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_2_PROPH_UNCONNECTED ));
  LUT6CY #(
    .INIT(64'h00000000FF000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(1'b0),
        .I4(1'b0),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[26]_i_3_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("FALSE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2 
       (.CIN(1'b0),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ));
  LUT6 #(
    .INIT(64'hFFFFBFFFFFFFFFFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_1 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_3_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [11]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [12]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [13]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_4_n_0 ),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_5_n_0 ),
        .O(sel));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_3 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_6_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [4]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [5]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [6]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_4 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [8]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [7]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [10]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [9]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_5 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_7_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [20]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [19]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [18]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_8_n_0 ),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_6 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [1]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [0]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [3]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [2]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_7 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [24]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [26]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [25]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [23]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [21]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [22]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_8 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [15]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [14]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [17]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [16]),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_tx[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [0]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFFFFFF00FF0000FF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [0]),
        .I4(1'b0),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [10]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [10]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [11]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [11]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[11]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [12]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [12]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [13]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [13]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[12]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[13]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [14]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [14]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [15]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [15]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[14]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [16]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [16]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [17]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [17]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [18]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [18]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[10]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[16]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[17]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [19]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [19]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[19]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [1]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [1]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [20]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [20]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [21]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [21]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[20]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[21]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [22]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [22]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [23]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [23]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[22]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [24]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [24]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [25]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [25]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [26]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00FF0000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [26]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_3 ));
  (* KEEP = "yes" *) 
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("FALSE"),
    .LOOKH("FALSE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[18]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_n_1 ),
        .COUTF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_COUTF_UNCONNECTED ),
        .COUTH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_COUTH_UNCONNECTED ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_2 ),
        .CYE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYE_UNCONNECTED ),
        .CYF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYF_UNCONNECTED ),
        .CYG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYG_UNCONNECTED ),
        .CYH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_CYH_UNCONNECTED ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_0 ),
        .GEE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEE_UNCONNECTED ),
        .GEF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEF_UNCONNECTED ),
        .GEG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEG_UNCONNECTED ),
        .GEH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_GEH_UNCONNECTED ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[24]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[25]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_3 ),
        .PROPE(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPE_UNCONNECTED ),
        .PROPF(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPF_UNCONNECTED ),
        .PROPG(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPG_UNCONNECTED ),
        .PROPH(\NLW_use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_2_PROPH_UNCONNECTED ));
  LUT6CY #(
    .INIT(64'h00000000FF000000)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(1'b0),
        .I4(1'b0),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[26]_i_3_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [2]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [2]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("FALSE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2 
       (.CIN(1'b0),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[0]_i_2_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[1]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [3]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [3]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[3]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [4]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [4]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [5]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [5]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[4]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[5]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [6]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [6]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [7]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [7]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[6]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [8]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [8]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[2]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9] 
       (.C(gtwiz_freerun_clk),
        .CE(sel),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [9]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_tx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg [9]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[8]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_tx_reg[9]_i_1_n_3 ));
  LUT3 #(
    .INIT(8'h0D)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_1 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .I2(\use_master_reset.sm_mstresetdone_timer_clr_rx ),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h0D)) 
    \use_master_reset.sm_mstresetdone_timer_sat_tx_i_1 
       (.I0(sel),
        .I1(\use_master_reset.sm_mstresetdone_timer_sat_tx ),
        .I2(\use_master_reset.sm_mstresetdone_timer_clr_tx ),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_sat_tx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_mstresetdone_timer_sat_tx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_sat_tx ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h55554540)) 
    \use_master_reset.sm_reset_all_master_rx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(gtwiz_reset_userclk_rx_active_sync),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I3(\use_master_reset.gtpowergood_sync_master ),
        .I4(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .O(\use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hFB7A)) 
    \use_master_reset.sm_reset_all_master_rx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(gtwiz_reset_userclk_rx_active_sync),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h60)) 
    \use_master_reset.sm_reset_all_master_rx[2]_fret__0_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_fret__0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hFD7F)) 
    \use_master_reset.sm_reset_all_master_rx[2]_fret__1_i_1 
       (.I0(gtwiz_reset_userclk_rx_active_sync),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_fret__1_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \use_master_reset.sm_reset_all_master_rx[2]_fret_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_fret_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40004040)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I3(\use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ),
        .I4(gtwiz_reset_userclk_rx_active_sync),
        .I5(\use_master_reset.sm_reset_all_master_rx[2]_i_4_n_0 ),
        .O(\use_master_reset.sm_reset_all_master_rx ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h3E80)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_2 
       (.I0(gtwiz_reset_userclk_rx_active_sync),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_3 
       (.I0(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[4] ),
        .I1(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I2(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I3(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I4(\use_master_reset.rx_userrdy_dly_ctr_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEFEEEE)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_4 
       (.I0(\use_master_reset.sm_reset_all_master_rx[2]_i_5_n_0 ),
        .I1(\use_master_reset.sm_reset_all_master_rx[2]_i_6_n_0 ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I3(gtwiz_reset_rx_done_out),
        .I4(gtwiz_reset_userclk_rx_active_sync),
        .I5(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFD00FD)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_5 
       (.I0(gtwiz_reset_userclk_rx_active_sync),
        .I1(gtwiz_reset_rx_done_out),
        .I2(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I4(\use_master_reset.gtwiz_rx_dp_reset_sync_master ),
        .I5(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0F00FFFF0A002222)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_6 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__0_n_0 ),
        .I1(\use_master_reset.gtwiz_rx_dp_reset_sync_master ),
        .I2(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .I3(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .I4(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I5(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret_n_0 ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDSE \use_master_reset.sm_reset_all_master_rx_reg[2]_fret 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[2]_fret_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret_n_0 ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDRE \use_master_reset.sm_reset_all_master_rx_reg[2]_fret__0 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[2]_fret__0_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__0_n_0 ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  FDSE \use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[2]_fret__1_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h55554540)) 
    \use_master_reset.sm_reset_all_master_tx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I1(gtwiz_reset_userclk_tx_active_sync),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I3(\use_master_reset.gtpowergood_sync_master ),
        .I4(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .O(\use_master_reset.sm_reset_all_master_tx[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'hFB7A)) 
    \use_master_reset.sm_reset_all_master_tx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I1(gtwiz_reset_userclk_tx_active_sync),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .I3(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_tx[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEFEFEEEFE)) 
    \use_master_reset.sm_reset_all_master_tx[2]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_tx[2]_i_3_n_0 ),
        .I1(\use_master_reset.sm_reset_all_master_tx[2]_i_4_n_0 ),
        .I2(\use_master_reset.sm_mstresetdone_timer_clr_tx_i_2_n_0 ),
        .I3(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I4(\use_master_reset.gtwiz_tx_dp_reset_sync_master ),
        .I5(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ),
        .O(\use_master_reset.sm_reset_all_master_tx ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h3E80)) 
    \use_master_reset.sm_reset_all_master_tx[2]_i_2 
       (.I0(gtwiz_reset_userclk_tx_active_sync),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I3(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_tx[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2000203030003000)) 
    \use_master_reset.sm_reset_all_master_tx[2]_i_3 
       (.I0(\use_master_reset.txuserrdy_out_int_dly_i_2_n_0 ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .I3(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I4(INTF0_rst_tx_done_out),
        .I5(gtwiz_reset_userclk_tx_active_sync),
        .O(\use_master_reset.sm_reset_all_master_tx[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h22202220F0F0FFF0)) 
    \use_master_reset.sm_reset_all_master_tx[2]_i_4 
       (.I0(\use_master_reset.sm_reset_all_timer_sat_master_tx ),
        .I1(\use_master_reset.sm_reset_all_timer_clr_master_tx ),
        .I2(\use_master_reset.mst_tx_reset_i_1_n_0 ),
        .I3(\use_master_reset.mst_tx_dp_reset_i_1_n_0 ),
        .I4(\use_master_reset.gtwiz_tx_dp_reset_sync_master ),
        .I5(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .O(\use_master_reset.sm_reset_all_master_tx[2]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_tx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_tx ),
        .D(\use_master_reset.sm_reset_all_master_tx[0]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_tx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_tx ),
        .D(\use_master_reset.sm_reset_all_master_tx[1]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_tx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_master_tx ),
        .D(\use_master_reset.sm_reset_all_master_tx[2]_i_2_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_i_1 
       (.I0(\use_master_reset.gtwiz_rx_reset_sync_master ),
        .I1(\use_master_reset.gtwiz_reset_sync_master ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .O(\use_master_reset.sm_mstresetdone_timer_clr_rx_0 ));
  LUT4 #(
    .INIT(16'h5DFF)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_i_3 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .I2(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg[2]_fret__1_n_0 ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_mstresetdone_timer_clr_rx_0 ),
        .D(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_3_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \use_master_reset.sm_reset_all_timer_clr_master_tx_i_1 
       (.I0(\use_master_reset.gtwiz_tx_reset_sync_master ),
        .I1(\use_master_reset.gtwiz_reset_sync_master ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \use_master_reset.sm_reset_all_timer_clr_master_tx_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h5DFF)) 
    \use_master_reset.sm_reset_all_timer_clr_master_tx_i_3 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_timer_sat_master_tx ),
        .I2(\use_master_reset.sm_reset_all_timer_clr_master_tx ),
        .I3(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \use_master_reset.sm_reset_all_timer_clr_master_tx_i_4 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_reset_all_timer_clr_master_tx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_2_n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_3_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_clr_master_tx ),
        .S(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i_ 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i__n_0 ));
  LUT5 #(
    .INIT(32'h0000FF80)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i___0 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .I3(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .I4(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i___0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i__n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i__n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i__n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  LUT3 #(
    .INIT(8'h7F)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i_ 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_tx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_tx [1]),
        .O(p_0_in));
  LUT3 #(
    .INIT(8'hEA)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___0 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_tx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_tx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___0_n_0 ));
  LUT5 #(
    .INIT(32'h0000FF80)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_tx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_tx [1]),
        .I3(\use_master_reset.sm_reset_all_timer_sat_master_tx ),
        .I4(\use_master_reset.sm_reset_all_timer_clr_master_tx ),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .O(p_1_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_tx [1]),
        .O(p_1_in[1]));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(p_0_in),
        .D(p_1_in[0]),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_tx [0]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(p_0_in),
        .D(p_1_in[1]),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_tx [1]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_tx_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___0_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_tx [2]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_sat_master_rx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_inferred__0/i___0_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_sat_master_tx_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_tx0_inferred__0/i___1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_sat_master_tx ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \use_master_reset.tx_userrdy_dly_ctr[0]_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .O(\use_master_reset.tx_userrdy_dly_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \use_master_reset.tx_userrdy_dly_ctr[1]_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I2(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .O(\use_master_reset.tx_userrdy_dly_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \use_master_reset.tx_userrdy_dly_ctr[2]_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I2(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I3(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ),
        .O(\use_master_reset.tx_userrdy_dly_ctr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h6AAA0000)) 
    \use_master_reset.tx_userrdy_dly_ctr[3]_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ),
        .I2(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I3(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I4(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .O(\use_master_reset.tx_userrdy_dly_ctr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \use_master_reset.tx_userrdy_dly_ctr[4]_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I2(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I3(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I4(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ),
        .I5(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[4] ),
        .O(\use_master_reset.tx_userrdy_dly_ctr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \use_master_reset.tx_userrdy_dly_ctr[4]_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[2] ),
        .I1(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[0] ),
        .I2(\use_master_reset.sm_reset_all_master_tx_reg_n_0_[1] ),
        .I3(gtwiz_reset_userclk_tx_active_sync),
        .O(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.tx_userrdy_dly_ctr_reg[0] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.tx_userrdy_dly_ctr[0]_i_1_n_0 ),
        .Q(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.tx_userrdy_dly_ctr_reg[1] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.tx_userrdy_dly_ctr[1]_i_1_n_0 ),
        .Q(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.tx_userrdy_dly_ctr_reg[2] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.tx_userrdy_dly_ctr[2]_i_1_n_0 ),
        .Q(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.tx_userrdy_dly_ctr_reg[3] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.tx_userrdy_dly_ctr[3]_i_1_n_0 ),
        .Q(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[3] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.tx_userrdy_dly_ctr_reg[4] 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.tx_userrdy_dly_ctr[4]_i_1_n_0 ),
        .Q(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[4] ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \use_master_reset.txuserrdy_out_int_dly_i_1 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr[4]_i_2_n_0 ),
        .I1(\use_master_reset.txuserrdy_out_int_dly_i_2_n_0 ),
        .I2(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_4_n_0 ),
        .O(\use_master_reset.txuserrdy_out_int_dly_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \use_master_reset.txuserrdy_out_int_dly_i_2 
       (.I0(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[4] ),
        .I1(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[3] ),
        .I2(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[1] ),
        .I3(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[0] ),
        .I4(\use_master_reset.tx_userrdy_dly_ctr_reg_n_0_[2] ),
        .O(\use_master_reset.txuserrdy_out_int_dly_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.txuserrdy_out_int_dly_reg 
       (.C(gtwiz_freerun_clk),
        .CE(1'b1),
        .D(\use_master_reset.txuserrdy_out_int_dly_i_1_n_0 ),
        .Q(\use_master_reset.txuserrdy_out_int_dly_reg_n_0 ),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_tx_i_1_n_0 ));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* RST_ACTIVE_HIGH = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "ASYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__1
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__2
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__3
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_async_rst__4
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) 
(* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__32
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__33
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__34
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__35
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__36
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__37
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__38
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__39
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__40
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__41
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__42
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__43
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__44
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__45
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__46
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__47
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__48
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__49
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__50
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__51
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__52
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__53
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__54
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__55
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__56
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__57
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__58
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__59
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__60
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__61
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_single__62
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__13
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__14
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__15
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__16
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__17
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__18
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__19
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__20
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__21
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__22
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__23
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__24
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__100
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__101
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__102
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__103
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__104
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__105
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__106
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__107
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__108
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__109
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__110
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__111
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__112
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__113
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__114
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__115
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__116
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__117
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__118
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__119
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__120
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__121
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__122
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__123
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__124
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__125
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__126
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__127
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__128
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__129
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__130
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__131
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__132
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__133
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__134
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__135
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__136
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__137
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__138
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__139
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__140
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__141
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__142
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__143
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__144
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__145
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__146
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__147
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__148
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__149
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__150
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__151
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__152
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__153
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__154
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__155
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__156
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__157
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__158
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__159
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__160
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__161
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__162
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__163
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__164
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__165
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__166
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__167
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__168
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__169
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__170
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__171
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__172
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__173
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__174
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__175
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__176
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__177
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__178
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__179
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__180
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__181
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__182
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__183
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__184
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__185
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__186
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__187
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__188
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__189
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__190
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__191
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__192
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__193
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__194
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__195
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__196
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__197
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module extended_phy_layer_gtwiz_versal_0_0_xpm_cdc_sync_rst__parameterized0__198
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
