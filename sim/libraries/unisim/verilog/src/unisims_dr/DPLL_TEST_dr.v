`include "B_DPLL_TEST_defines.vh"

reg [`DPLL_TEST_DATA_SZ-1:0] ATTR [0:`DPLL_TEST_ADDR_N-1];
reg [31:0] CLKFBOUT_MULT_F_REG = CLKFBOUT_MULT_F;
real CLKIN_PERIOD_REG = CLKIN_PERIOD;
reg [31:0] CLKOUT0_DIVIDE_REG = CLKOUT0_DIVIDE;
real CLKOUT0_PHASE_REG = CLKOUT0_PHASE;
reg [40:1] CLKOUT0_USE_FINE_PS_REG = CLKOUT0_USE_FINE_PS;
reg [31:0] CLKOUT1_DIVIDE_REG = CLKOUT1_DIVIDE;
real CLKOUT1_PHASE_REG = CLKOUT1_PHASE;
reg [40:1] CLKOUT1_USE_FINE_PS_REG = CLKOUT1_USE_FINE_PS;
reg [31:0] CLKOUT2_DIVIDE_REG = CLKOUT2_DIVIDE;
real CLKOUT2_PHASE_REG = CLKOUT2_PHASE;
reg [40:1] CLKOUT2_USE_FINE_PS_REG = CLKOUT2_USE_FINE_PS;
reg [31:0] CLKOUT3_DIVIDE_REG = CLKOUT3_DIVIDE;
real CLKOUT3_PHASE_REG = CLKOUT3_PHASE;
reg [40:1] CLKOUT3_USE_FINE_PS_REG = CLKOUT3_USE_FINE_PS;
reg [40:1] DESKEW_EN_REG = DESKEW_EN;
reg [31:0] DIVCLK_DIVIDE_REG = DIVCLK_DIVIDE;
reg [40:1] INTERP0_EN_PD_REG = INTERP0_EN_PD;
reg [31:0] INTERP0_SKEW_REG = INTERP0_SKEW;
reg [40:1] INTERP1_EN_PD_REG = INTERP1_EN_PD;
reg [31:0] INTERP1_SKEW_REG = INTERP1_SKEW;
reg IS_CLKIN_INVERTED_REG = IS_CLKIN_INVERTED;
reg IS_PWRDWN_INVERTED_REG = IS_PWRDWN_INVERTED;
reg IS_RST_INVERTED_REG = IS_RST_INVERTED;
real REF_JITTER_REG = REF_JITTER;

initial begin
  ATTR[`DPLL_TEST__CLKFBOUT_MULT_F] = CLKFBOUT_MULT_F;
  ATTR[`DPLL_TEST__CLKIN_PERIOD] = $realtobits(CLKIN_PERIOD);
  ATTR[`DPLL_TEST__CLKOUT0_DIVIDE] = CLKOUT0_DIVIDE;
  ATTR[`DPLL_TEST__CLKOUT0_PHASE] = $realtobits(CLKOUT0_PHASE);
  ATTR[`DPLL_TEST__CLKOUT0_USE_FINE_PS] = CLKOUT0_USE_FINE_PS;
  ATTR[`DPLL_TEST__CLKOUT1_DIVIDE] = CLKOUT1_DIVIDE;
  ATTR[`DPLL_TEST__CLKOUT1_PHASE] = $realtobits(CLKOUT1_PHASE);
  ATTR[`DPLL_TEST__CLKOUT1_USE_FINE_PS] = CLKOUT1_USE_FINE_PS;
  ATTR[`DPLL_TEST__CLKOUT2_DIVIDE] = CLKOUT2_DIVIDE;
  ATTR[`DPLL_TEST__CLKOUT2_PHASE] = $realtobits(CLKOUT2_PHASE);
  ATTR[`DPLL_TEST__CLKOUT2_USE_FINE_PS] = CLKOUT2_USE_FINE_PS;
  ATTR[`DPLL_TEST__CLKOUT3_DIVIDE] = CLKOUT3_DIVIDE;
  ATTR[`DPLL_TEST__CLKOUT3_PHASE] = $realtobits(CLKOUT3_PHASE);
  ATTR[`DPLL_TEST__CLKOUT3_USE_FINE_PS] = CLKOUT3_USE_FINE_PS;
  ATTR[`DPLL_TEST__DESKEW_EN] = DESKEW_EN;
  ATTR[`DPLL_TEST__DIVCLK_DIVIDE] = DIVCLK_DIVIDE;
  ATTR[`DPLL_TEST__INTERP0_EN_PD] = INTERP0_EN_PD;
  ATTR[`DPLL_TEST__INTERP0_SKEW] = INTERP0_SKEW;
  ATTR[`DPLL_TEST__INTERP1_EN_PD] = INTERP1_EN_PD;
  ATTR[`DPLL_TEST__INTERP1_SKEW] = INTERP1_SKEW;
  ATTR[`DPLL_TEST__IS_CLKIN_INVERTED] = IS_CLKIN_INVERTED;
  ATTR[`DPLL_TEST__IS_PWRDWN_INVERTED] = IS_PWRDWN_INVERTED;
  ATTR[`DPLL_TEST__IS_RST_INVERTED] = IS_RST_INVERTED;
  ATTR[`DPLL_TEST__REF_JITTER] = $realtobits(REF_JITTER);
end

always @(trig_attr) begin
  CLKFBOUT_MULT_F_REG = ATTR[`DPLL_TEST__CLKFBOUT_MULT_F];
  CLKIN_PERIOD_REG = $bitstoreal(ATTR[`DPLL_TEST__CLKIN_PERIOD]);
  CLKOUT0_DIVIDE_REG = ATTR[`DPLL_TEST__CLKOUT0_DIVIDE];
  CLKOUT0_PHASE_REG = $bitstoreal(ATTR[`DPLL_TEST__CLKOUT0_PHASE]);
  CLKOUT0_USE_FINE_PS_REG = ATTR[`DPLL_TEST__CLKOUT0_USE_FINE_PS];
  CLKOUT1_DIVIDE_REG = ATTR[`DPLL_TEST__CLKOUT1_DIVIDE];
  CLKOUT1_PHASE_REG = $bitstoreal(ATTR[`DPLL_TEST__CLKOUT1_PHASE]);
  CLKOUT1_USE_FINE_PS_REG = ATTR[`DPLL_TEST__CLKOUT1_USE_FINE_PS];
  CLKOUT2_DIVIDE_REG = ATTR[`DPLL_TEST__CLKOUT2_DIVIDE];
  CLKOUT2_PHASE_REG = $bitstoreal(ATTR[`DPLL_TEST__CLKOUT2_PHASE]);
  CLKOUT2_USE_FINE_PS_REG = ATTR[`DPLL_TEST__CLKOUT2_USE_FINE_PS];
  CLKOUT3_DIVIDE_REG = ATTR[`DPLL_TEST__CLKOUT3_DIVIDE];
  CLKOUT3_PHASE_REG = $bitstoreal(ATTR[`DPLL_TEST__CLKOUT3_PHASE]);
  CLKOUT3_USE_FINE_PS_REG = ATTR[`DPLL_TEST__CLKOUT3_USE_FINE_PS];
  DESKEW_EN_REG = ATTR[`DPLL_TEST__DESKEW_EN];
  DIVCLK_DIVIDE_REG = ATTR[`DPLL_TEST__DIVCLK_DIVIDE];
  INTERP0_EN_PD_REG = ATTR[`DPLL_TEST__INTERP0_EN_PD];
  INTERP0_SKEW_REG = ATTR[`DPLL_TEST__INTERP0_SKEW];
  INTERP1_EN_PD_REG = ATTR[`DPLL_TEST__INTERP1_EN_PD];
  INTERP1_SKEW_REG = ATTR[`DPLL_TEST__INTERP1_SKEW];
  IS_CLKIN_INVERTED_REG = ATTR[`DPLL_TEST__IS_CLKIN_INVERTED];
  IS_PWRDWN_INVERTED_REG = ATTR[`DPLL_TEST__IS_PWRDWN_INVERTED];
  IS_RST_INVERTED_REG = ATTR[`DPLL_TEST__IS_RST_INVERTED];
  REF_JITTER_REG = $bitstoreal(ATTR[`DPLL_TEST__REF_JITTER]);
end

// procedures to override, read attribute values

task write_attr;
  input  [`DPLL_TEST_ADDR_SZ-1:0] addr;
  input  [`DPLL_TEST_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`DPLL_TEST_DATA_SZ-1:0] read_attr;
  input  [`DPLL_TEST_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
trig_attr = ~trig_attr;
  end
endtask
