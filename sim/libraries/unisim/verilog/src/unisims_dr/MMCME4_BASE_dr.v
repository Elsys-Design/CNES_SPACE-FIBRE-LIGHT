`include "B_MMCME4_BASE_defines.vh"

reg [`MMCME4_BASE_DATA_SZ-1:0] ATTR [0:`MMCME4_BASE_ADDR_N-1];
reg [`MMCME4_BASE__BANDWIDTH_SZ:1] BANDWIDTH_REG = BANDWIDTH;
real CLKFBOUT_MULT_F_REG = CLKFBOUT_MULT_F;
real CLKFBOUT_PHASE_REG = CLKFBOUT_PHASE;
real CLKIN1_PERIOD_REG = CLKIN1_PERIOD;
real CLKOUT0_DIVIDE_F_REG = CLKOUT0_DIVIDE_F;
real CLKOUT0_DUTY_CYCLE_REG = CLKOUT0_DUTY_CYCLE;
real CLKOUT0_PHASE_REG = CLKOUT0_PHASE;
reg [`MMCME4_BASE__CLKOUT1_DIVIDE_SZ-1:0] CLKOUT1_DIVIDE_REG = CLKOUT1_DIVIDE;
real CLKOUT1_DUTY_CYCLE_REG = CLKOUT1_DUTY_CYCLE;
real CLKOUT1_PHASE_REG = CLKOUT1_PHASE;
reg [`MMCME4_BASE__CLKOUT2_DIVIDE_SZ-1:0] CLKOUT2_DIVIDE_REG = CLKOUT2_DIVIDE;
real CLKOUT2_DUTY_CYCLE_REG = CLKOUT2_DUTY_CYCLE;
real CLKOUT2_PHASE_REG = CLKOUT2_PHASE;
reg [`MMCME4_BASE__CLKOUT3_DIVIDE_SZ-1:0] CLKOUT3_DIVIDE_REG = CLKOUT3_DIVIDE;
real CLKOUT3_DUTY_CYCLE_REG = CLKOUT3_DUTY_CYCLE;
real CLKOUT3_PHASE_REG = CLKOUT3_PHASE;
reg [`MMCME4_BASE__CLKOUT4_CASCADE_SZ:1] CLKOUT4_CASCADE_REG = CLKOUT4_CASCADE;
reg [`MMCME4_BASE__CLKOUT4_DIVIDE_SZ-1:0] CLKOUT4_DIVIDE_REG = CLKOUT4_DIVIDE;
real CLKOUT4_DUTY_CYCLE_REG = CLKOUT4_DUTY_CYCLE;
real CLKOUT4_PHASE_REG = CLKOUT4_PHASE;
reg [`MMCME4_BASE__CLKOUT5_DIVIDE_SZ-1:0] CLKOUT5_DIVIDE_REG = CLKOUT5_DIVIDE;
real CLKOUT5_DUTY_CYCLE_REG = CLKOUT5_DUTY_CYCLE;
real CLKOUT5_PHASE_REG = CLKOUT5_PHASE;
reg [`MMCME4_BASE__CLKOUT6_DIVIDE_SZ-1:0] CLKOUT6_DIVIDE_REG = CLKOUT6_DIVIDE;
real CLKOUT6_DUTY_CYCLE_REG = CLKOUT6_DUTY_CYCLE;
real CLKOUT6_PHASE_REG = CLKOUT6_PHASE;
reg [`MMCME4_BASE__DIVCLK_DIVIDE_SZ-1:0] DIVCLK_DIVIDE_REG = DIVCLK_DIVIDE;
reg IS_CLKFBIN_INVERTED_REG = IS_CLKFBIN_INVERTED;
reg IS_CLKIN1_INVERTED_REG = IS_CLKIN1_INVERTED;
reg IS_PWRDWN_INVERTED_REG = IS_PWRDWN_INVERTED;
reg IS_RST_INVERTED_REG = IS_RST_INVERTED;
real REF_JITTER1_REG = REF_JITTER1;
reg [`MMCME4_BASE__STARTUP_WAIT_SZ:1] STARTUP_WAIT_REG = STARTUP_WAIT;

initial begin
  ATTR[`MMCME4_BASE__BANDWIDTH] = BANDWIDTH;
  ATTR[`MMCME4_BASE__CLKFBOUT_MULT_F] = $realtobits(CLKFBOUT_MULT_F);
  ATTR[`MMCME4_BASE__CLKFBOUT_PHASE] = $realtobits(CLKFBOUT_PHASE);
  ATTR[`MMCME4_BASE__CLKIN1_PERIOD] = $realtobits(CLKIN1_PERIOD);
  ATTR[`MMCME4_BASE__CLKOUT0_DIVIDE_F] = $realtobits(CLKOUT0_DIVIDE_F);
  ATTR[`MMCME4_BASE__CLKOUT0_DUTY_CYCLE] = $realtobits(CLKOUT0_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT0_PHASE] = $realtobits(CLKOUT0_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT1_DIVIDE] = CLKOUT1_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT1_DUTY_CYCLE] = $realtobits(CLKOUT1_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT1_PHASE] = $realtobits(CLKOUT1_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT2_DIVIDE] = CLKOUT2_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT2_DUTY_CYCLE] = $realtobits(CLKOUT2_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT2_PHASE] = $realtobits(CLKOUT2_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT3_DIVIDE] = CLKOUT3_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT3_DUTY_CYCLE] = $realtobits(CLKOUT3_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT3_PHASE] = $realtobits(CLKOUT3_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT4_CASCADE] = CLKOUT4_CASCADE;
  ATTR[`MMCME4_BASE__CLKOUT4_DIVIDE] = CLKOUT4_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT4_DUTY_CYCLE] = $realtobits(CLKOUT4_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT4_PHASE] = $realtobits(CLKOUT4_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT5_DIVIDE] = CLKOUT5_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT5_DUTY_CYCLE] = $realtobits(CLKOUT5_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT5_PHASE] = $realtobits(CLKOUT5_PHASE);
  ATTR[`MMCME4_BASE__CLKOUT6_DIVIDE] = CLKOUT6_DIVIDE;
  ATTR[`MMCME4_BASE__CLKOUT6_DUTY_CYCLE] = $realtobits(CLKOUT6_DUTY_CYCLE);
  ATTR[`MMCME4_BASE__CLKOUT6_PHASE] = $realtobits(CLKOUT6_PHASE);
  ATTR[`MMCME4_BASE__DIVCLK_DIVIDE] = DIVCLK_DIVIDE;
  ATTR[`MMCME4_BASE__IS_CLKFBIN_INVERTED] = IS_CLKFBIN_INVERTED;
  ATTR[`MMCME4_BASE__IS_CLKIN1_INVERTED] = IS_CLKIN1_INVERTED;
  ATTR[`MMCME4_BASE__IS_PWRDWN_INVERTED] = IS_PWRDWN_INVERTED;
  ATTR[`MMCME4_BASE__IS_RST_INVERTED] = IS_RST_INVERTED;
  ATTR[`MMCME4_BASE__REF_JITTER1] = $realtobits(REF_JITTER1);
  ATTR[`MMCME4_BASE__STARTUP_WAIT] = STARTUP_WAIT;
end

always @(trig_attr) begin
  BANDWIDTH_REG = ATTR[`MMCME4_BASE__BANDWIDTH];
  CLKFBOUT_MULT_F_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKFBOUT_MULT_F]);
  CLKFBOUT_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKFBOUT_PHASE]);
  CLKIN1_PERIOD_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKIN1_PERIOD]);
  CLKOUT0_DIVIDE_F_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT0_DIVIDE_F]);
  CLKOUT0_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT0_DUTY_CYCLE]);
  CLKOUT0_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT0_PHASE]);
  CLKOUT1_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT1_DIVIDE];
  CLKOUT1_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT1_DUTY_CYCLE]);
  CLKOUT1_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT1_PHASE]);
  CLKOUT2_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT2_DIVIDE];
  CLKOUT2_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT2_DUTY_CYCLE]);
  CLKOUT2_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT2_PHASE]);
  CLKOUT3_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT3_DIVIDE];
  CLKOUT3_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT3_DUTY_CYCLE]);
  CLKOUT3_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT3_PHASE]);
  CLKOUT4_CASCADE_REG = ATTR[`MMCME4_BASE__CLKOUT4_CASCADE];
  CLKOUT4_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT4_DIVIDE];
  CLKOUT4_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT4_DUTY_CYCLE]);
  CLKOUT4_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT4_PHASE]);
  CLKOUT5_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT5_DIVIDE];
  CLKOUT5_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT5_DUTY_CYCLE]);
  CLKOUT5_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT5_PHASE]);
  CLKOUT6_DIVIDE_REG = ATTR[`MMCME4_BASE__CLKOUT6_DIVIDE];
  CLKOUT6_DUTY_CYCLE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT6_DUTY_CYCLE]);
  CLKOUT6_PHASE_REG = $bitstoreal(ATTR[`MMCME4_BASE__CLKOUT6_PHASE]);
  DIVCLK_DIVIDE_REG = ATTR[`MMCME4_BASE__DIVCLK_DIVIDE];
  IS_CLKFBIN_INVERTED_REG = ATTR[`MMCME4_BASE__IS_CLKFBIN_INVERTED];
  IS_CLKIN1_INVERTED_REG = ATTR[`MMCME4_BASE__IS_CLKIN1_INVERTED];
  IS_PWRDWN_INVERTED_REG = ATTR[`MMCME4_BASE__IS_PWRDWN_INVERTED];
  IS_RST_INVERTED_REG = ATTR[`MMCME4_BASE__IS_RST_INVERTED];
  REF_JITTER1_REG = $bitstoreal(ATTR[`MMCME4_BASE__REF_JITTER1]);
  STARTUP_WAIT_REG = ATTR[`MMCME4_BASE__STARTUP_WAIT];
end

// procedures to override, read attribute values

task write_attr;
  input  [`MMCME4_BASE_ADDR_SZ-1:0] addr;
  input  [`MMCME4_BASE_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`MMCME4_BASE_DATA_SZ-1:0] read_attr;
  input  [`MMCME4_BASE_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
trig_attr = ~trig_attr;
  end
endtask
