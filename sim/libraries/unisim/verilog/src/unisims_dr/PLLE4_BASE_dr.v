`include "B_PLLE4_BASE_defines.vh"

reg [`PLLE4_BASE_DATA_SZ-1:0] ATTR [0:`PLLE4_BASE_ADDR_N-1];
reg [`PLLE4_BASE__CLKFBOUT_MULT_SZ-1:0] CLKFBOUT_MULT_REG = CLKFBOUT_MULT;
real CLKFBOUT_PHASE_REG = CLKFBOUT_PHASE;
real CLKIN_PERIOD_REG = CLKIN_PERIOD;
reg [`PLLE4_BASE__CLKOUT0_DIVIDE_SZ-1:0] CLKOUT0_DIVIDE_REG = CLKOUT0_DIVIDE;
real CLKOUT0_DUTY_CYCLE_REG = CLKOUT0_DUTY_CYCLE;
real CLKOUT0_PHASE_REG = CLKOUT0_PHASE;
reg [`PLLE4_BASE__CLKOUT1_DIVIDE_SZ-1:0] CLKOUT1_DIVIDE_REG = CLKOUT1_DIVIDE;
real CLKOUT1_DUTY_CYCLE_REG = CLKOUT1_DUTY_CYCLE;
real CLKOUT1_PHASE_REG = CLKOUT1_PHASE;
reg [`PLLE4_BASE__CLKOUTPHY_MODE_SZ:1] CLKOUTPHY_MODE_REG = CLKOUTPHY_MODE;
reg [`PLLE4_BASE__DIVCLK_DIVIDE_SZ-1:0] DIVCLK_DIVIDE_REG = DIVCLK_DIVIDE;
reg IS_CLKFBIN_INVERTED_REG = IS_CLKFBIN_INVERTED;
reg IS_CLKIN_INVERTED_REG = IS_CLKIN_INVERTED;
reg IS_PWRDWN_INVERTED_REG = IS_PWRDWN_INVERTED;
reg IS_RST_INVERTED_REG = IS_RST_INVERTED;
real REF_JITTER_REG = REF_JITTER;
reg [`PLLE4_BASE__STARTUP_WAIT_SZ:1] STARTUP_WAIT_REG = STARTUP_WAIT;

initial begin
  ATTR[`PLLE4_BASE__CLKFBOUT_MULT] = CLKFBOUT_MULT;
  ATTR[`PLLE4_BASE__CLKFBOUT_PHASE] = $realtobits(CLKFBOUT_PHASE);
  ATTR[`PLLE4_BASE__CLKIN_PERIOD] = $realtobits(CLKIN_PERIOD);
  ATTR[`PLLE4_BASE__CLKOUT0_DIVIDE] = CLKOUT0_DIVIDE;
  ATTR[`PLLE4_BASE__CLKOUT0_DUTY_CYCLE] = $realtobits(CLKOUT0_DUTY_CYCLE);
  ATTR[`PLLE4_BASE__CLKOUT0_PHASE] = $realtobits(CLKOUT0_PHASE);
  ATTR[`PLLE4_BASE__CLKOUT1_DIVIDE] = CLKOUT1_DIVIDE;
  ATTR[`PLLE4_BASE__CLKOUT1_DUTY_CYCLE] = $realtobits(CLKOUT1_DUTY_CYCLE);
  ATTR[`PLLE4_BASE__CLKOUT1_PHASE] = $realtobits(CLKOUT1_PHASE);
  ATTR[`PLLE4_BASE__CLKOUTPHY_MODE] = CLKOUTPHY_MODE;
  ATTR[`PLLE4_BASE__DIVCLK_DIVIDE] = DIVCLK_DIVIDE;
  ATTR[`PLLE4_BASE__IS_CLKFBIN_INVERTED] = IS_CLKFBIN_INVERTED;
  ATTR[`PLLE4_BASE__IS_CLKIN_INVERTED] = IS_CLKIN_INVERTED;
  ATTR[`PLLE4_BASE__IS_PWRDWN_INVERTED] = IS_PWRDWN_INVERTED;
  ATTR[`PLLE4_BASE__IS_RST_INVERTED] = IS_RST_INVERTED;
  ATTR[`PLLE4_BASE__REF_JITTER] = $realtobits(REF_JITTER);
  ATTR[`PLLE4_BASE__STARTUP_WAIT] = STARTUP_WAIT;
end

always @(trig_attr) begin
  CLKFBOUT_MULT_REG = ATTR[`PLLE4_BASE__CLKFBOUT_MULT];
  CLKFBOUT_PHASE_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKFBOUT_PHASE]);
  CLKIN_PERIOD_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKIN_PERIOD]);
  CLKOUT0_DIVIDE_REG = ATTR[`PLLE4_BASE__CLKOUT0_DIVIDE];
  CLKOUT0_DUTY_CYCLE_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKOUT0_DUTY_CYCLE]);
  CLKOUT0_PHASE_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKOUT0_PHASE]);
  CLKOUT1_DIVIDE_REG = ATTR[`PLLE4_BASE__CLKOUT1_DIVIDE];
  CLKOUT1_DUTY_CYCLE_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKOUT1_DUTY_CYCLE]);
  CLKOUT1_PHASE_REG = $bitstoreal(ATTR[`PLLE4_BASE__CLKOUT1_PHASE]);
  CLKOUTPHY_MODE_REG = ATTR[`PLLE4_BASE__CLKOUTPHY_MODE];
  DIVCLK_DIVIDE_REG = ATTR[`PLLE4_BASE__DIVCLK_DIVIDE];
  IS_CLKFBIN_INVERTED_REG = ATTR[`PLLE4_BASE__IS_CLKFBIN_INVERTED];
  IS_CLKIN_INVERTED_REG = ATTR[`PLLE4_BASE__IS_CLKIN_INVERTED];
  IS_PWRDWN_INVERTED_REG = ATTR[`PLLE4_BASE__IS_PWRDWN_INVERTED];
  IS_RST_INVERTED_REG = ATTR[`PLLE4_BASE__IS_RST_INVERTED];
  REF_JITTER_REG = $bitstoreal(ATTR[`PLLE4_BASE__REF_JITTER]);
  STARTUP_WAIT_REG = ATTR[`PLLE4_BASE__STARTUP_WAIT];
end

// procedures to override, read attribute values

task write_attr;
  input  [`PLLE4_BASE_ADDR_SZ-1:0] addr;
  input  [`PLLE4_BASE_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`PLLE4_BASE_DATA_SZ-1:0] read_attr;
  input  [`PLLE4_BASE_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
trig_attr = ~trig_attr;
  end
endtask
