`include "B_DSPFP32_TEST_defines.vh"

reg [`DSPFP32_TEST_DATA_SZ-1:0] ATTR [0:`DSPFP32_TEST_ADDR_N-1];
reg [31:0] ACASCREG_REG = ACASCREG;
reg [31:0] AREG_REG = AREG;
reg ASYNC_INVERT_REG = ASYNC_INVERT;
reg [24:1] A_FPTYPE_REG = A_FPTYPE;
reg [56:1] A_INPUT_REG = A_INPUT;
reg [8:1] BCASCSEL_REG = BCASCSEL;
reg [24:1] B_D_FPTYPE_REG = B_D_FPTYPE;
reg [56:1] B_INPUT_REG = B_INPUT;
reg CLK_INVERT_REG = CLK_INVERT;
reg [56:1] EN_SCAN_REG = EN_SCAN;
reg [31:0] FPA_PREG_REG = FPA_PREG;
reg [31:0] FPBREG_REG = FPBREG;
reg [31:0] FPCREG_REG = FPCREG;
reg [31:0] FPDREG_REG = FPDREG;
reg [31:0] FPMPIPEREG_REG = FPMPIPEREG;
reg [31:0] FPM_PREG_REG = FPM_PREG;
reg [31:0] FPOPMREG_REG = FPOPMREG;
reg [31:0] INMODEREG_REG = INMODEREG;
reg [6:0] IS_FPOPMODE_INVERTED_REG = IS_FPOPMODE_INVERTED;
reg IS_RSTA_INVERTED_REG = IS_RSTA_INVERTED;
reg IS_RSTB_INVERTED_REG = IS_RSTB_INVERTED;
reg IS_RSTC_INVERTED_REG = IS_RSTC_INVERTED;
reg IS_RSTFPA_INVERTED_REG = IS_RSTFPA_INVERTED;
reg IS_RSTFPINMODE_INVERTED_REG = IS_RSTFPINMODE_INVERTED;
reg IS_RSTFPMPIPE_INVERTED_REG = IS_RSTFPMPIPE_INVERTED;
reg IS_RSTFPM_INVERTED_REG = IS_RSTFPM_INVERTED;
reg IS_RSTFPOPMODE_INVERTED_REG = IS_RSTFPOPMODE_INVERTED;
reg [24:1] PCOUTSEL_REG = PCOUTSEL;
reg [40:1] RESET_MODE_REG = RESET_MODE;
reg RSTD_INVERT_REG = RSTD_INVERT;
reg [64:1] USE_MULT_REG = USE_MULT;

initial begin
  ATTR[`DSPFP32_TEST__ACASCREG] = ACASCREG;
  ATTR[`DSPFP32_TEST__AREG] = AREG;
  ATTR[`DSPFP32_TEST__ASYNC_INVERT] = ASYNC_INVERT;
  ATTR[`DSPFP32_TEST__A_FPTYPE] = A_FPTYPE;
  ATTR[`DSPFP32_TEST__A_INPUT] = A_INPUT;
  ATTR[`DSPFP32_TEST__BCASCSEL] = BCASCSEL;
  ATTR[`DSPFP32_TEST__B_D_FPTYPE] = B_D_FPTYPE;
  ATTR[`DSPFP32_TEST__B_INPUT] = B_INPUT;
  ATTR[`DSPFP32_TEST__CLK_INVERT] = CLK_INVERT;
  ATTR[`DSPFP32_TEST__EN_SCAN] = EN_SCAN;
  ATTR[`DSPFP32_TEST__FPA_PREG] = FPA_PREG;
  ATTR[`DSPFP32_TEST__FPBREG] = FPBREG;
  ATTR[`DSPFP32_TEST__FPCREG] = FPCREG;
  ATTR[`DSPFP32_TEST__FPDREG] = FPDREG;
  ATTR[`DSPFP32_TEST__FPMPIPEREG] = FPMPIPEREG;
  ATTR[`DSPFP32_TEST__FPM_PREG] = FPM_PREG;
  ATTR[`DSPFP32_TEST__FPOPMREG] = FPOPMREG;
  ATTR[`DSPFP32_TEST__INMODEREG] = INMODEREG;
  ATTR[`DSPFP32_TEST__IS_FPOPMODE_INVERTED] = IS_FPOPMODE_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTA_INVERTED] = IS_RSTA_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTB_INVERTED] = IS_RSTB_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTC_INVERTED] = IS_RSTC_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTFPA_INVERTED] = IS_RSTFPA_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTFPINMODE_INVERTED] = IS_RSTFPINMODE_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTFPMPIPE_INVERTED] = IS_RSTFPMPIPE_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTFPM_INVERTED] = IS_RSTFPM_INVERTED;
  ATTR[`DSPFP32_TEST__IS_RSTFPOPMODE_INVERTED] = IS_RSTFPOPMODE_INVERTED;
  ATTR[`DSPFP32_TEST__PCOUTSEL] = PCOUTSEL;
  ATTR[`DSPFP32_TEST__RESET_MODE] = RESET_MODE;
  ATTR[`DSPFP32_TEST__RSTD_INVERT] = RSTD_INVERT;
  ATTR[`DSPFP32_TEST__USE_MULT] = USE_MULT;
end

always @(trig_attr) begin
  ACASCREG_REG = ATTR[`DSPFP32_TEST__ACASCREG];
  AREG_REG = ATTR[`DSPFP32_TEST__AREG];
  ASYNC_INVERT_REG = ATTR[`DSPFP32_TEST__ASYNC_INVERT];
  A_FPTYPE_REG = ATTR[`DSPFP32_TEST__A_FPTYPE];
  A_INPUT_REG = ATTR[`DSPFP32_TEST__A_INPUT];
  BCASCSEL_REG = ATTR[`DSPFP32_TEST__BCASCSEL];
  B_D_FPTYPE_REG = ATTR[`DSPFP32_TEST__B_D_FPTYPE];
  B_INPUT_REG = ATTR[`DSPFP32_TEST__B_INPUT];
  CLK_INVERT_REG = ATTR[`DSPFP32_TEST__CLK_INVERT];
  EN_SCAN_REG = ATTR[`DSPFP32_TEST__EN_SCAN];
  FPA_PREG_REG = ATTR[`DSPFP32_TEST__FPA_PREG];
  FPBREG_REG = ATTR[`DSPFP32_TEST__FPBREG];
  FPCREG_REG = ATTR[`DSPFP32_TEST__FPCREG];
  FPDREG_REG = ATTR[`DSPFP32_TEST__FPDREG];
  FPMPIPEREG_REG = ATTR[`DSPFP32_TEST__FPMPIPEREG];
  FPM_PREG_REG = ATTR[`DSPFP32_TEST__FPM_PREG];
  FPOPMREG_REG = ATTR[`DSPFP32_TEST__FPOPMREG];
  INMODEREG_REG = ATTR[`DSPFP32_TEST__INMODEREG];
  IS_FPOPMODE_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_FPOPMODE_INVERTED];
  IS_RSTA_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTA_INVERTED];
  IS_RSTB_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTB_INVERTED];
  IS_RSTC_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTC_INVERTED];
  IS_RSTFPA_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTFPA_INVERTED];
  IS_RSTFPINMODE_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTFPINMODE_INVERTED];
  IS_RSTFPMPIPE_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTFPMPIPE_INVERTED];
  IS_RSTFPM_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTFPM_INVERTED];
  IS_RSTFPOPMODE_INVERTED_REG = ATTR[`DSPFP32_TEST__IS_RSTFPOPMODE_INVERTED];
  PCOUTSEL_REG = ATTR[`DSPFP32_TEST__PCOUTSEL];
  RESET_MODE_REG = ATTR[`DSPFP32_TEST__RESET_MODE];
  RSTD_INVERT_REG = ATTR[`DSPFP32_TEST__RSTD_INVERT];
  USE_MULT_REG = ATTR[`DSPFP32_TEST__USE_MULT];
end

// procedures to override, read attribute values

task write_attr;
  input  [`DSPFP32_TEST_ADDR_SZ-1:0] addr;
  input  [`DSPFP32_TEST_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`DSPFP32_TEST_DATA_SZ-1:0] read_attr;
  input  [`DSPFP32_TEST_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
trig_attr = ~trig_attr;
  end
endtask
